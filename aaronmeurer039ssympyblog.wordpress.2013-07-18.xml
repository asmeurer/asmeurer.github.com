<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2013-07-18 00:06"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>Aaron Meurer's SymPy Blog</title>
<link>http://asmeurersympy.wordpress.com</link>
<description>My blog on my work on SymPy and other fun stuff.</description>
<pubDate>Thu, 18 Jul 2013 00:06:20 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>http://asmeurersympy.wordpress.com</wp:base_blog_url>
<wp:wp_author>
  <wp:author_login>asmeurer</wp:author_login>
  <wp:author_email>asmeurer@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[Aaron Meurer]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:wp_author>
<wp:category>
  <wp:term_id>1</wp:term_id>
  <wp:category_nicename>uncategorized</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
</wp:category>
<generator>http://wordpress.com/</generator>
<image>
		<url>https://secure.gravatar.com/blavatar/51b9e231856e8bf6de4f10e8251149d5?s=96&#038;d=https%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</url>
		<title>Aaron Meurer&#039;s SymPy BlogAaron Meurer&#039;s SymPy Blog</title>
		<link>http://asmeurersympy.wordpress.com</link>
	</image>
	<item>
  <title>First Post!</title>
  <link>http://asmeurersympy.wordpress.com/2009/04/22/first-post/</link>
  <pubDate>Wed, 22 Apr 2009 23:02:35 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[Well, I got accepted into the Google Summer of Code program for 2009. I will be working on <a href="http://code.google.com/p/sympy/">SymPy</a>, a computer algebra system written and run in Python. I will be working on building an ordinary differential equation engine for it, as its present capabilities are very limited. You can look at my application <a href="http://socghop.appspot.com/student_project/show/google/gsoc2009/portland_state/t124024247418">abstract</a>. SymPy requires that I blog about my work at least once a week, so here it is. More will be posted here later.
<div>Originally I started this blog on <a href="http://asmeurersympy.blogspot.com/2009/04/first-post.html">blogger</a>, but I think WordPress will be a little better.  <span style="text-decoration:line-through;">Namely, it seems to support </span><a href="http://wordpress.org/extend/plugins/wp-latex/"><span style="text-decoration:line-through;">plugins</span></a><span style="text-decoration:line-through;">, so I can insert LaTeX code much easier.</span> It would seem that only blogs not hosted at wordpress.com support plugins.</div>
<div>So I think I will  just use <a href="http://ktd.club.fr/programmation/latexit_en.php">LaTeXiT</a> and do it manually.  Oh well.  Anyway, here is the Divergence Theorem, which nicely shows both mathematical beauty and LaTeX beauty.<a href="http://en.wikipedia.org/wiki/Divergence_theorem"><img class="alignnone size-full wp-image-15" title="divergence-theorem" src="http://asmeurersympy.files.wordpress.com/2009/04/divergence-theorem.png" alt="divergence-theorem" width="455" height="105" /></a></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1</wp:post_id>
  <wp:post_date>2009-04-22 23:02:35</wp:post_date>
  <wp:post_date_gmt>2009-04-22 23:02:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>first-post</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[hello-world]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>About</title>
  <link>http://asmeurersympy.wordpress.com/about/</link>
  <pubDate>Wed, 22 Apr 2009 23:02:35 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[I am a graduate student in Mathematics New Mexico State University at Las Cruces, NM, though I reside in Albuquerque, NM for the summer time.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2</wp:post_id>
  <wp:post_date>2009-04-22 23:02:35</wp:post_date>
  <wp:post_date_gmt>2009-04-22 23:02:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>about</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:comment>
    <wp:comment_id>206</wp:comment_id>
    <wp:comment_author><![CDATA[Oscar Lazo]]></wp:comment_author>
    <wp:comment_author_email>estadisticamente@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>189.151.72.85</wp:comment_author_IP>
    <wp:comment_date>2010-10-09 16:51:35</wp:comment_date>
    <wp:comment_date_gmt>2010-10-09 16:51:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hello! I want to talk to you about the implementation of the Risch algorithm in sympy. Could you send me an email? I could not find your email in the web. Thanks.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1286643095</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>207</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>129.138.31.230</wp:comment_author_IP>
    <wp:comment_date>2010-10-09 18:15:45</wp:comment_date>
    <wp:comment_date_gmt>2010-10-09 18:15:45</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi.  I never noticed that my email isn't on my blog here.  I will fix that.  

Anyway, it would be preferable if you emailed the sympy mailing list (sympy@googlegroups.com). That way, the community knows what sorts of things are going on.  You can also contact me via IRC via the #sympy in freenode.  I am asmeurer.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1286648145</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>divergence-theorem</title>
  <link>http://asmeurersympy.wordpress.com/2009/04/22/first-post/divergence-theorem/</link>
  <pubDate>Thu, 23 Apr 2009 01:20:45 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/04/divergence-theorem.pdf</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>7</wp:post_id>
  <wp:post_date>2009-04-23 01:20:45</wp:post_date>
  <wp:post_date_gmt>2009-04-23 01:20:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>divergence-theorem</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/04/divergence-theorem.pdf</wp:attachment_url>
</item>
<item>
  <title>divergence-theorem</title>
  <link>http://asmeurersympy.wordpress.com/2009/04/22/first-post/divergence-theorem-2/</link>
  <pubDate>Thu, 23 Apr 2009 01:35:48 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/04/divergence-theorem.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>15</wp:post_id>
  <wp:post_date>2009-04-23 01:35:48</wp:post_date>
  <wp:post_date_gmt>2009-04-23 01:35:48</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>divergence-theorem-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/04/divergence-theorem.png</wp:attachment_url>
</item>
<item>
  <title>Git Tutorial</title>
  <link>http://asmeurersympy.wordpress.com/?p=18</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=18</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>18</wp:post_id>
  <wp:post_date>2009-04-26 02:37:54</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title>Git Tutorial</title>
  <link>http://asmeurersympy.wordpress.com/2009/04/26/git-tutorial/</link>
  <pubDate>Sun, 26 Apr 2009 02:44:14 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=19</guid>
  <description/>
  <content:encoded><![CDATA[So I was browsing the <a href="http://google-opensource.blogspot.com/">Google Open Source Blog</a>, when I found a link to this <a href="http://www-cs-students.stanford.edu/~blynn//gitmagic/">Git Tutorial</a>.  I wish I had found this a month ago when I started learning Git.  SymPy only has a very basic tutorial for Git.  Their main tutorial is still written for Mercurial, which they used until recently.

Anyway, I have been reading the tutorial, and so far it is awesome, so I thought it would make a good post here.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>19</wp:post_id>
  <wp:post_date>2009-04-26 02:44:14</wp:post_date>
  <wp:post_date_gmt>2009-04-26 02:44:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>git-tutorial</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>My GSoC Proposal</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/08/my-gsoc-proposal/</link>
  <pubDate>Fri, 08 May 2009 03:28:23 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=23</guid>
  <description/>
  <content:encoded><![CDATA[I have copied my proposals over to the SymPy Wiki and formatted them so that they look nice (including LaTeX for the formulas).  I included both the Portland State University proposal, which was accepted (at the top), and the Python Software Foundation proposal, which was nearly identical, but was not accepted.  I did this mainly for myself so I can easily find my timeline during the summer, but if anyone wants to see what my proposal looked like, here it is.  Note that I am pretty sure that the timeline on the proposal will not be the same as what I will actually do (e.g., I have learned much less about systems of ODEs (0), than I expected, and I have learned about a couple new symbolic methods).

The link is <a href="http://wiki.sympy.org/wiki/User:Asmeurer/GSoC2009_Application">here</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>23</wp:post_id>
  <wp:post_date>2009-05-08 03:28:23</wp:post_date>
  <wp:post_date_gmt>2009-05-08 03:28:23</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>my-gsoc-proposal</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Work started -- Exact Differential Equations </title>
  <link>http://asmeurersympy.wordpress.com/2009/05/16/work-started-exact-differential-equations/</link>
  <pubDate>Sat, 16 May 2009 04:47:08 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=25</guid>
  <description/>
  <content:encoded><![CDATA[I have decided to start working on my project, even though it is a week early, since I am finished with school and have nothing better to do.  I also like the idea of getting ahead.  I am pushing everything to my <a href="http://github.com/asmeurer/sympy/tree/odes">github account</a>.  So far, I have implemented <a href="http://en.wikipedia.org/wiki/Exact_differential_equation">exact differential equations</a>, which are cake (i.e., they took me about an hour to code up).  These are equations of the type,<img class="alignnone size-full wp-image-30" title="Exact Differential Equation Form" src="http://asmeurersympy.files.wordpress.com/2009/05/exact-differential-equation-form.png" alt="Exact Differential Equation Form" width="138" height="14" />where<img class="alignnone size-full wp-image-31" title="dP:dy=dQ:dx" src="http://asmeurersympy.files.wordpress.com/2009/05/dpdydqdx.png" alt="dP:dy=dQ:dx" width="49" height="19" />.  If this condition holds, then there exists a function<img class="alignnone size-full wp-image-32" title="F(x,y)" src="http://asmeurersympy.files.wordpress.com/2009/05/fxy.png" alt="F(x,y)" width="38" height="14" />, often called a 'potential function' because of some applications of theses equations to physics, such that<img class="alignnone size-full wp-image-33" title="dF:dx=P" src="http://asmeurersympy.files.wordpress.com/2009/05/dfdxp.png" alt="dF:dx=P" width="43" height="17" />and<img class="alignnone size-full wp-image-34" title="dF:dy=Q" src="http://asmeurersympy.files.wordpress.com/2009/05/dfdyq.png" alt="dF:dy=Q" width="43" height="19" />.  This is because mixed partials are equal for continuous functions.  The solution will then just be<img class="alignnone size-full wp-image-35" title="F(x,y)=C1" src="http://asmeurersympy.files.wordpress.com/2009/05/fxyc1.png" alt="F(x,y)=C1" width="68" height="14" />.  The tricky part is finding the potential function<img class="alignnone size-full wp-image-32" title="F(x,y)" src="http://asmeurersympy.files.wordpress.com/2009/05/fxy.png" alt="F(x,y)" width="38" height="14" />, but it turns out to be easier than you would think.  Because of the fundamental theorem of calculus, the potential function is just<img class="alignnone size-full wp-image-36" title="Exact Differential Equation Solution" src="http://asmeurersympy.files.wordpress.com/2009/05/exact-differential-equation-solution.png" alt="Exact Differential Equation Solution" width="235" height="19" />.  There is a restriction where the rectangle connecting<img class="alignnone size-full wp-image-37" title="(x0,y0)" src="http://asmeurersympy.files.wordpress.com/2009/05/x0y0.png" alt="(x0,y0)" width="39" height="14" />,<img class="alignnone size-full wp-image-38" title="(x0,y)" src="http://asmeurersympy.files.wordpress.com/2009/05/x0y.png" alt="(x0,y)" width="34" height="14" />,<img class="alignnone size-full wp-image-39" title="(x,y0)" src="http://asmeurersympy.files.wordpress.com/2009/05/xy0.png" alt="(x,y0)" width="34" height="14" />, and<img class="alignnone size-full wp-image-42" title="(x,y)" src="http://asmeurersympy.files.wordpress.com/2009/05/xy.png" alt="(x,y)" width="29" height="14" />has to lie entirely in the domain of <img class="alignnone size-full wp-image-43" title="P" src="http://asmeurersympy.files.wordpress.com/2009/05/p.png" alt="P" width="11" height="10" /> and<img class="alignnone size-full wp-image-44" title="Q" src="http://asmeurersympy.files.wordpress.com/2009/05/q.png" alt="Q" width="11" height="13" />, but if we let<img class="alignnone size-full wp-image-45" title="x0=y0=0" src="http://asmeurersympy.files.wordpress.com/2009/05/x0y00.png" alt="x0=y0=0" width="63" height="13" />, then this is not really a problem for functions that SymPy will encounter.  UPDATE: It turns out this is a problem if the equation has singularities in it.  Fortunately, I was able to code up a workaround that usually works.

So you can see that this is easy to implement in SymPy if you know the above fact.  It turns out that most solution methods for ODEs are like this.  They can be solved in the general case, although usually students are only taught tricks because they are much easier to remember than generally solved formulas.  For example, to solve an exact differential equation, students are often taught to just integrate<img class="alignnone size-full wp-image-43" title="P" src="http://asmeurersympy.files.wordpress.com/2009/05/p.png" alt="P" width="11" height="10" />with respect to<img class="alignnone size-full wp-image-46" title="x" src="http://asmeurersympy.files.wordpress.com/2009/05/x.png" alt="x" width="9" height="8" />and<img class="alignnone size-full wp-image-44" title="Q" src="http://asmeurersympy.files.wordpress.com/2009/05/q.png" alt="Q" width="11" height="13" />with respect to<img class="alignnone size-full wp-image-47" title="y" src="http://asmeurersympy.files.wordpress.com/2009/05/y.png" alt="y" width="8" height="9" />.  It is much simpler for a human being to do that than the above integral, because the integral involves evaluating limits and so on, but for a computer algebra system, the above integral is a one-liner.

By the way, if you want to test my code, you should clone my github repository and switch to the odes branch.  You can do this by typing 'git clone git://github.com/asmeurer/sympy.git' and then 'git checkout odes' in a Terminal that is cd'd to the directory you want to clone to (of course, you will need git installed first!).  Then type 'cd sympy' and './bin/isympy', which will start SymPy.  Then from there, you can do stuff like 'dsolve(sin(x)*cos(f(x))+cos(x)*sin(f(x))*f(x).diff(x),f(x)' (this is exact).  It's easy to generate an exact differential equation.  Just start with a random function of x and y, then take the derivative of it with respect to x and y each, and do a subs(y,f(x)) on each term (SymPy wants functions for the dependent variable, so we have to use f(x)).  Then do dsolve(&lt;the derivative with respect to x&gt;+&lt;the derivative with respect to y&gt;*f(x).diff(x),f(x)).  You should get your original function equals an arbitrary constant C1.  By the way, diff(&lt;function&gt;,x) will take the derivative of &lt;function&gt; with respect to x.

Up next: Initial conditions, and then first order homogeneous differential equations.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>25</wp:post_id>
  <wp:post_date>2009-05-16 04:47:08</wp:post_date>
  <wp:post_date_gmt>2009-05-16 04:47:08</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>work-started-exact-differential-equations</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:comment>
    <wp:comment_id>4</wp:comment_id>
    <wp:comment_author><![CDATA[vks]]></wp:comment_author>
    <wp:comment_author_email>spam@another.one</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>91.39.87.241</wp:comment_author_IP>
    <wp:comment_date>2009-05-17 20:45:09</wp:comment_date>
    <wp:comment_date_gmt>2009-05-17 20:45:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You don't need to clone the whole repository if you have already cloned sympy. Something along the following lines should also work (and use much less bandwidth):

$ git remote add aaron git://github.com/asmeurer/sympy.git
$ git fetch aaron
$ git checkout -b odes aaron/odes

And you got a local branch to play with.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>5</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>68.42.37.143</wp:comment_author_IP>
    <wp:comment_date>2009-05-18 00:58:10</wp:comment_date>
    <wp:comment_date_gmt>2009-05-18 00:58:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Yeah.  I am kind of new to git, so I would take my git advise with a grain of salt.  On the other hand, the math has a higher probability of being correct since I am a math major and math is my passion.  And if I post Python code, that should also be correct, since that sort of thing is at least verifiable.  

Another thing I should note is that if you pull my branch and then want to play with it later, you should do a 'git pull' again before you mess with it.  I am always adding patches, so you would want to do that to remove all the bugs/get all the latest features.

Thanks for pointing out errors in blog.  If you find any bugs or inaccuracies in my code, let me know too (though hopefully none of it should make it through the review stage before it gets into the actual SymPy repository).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>4</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8</wp:comment_id>
    <wp:comment_author><![CDATA[First Order Differential Equations with Homogeneous Coefficients &laquo; GSoC 2009: SymPy ODEs]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/</wp:comment_author_url>
    <wp:comment_author_IP>74.200.245.227</wp:comment_author_IP>
    <wp:comment_date>2009-05-31 06:03:37</wp:comment_date>
    <wp:comment_date_gmt>2009-05-31 06:03:37</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] example from my text book.  .  Astute readers of this blog may have noticed that this equation is exact.  It is easier to solve that way, but we will try using the methods outlined above.  First, we [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>Exact Differential Equation Form</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/16/work-started-exact-differential-equations/exact-differential-equation-form/</link>
  <pubDate>Sat, 16 May 2009 04:50:18 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/exact-differential-equation-form.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>30</wp:post_id>
  <wp:post_date>2009-05-16 04:50:18</wp:post_date>
  <wp:post_date_gmt>2009-05-16 04:50:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>exact-differential-equation-form</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>25</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/exact-differential-equation-form.png</wp:attachment_url>
</item>
<item>
  <title>dP:dy=dQ:dx</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/16/work-started-exact-differential-equations/dpdydqdx/</link>
  <pubDate>Sat, 16 May 2009 04:51:11 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/dpdydqdx.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>31</wp:post_id>
  <wp:post_date>2009-05-16 04:51:11</wp:post_date>
  <wp:post_date_gmt>2009-05-16 04:51:11</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>dpdydqdx</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>25</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/dpdydqdx.png</wp:attachment_url>
</item>
<item>
  <title>F(x,y)</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/16/work-started-exact-differential-equations/fxy/</link>
  <pubDate>Sat, 16 May 2009 04:52:07 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/fxy.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>32</wp:post_id>
  <wp:post_date>2009-05-16 04:52:07</wp:post_date>
  <wp:post_date_gmt>2009-05-16 04:52:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fxy</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>25</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/fxy.png</wp:attachment_url>
</item>
<item>
  <title>dF:dx=P</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/16/work-started-exact-differential-equations/dfdxp/</link>
  <pubDate>Sat, 16 May 2009 04:52:41 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/dfdxp.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>33</wp:post_id>
  <wp:post_date>2009-05-16 04:52:41</wp:post_date>
  <wp:post_date_gmt>2009-05-16 04:52:41</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>dfdxp</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>25</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/dfdxp.png</wp:attachment_url>
</item>
<item>
  <title>dF:dy=Q</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/16/work-started-exact-differential-equations/dfdyq/</link>
  <pubDate>Sat, 16 May 2009 04:53:12 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/dfdyq.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>34</wp:post_id>
  <wp:post_date>2009-05-16 04:53:12</wp:post_date>
  <wp:post_date_gmt>2009-05-16 04:53:12</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>dfdyq</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>25</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/dfdyq.png</wp:attachment_url>
</item>
<item>
  <title>F(x,y)=C1</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/16/work-started-exact-differential-equations/fxyc1/</link>
  <pubDate>Sat, 16 May 2009 04:53:47 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/fxyc1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>35</wp:post_id>
  <wp:post_date>2009-05-16 04:53:47</wp:post_date>
  <wp:post_date_gmt>2009-05-16 04:53:47</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fxyc1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>25</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/fxyc1.png</wp:attachment_url>
</item>
<item>
  <title>Exact Differential Equation Solution</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/16/work-started-exact-differential-equations/exact-differential-equation-solution/</link>
  <pubDate>Sat, 16 May 2009 04:54:16 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/exact-differential-equation-solution.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>36</wp:post_id>
  <wp:post_date>2009-05-16 04:54:16</wp:post_date>
  <wp:post_date_gmt>2009-05-16 04:54:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>exact-differential-equation-solution</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>25</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/exact-differential-equation-solution.png</wp:attachment_url>
</item>
<item>
  <title>(x0,y0)</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/16/work-started-exact-differential-equations/x0y0/</link>
  <pubDate>Sat, 16 May 2009 04:55:30 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/x0y0.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>37</wp:post_id>
  <wp:post_date>2009-05-16 04:55:30</wp:post_date>
  <wp:post_date_gmt>2009-05-16 04:55:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>x0y0</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>25</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/x0y0.png</wp:attachment_url>
</item>
<item>
  <title>(x0,y)</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/16/work-started-exact-differential-equations/x0y/</link>
  <pubDate>Sat, 16 May 2009 04:55:46 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/x0y.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>38</wp:post_id>
  <wp:post_date>2009-05-16 04:55:46</wp:post_date>
  <wp:post_date_gmt>2009-05-16 04:55:46</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>x0y</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>25</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/x0y.png</wp:attachment_url>
</item>
<item>
  <title>(x,y0)</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/16/work-started-exact-differential-equations/xy0/</link>
  <pubDate>Sat, 16 May 2009 04:56:02 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/xy0.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>39</wp:post_id>
  <wp:post_date>2009-05-16 04:56:02</wp:post_date>
  <wp:post_date_gmt>2009-05-16 04:56:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>xy0</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>25</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/xy0.png</wp:attachment_url>
</item>
<item>
  <title>(x,y)</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/16/work-started-exact-differential-equations/xy/</link>
  <pubDate>Sat, 16 May 2009 04:57:31 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/xy.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>42</wp:post_id>
  <wp:post_date>2009-05-16 04:57:31</wp:post_date>
  <wp:post_date_gmt>2009-05-16 04:57:31</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>xy</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>25</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/xy.png</wp:attachment_url>
</item>
<item>
  <title>P</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/16/work-started-exact-differential-equations/p/</link>
  <pubDate>Sat, 16 May 2009 04:58:07 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/p.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>43</wp:post_id>
  <wp:post_date>2009-05-16 04:58:07</wp:post_date>
  <wp:post_date_gmt>2009-05-16 04:58:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>p</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>25</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/p.png</wp:attachment_url>
</item>
<item>
  <title>Q</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/16/work-started-exact-differential-equations/q/</link>
  <pubDate>Sat, 16 May 2009 04:59:05 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/q.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>44</wp:post_id>
  <wp:post_date>2009-05-16 04:59:05</wp:post_date>
  <wp:post_date_gmt>2009-05-16 04:59:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>q</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>25</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/q.png</wp:attachment_url>
</item>
<item>
  <title>x0=y0=0</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/16/work-started-exact-differential-equations/x0y00/</link>
  <pubDate>Sat, 16 May 2009 04:59:32 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/x0y00.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>45</wp:post_id>
  <wp:post_date>2009-05-16 04:59:32</wp:post_date>
  <wp:post_date_gmt>2009-05-16 04:59:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>x0y00</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>25</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/x0y00.png</wp:attachment_url>
</item>
<item>
  <title>x</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/16/work-started-exact-differential-equations/x/</link>
  <pubDate>Sat, 16 May 2009 05:00:21 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/x.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>46</wp:post_id>
  <wp:post_date>2009-05-16 05:00:21</wp:post_date>
  <wp:post_date_gmt>2009-05-16 05:00:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>x</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>25</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/x.png</wp:attachment_url>
</item>
<item>
  <title>y</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/16/work-started-exact-differential-equations/y/</link>
  <pubDate>Sat, 16 May 2009 05:01:04 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/y.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>47</wp:post_id>
  <wp:post_date>2009-05-16 05:01:04</wp:post_date>
  <wp:post_date_gmt>2009-05-16 05:01:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>y</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>25</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/y.png</wp:attachment_url>
</item>
<item>
  <title>Patch Problems and Updates</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/25/patch-problems-and-updates/</link>
  <pubDate>Mon, 25 May 2009 04:29:23 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=54</guid>
  <description/>
  <content:encoded><![CDATA[So the GSoC program officially started Saturday.  I have almost finished everything on the timeline for the first week already, except for initial conditions, which I am putting off until Ondrej recodes solve so that it returns a RootOf instance when it cannot solve the equation.  See this <a href="http://groups.google.com/group/sympy/browse_thread/thread/40cafb75db3cb522/eff6ff30dcd450f9?lnk=gst&amp;q=RootOf#eff6ff30dcd450f9">post</a>.

In order to solve homogeneous equations, I had to determine if an equation is homogeneous.  I will post what all this means, when I finish everything up.  Right now, I just need to write a few more tests and make sure that they work.  So I wrote the function, which is very complicated, because it has to take any expression and break it up recursively.  One thing that I wanted for it to do is to realize that log(x)-log(y) == log(x/y) (no LaTeX today, I am too tired).  This is basically because just log(x) or log(y) will make it non-homogeneous, but log(x/y) will make is homogeneous (again, more on what this all means later).  It turns out SymPy could not really do this simplification, so I had to go in and write a logcombine function that did that.  The function works quite well (at least from my tests), but it is also a beefy piece or recursive work.

So here is the part where I am now.  I wanted to submit the logcombine function as a regular patch, because strictly speaking it is not related to my GSoC project.  So I used 'git format-patch' and git 'send-email' as usual.  But then, yesterday, I began to wonder why no one had reviewed or even responded to my patches.  I checked that patch list, and found to my dismay that none of the emails made it through.  I suspect that git is the problem, so I send the patches manually with my email client.

Which led to another problem: the reviewers are claiming that my files are corrupt.  These are major problems.  I cannot reliably send patch emails through git, and when I send them manually, the files are messed up.

Can anyone reading this blog (does anyone actually read this blog?) give me some advice here?  I think the corruption of the patch files <em>may</em> have something to do with the fact that I am using Mac OS X, which I know likes to put nasty things like resource forks in files which screws them up when they are sent to non-Macs.

Of course, this does not explain why git will not send emails.  It has sent them <a href="http://groups.google.com/group/sympy-patches/browse_thread/thread/db7cc7d85d36c5d9/92d5df372a3222f3?lnk=gst&amp;q=asmeurer#92d5df372a3222f3">before</a>, though I think I have had this problem since the <a href="http://groups.google.com/group/sympy-patches/browse_thread/thread/e11b2244ced4709e/178af7c1eeb53652?lnk=gst&amp;q=asmeurer#178af7c1eeb53652">beginning</a>.

And another question to you git geniuses out there: how do I change branches without committing changes?  Sometimes, I am in the middle of two things, and I finish one and I want to push it to its own branch, but I cannot do this without committing the changes on the other thing, which I am not ready to do because I am not done with it yet.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>54</wp:post_id>
  <wp:post_date>2009-05-25 04:29:23</wp:post_date>
  <wp:post_date_gmt>2009-05-25 04:29:23</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>patch-problems-and-updates</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:comment>
    <wp:comment_id>6</wp:comment_id>
    <wp:comment_author><![CDATA[Runa]]></wp:comment_author>
    <wp:comment_author_email>runa.sandvik@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://gsoc-tor.blogspot.com/</wp:comment_author_url>
    <wp:comment_author_IP>129.241.158.202</wp:comment_author_IP>
    <wp:comment_date>2009-05-25 13:45:51</wp:comment_date>
    <wp:comment_date_gmt>2009-05-25 13:45:51</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I'm not a git guru, but I know there are a lot of those at #git on freenode. You should ask there, I'm sure someone can help :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>One problem solved</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/25/one-problem-solved/</link>
  <pubDate>Mon, 25 May 2009 23:47:39 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=57</guid>
  <description/>
  <content:encoded><![CDATA[Well, I figured out why my patch files are appearing corrupted to everyone.  It is close to what I expected.  The files had a Macintosh character encoding, when everyone was expecting UTF-8.  Changing the encoding with TextWrangler was easy enough, but now the question is, how do I make git use this encoding by default?]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>57</wp:post_id>
  <wp:post_date>2009-05-25 23:47:39</wp:post_date>
  <wp:post_date_gmt>2009-05-25 23:47:39</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>one-problem-solved</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>F(tx,ty) = t^nF(x,y)</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/ftxty-tnfxy/</link>
  <pubDate>Sat, 30 May 2009 18:20:44 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/ftxty-tnfxy.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>64</wp:post_id>
  <wp:post_date>2009-05-30 18:20:44</wp:post_date>
  <wp:post_date_gmt>2009-05-30 18:20:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ftxty-tnfxy</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/ftxty-tnfxy.png</wp:attachment_url>
</item>
<item>
  <title>n</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/n/</link>
  <pubDate>Sat, 30 May 2009 18:21:38 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/n.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>65</wp:post_id>
  <wp:post_date>2009-05-30 18:21:38</wp:post_date>
  <wp:post_date_gmt>2009-05-30 18:21:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>n</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/n.png</wp:attachment_url>
</item>
<item>
  <title>F(x,y) = x^nF(1,y:x) = x^nG(y:x)</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/fxy-xnf1yx-xngyx/</link>
  <pubDate>Sat, 30 May 2009 18:28:26 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/fxy-xnf1yx-xngyx.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>66</wp:post_id>
  <wp:post_date>2009-05-30 18:28:26</wp:post_date>
  <wp:post_date_gmt>2009-05-30 18:28:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fxy-xnf1yx-xngyx</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/fxy-xnf1yx-xngyx.png</wp:attachment_url>
</item>
<item>
  <title>y:x</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/yx/</link>
  <pubDate>Sat, 30 May 2009 18:29:21 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/yx.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>67</wp:post_id>
  <wp:post_date>2009-05-30 18:29:21</wp:post_date>
  <wp:post_date_gmt>2009-05-30 18:29:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>yx</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/yx.png</wp:attachment_url>
</item>
<item>
  <title>x:y</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/xy-2/</link>
  <pubDate>Sat, 30 May 2009 18:30:26 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/xy1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>68</wp:post_id>
  <wp:post_date>2009-05-30 18:30:26</wp:post_date>
  <wp:post_date_gmt>2009-05-30 18:30:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>xy-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/xy1.png</wp:attachment_url>
</item>
<item>
  <title>homogeneous example</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/homogeneous-example/</link>
  <pubDate>Sat, 30 May 2009 18:31:58 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/homogeneous-example.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>69</wp:post_id>
  <wp:post_date>2009-05-30 18:31:58</wp:post_date>
  <wp:post_date_gmt>2009-05-30 18:31:58</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>homogeneous-example</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/homogeneous-example.png</wp:attachment_url>
</item>
<item>
  <title>homogeneous example with t's in</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/homogeneous-example-with-ts-in/</link>
  <pubDate>Sat, 30 May 2009 18:34:54 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/homogeneous-example-with-ts-in.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>70</wp:post_id>
  <wp:post_date>2009-05-30 18:34:54</wp:post_date>
  <wp:post_date_gmt>2009-05-30 18:34:54</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>homogeneous-example-with-ts-in</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/homogeneous-example-with-ts-in.png</wp:attachment_url>
</item>
<item>
  <title>x=uy</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/xuy/</link>
  <pubDate>Sat, 30 May 2009 18:39:05 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/xuy.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>71</wp:post_id>
  <wp:post_date>2009-05-30 18:39:05</wp:post_date>
  <wp:post_date_gmt>2009-05-30 18:39:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>xuy</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/xuy.png</wp:attachment_url>
</item>
<item>
  <title>y=ux</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/yux/</link>
  <pubDate>Sat, 30 May 2009 18:39:22 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/yux.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>72</wp:post_id>
  <wp:post_date>2009-05-30 18:39:22</wp:post_date>
  <wp:post_date_gmt>2009-05-30 18:39:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>yux</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/yux.png</wp:attachment_url>
</item>
<item>
  <title>dy=xdu+udx</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/dyxduudx/</link>
  <pubDate>Sat, 30 May 2009 18:41:02 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/dyxduudx.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>73</wp:post_id>
  <wp:post_date>2009-05-30 18:41:02</wp:post_date>
  <wp:post_date_gmt>2009-05-30 18:41:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>dyxduudx</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/dyxduudx.png</wp:attachment_url>
</item>
<item>
  <title>P(x,y)=P(x,xu)</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/pxypxxu/</link>
  <pubDate>Sat, 30 May 2009 18:42:42 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/pxypxxu.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>74</wp:post_id>
  <wp:post_date>2009-05-30 18:42:42</wp:post_date>
  <wp:post_date_gmt>2009-05-30 18:42:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>pxypxxu</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/pxypxxu.png</wp:attachment_url>
</item>
<item>
  <title>Q(x,y)=Q(x,xu)</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/qxyqxxu/</link>
  <pubDate>Sat, 30 May 2009 18:42:56 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/qxyqxxu.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>75</wp:post_id>
  <wp:post_date>2009-05-30 18:42:56</wp:post_date>
  <wp:post_date_gmt>2009-05-30 18:42:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>qxyqxxu</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/qxyqxxu.png</wp:attachment_url>
</item>
<item>
  <title>x^n</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/xn/</link>
  <pubDate>Sat, 30 May 2009 18:43:46 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/xn.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>76</wp:post_id>
  <wp:post_date>2009-05-30 18:43:46</wp:post_date>
  <wp:post_date_gmt>2009-05-30 18:43:46</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>xn</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/xn.png</wp:attachment_url>
</item>
<item>
  <title>x^nP(1,u)dx+x^nQ(1,u)(xdu+udx)=0</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/xnp1udxxnq1uxduudx0/</link>
  <pubDate>Sat, 30 May 2009 18:45:28 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/xnp1udxxnq1uxduudx0.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>77</wp:post_id>
  <wp:post_date>2009-05-30 18:45:28</wp:post_date>
  <wp:post_date_gmt>2009-05-30 18:45:28</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>xnp1udxxnq1uxduudx0</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/xnp1udxxnq1uxduudx0.png</wp:attachment_url>
</item>
<item>
  <title>u=y:x</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/uyx/</link>
  <pubDate>Sat, 30 May 2009 18:46:34 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/uyx.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>78</wp:post_id>
  <wp:post_date>2009-05-30 18:46:34</wp:post_date>
  <wp:post_date_gmt>2009-05-30 18:46:34</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>uyx</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/uyx.png</wp:attachment_url>
</item>
<item>
  <title>x≠0</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/x%e2%89%a00/</link>
  <pubDate>Sat, 30 May 2009 18:52:15 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/xe289a00.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>79</wp:post_id>
  <wp:post_date>2009-05-30 18:52:15</wp:post_date>
  <wp:post_date_gmt>2009-05-30 18:52:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>x%e2%89%a00</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/xe289a00.png</wp:attachment_url>
</item>
<item>
  <title>P(1,u)dx+xQ(1,u)du+uQ(1,u)dx=0</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/p1udxxq1uduuq1udx0/</link>
  <pubDate>Sat, 30 May 2009 18:54:41 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/p1udxxq1uduuq1udx0.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>80</wp:post_id>
  <wp:post_date>2009-05-30 18:54:41</wp:post_date>
  <wp:post_date_gmt>2009-05-30 18:54:41</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>p1udxxq1uduuq1udx0</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/p1udxxq1uduuq1udx0.png</wp:attachment_url>
</item>
<item>
  <title>dx</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/dx/</link>
  <pubDate>Sat, 30 May 2009 18:56:04 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/dx.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>81</wp:post_id>
  <wp:post_date>2009-05-30 18:56:04</wp:post_date>
  <wp:post_date_gmt>2009-05-30 18:56:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>dx</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/dx.png</wp:attachment_url>
</item>
<item>
  <title>du</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/du/</link>
  <pubDate>Sat, 30 May 2009 18:56:24 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/du.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>82</wp:post_id>
  <wp:post_date>2009-05-30 18:56:24</wp:post_date>
  <wp:post_date_gmt>2009-05-30 18:56:24</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>du</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/du.png</wp:attachment_url>
</item>
<item>
  <title>(P(1,u)+uQ(1,u))dx=-xQ(1,u)du</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/p1uuq1udx-xq1udu/</link>
  <pubDate>Sat, 30 May 2009 18:58:01 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/p1uuq1udx-xq1udu.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>83</wp:post_id>
  <wp:post_date>2009-05-30 18:58:01</wp:post_date>
  <wp:post_date_gmt>2009-05-30 18:58:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>p1uuq1udx-xq1udu</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/p1uuq1udx-xq1udu.png</wp:attachment_url>
</item>
<item>
  <title>solved homogeneous equation</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/solved-homogeneous-equation/</link>
  <pubDate>Sat, 30 May 2009 19:04:12 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/solved-homogeneous-equation1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>86</wp:post_id>
  <wp:post_date>2009-05-30 19:04:12</wp:post_date>
  <wp:post_date_gmt>2009-05-30 19:04:12</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>solved-homogeneous-equation</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/solved-homogeneous-equation1.png</wp:attachment_url>
</item>
<item>
  <title>example homogeneous equation</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/example-homogeneous-equation/</link>
  <pubDate>Sat, 30 May 2009 19:10:20 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/example-homogeneous-equation.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>87</wp:post_id>
  <wp:post_date>2009-05-30 19:10:20</wp:post_date>
  <wp:post_date_gmt>2009-05-30 19:10:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>example-homogeneous-equation</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/example-homogeneous-equation.png</wp:attachment_url>
</item>
<item>
  <title>dy</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/dy/</link>
  <pubDate>Sat, 30 May 2009 19:13:28 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/dy.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>88</wp:post_id>
  <wp:post_date>2009-05-30 19:13:28</wp:post_date>
  <wp:post_date_gmt>2009-05-30 19:13:28</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>dy</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/dy.png</wp:attachment_url>
</item>
<item>
  <title>P(x,y)=2xy</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/pxy2xy/</link>
  <pubDate>Sat, 30 May 2009 19:15:59 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/pxy2xy.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>89</wp:post_id>
  <wp:post_date>2009-05-30 19:15:59</wp:post_date>
  <wp:post_date_gmt>2009-05-30 19:15:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>pxy2xy</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/pxy2xy.png</wp:attachment_url>
</item>
<item>
  <title>Q(x,y)=x^2+y^2</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/qxyx2y2/</link>
  <pubDate>Sat, 30 May 2009 19:16:50 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/qxyx2y2.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>90</wp:post_id>
  <wp:post_date>2009-05-30 19:16:50</wp:post_date>
  <wp:post_date_gmt>2009-05-30 19:16:50</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>qxyx2y2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/qxyx2y2.png</wp:attachment_url>
</item>
<item>
  <title>solved homogeneous equation dy</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/solved-homogeneous-equation-dy/</link>
  <pubDate>Sat, 30 May 2009 19:20:34 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/solved-homogeneous-equation-dy1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>91</wp:post_id>
  <wp:post_date>2009-05-30 19:20:34</wp:post_date>
  <wp:post_date_gmt>2009-05-30 19:20:34</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>solved-homogeneous-equation-dy</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/solved-homogeneous-equation-dy1.png</wp:attachment_url>
</item>
<item>
  <title>homogeneous example int 1</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/homogeneous-example-int-1/</link>
  <pubDate>Sat, 30 May 2009 19:22:02 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/homogeneous-example-int-1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>92</wp:post_id>
  <wp:post_date>2009-05-30 19:22:02</wp:post_date>
  <wp:post_date_gmt>2009-05-30 19:22:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>homogeneous-example-int-1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/homogeneous-example-int-1.png</wp:attachment_url>
</item>
<item>
  <title>homogeneous example int 2</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/homogeneous-example-int-2/</link>
  <pubDate>Sat, 30 May 2009 19:23:03 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/homogeneous-example-int-2.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>93</wp:post_id>
  <wp:post_date>2009-05-30 19:23:03</wp:post_date>
  <wp:post_date_gmt>2009-05-30 19:23:03</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>homogeneous-example-int-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/homogeneous-example-int-2.png</wp:attachment_url>
</item>
<item>
  <title>u=x:y</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/uxy/</link>
  <pubDate>Sat, 30 May 2009 19:23:32 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/uxy.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>94</wp:post_id>
  <wp:post_date>2009-05-30 19:23:32</wp:post_date>
  <wp:post_date_gmt>2009-05-30 19:23:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>uxy</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/uxy.png</wp:attachment_url>
</item>
<item>
  <title>u</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/u/</link>
  <pubDate>Sat, 30 May 2009 19:31:43 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/u.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>95</wp:post_id>
  <wp:post_date>2009-05-30 19:31:43</wp:post_date>
  <wp:post_date_gmt>2009-05-30 19:31:43</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>u</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/u.png</wp:attachment_url>
</item>
<item>
  <title>homogeneous sol 1</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/homogeneous-sol-1/</link>
  <pubDate>Sat, 30 May 2009 19:31:59 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/homogeneous-sol-1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>96</wp:post_id>
  <wp:post_date>2009-05-30 19:31:59</wp:post_date>
  <wp:post_date_gmt>2009-05-30 19:31:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>homogeneous-sol-1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/homogeneous-sol-1.png</wp:attachment_url>
</item>
<item>
  <title>homogeneous sol 2</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/homogeneous-sol-2/</link>
  <pubDate>Sat, 30 May 2009 19:32:17 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/homogeneous-sol-2.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>97</wp:post_id>
  <wp:post_date>2009-05-30 19:32:17</wp:post_date>
  <wp:post_date_gmt>2009-05-30 19:32:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>homogeneous-sol-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/homogeneous-sol-2.png</wp:attachment_url>
</item>
<item>
  <title>C=ln(C_1)</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/clnc_1/</link>
  <pubDate>Sat, 30 May 2009 19:33:31 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/clnc_1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>98</wp:post_id>
  <wp:post_date>2009-05-30 19:33:31</wp:post_date>
  <wp:post_date_gmt>2009-05-30 19:33:31</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>clnc_1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/clnc_1.png</wp:attachment_url>
</item>
<item>
  <title>homogeneos sol 1 simp</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/homogeneos-sol-1-simp/</link>
  <pubDate>Sat, 30 May 2009 19:36:56 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/homogeneos-sol-1-simp.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>99</wp:post_id>
  <wp:post_date>2009-05-30 19:36:56</wp:post_date>
  <wp:post_date_gmt>2009-05-30 19:36:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>homogeneos-sol-1-simp</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/homogeneos-sol-1-simp.png</wp:attachment_url>
</item>
<item>
  <title>homogeneous sol 2 simp</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/homogeneous-sol-2-simp/</link>
  <pubDate>Sat, 30 May 2009 19:38:03 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/homogeneous-sol-2-simp.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>100</wp:post_id>
  <wp:post_date>2009-05-30 19:38:03</wp:post_date>
  <wp:post_date_gmt>2009-05-30 19:38:03</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>homogeneous-sol-2-simp</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/homogeneous-sol-2-simp.png</wp:attachment_url>
</item>
<item>
  <title>-3</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/attachment/3/</link>
  <pubDate>Sat, 30 May 2009 19:40:32 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/31.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>102</wp:post_id>
  <wp:post_date>2009-05-30 19:40:32</wp:post_date>
  <wp:post_date_gmt>2009-05-30 19:40:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>3</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/31.png</wp:attachment_url>
</item>
<item>
  <title>C_1^-3=A</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/c_1-3a/</link>
  <pubDate>Sat, 30 May 2009 19:40:48 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/c_1-3a.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>103</wp:post_id>
  <wp:post_date>2009-05-30 19:40:48</wp:post_date>
  <wp:post_date_gmt>2009-05-30 19:40:48</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>c_1-3a</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/c_1-3a.png</wp:attachment_url>
</item>
<item>
  <title>homogeneous sol 1 final</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/homogeneous-sol-1-final/</link>
  <pubDate>Sat, 30 May 2009 19:45:05 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/05/homogeneous-sol-1-final.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>104</wp:post_id>
  <wp:post_date>2009-05-30 19:45:05</wp:post_date>
  <wp:post_date_gmt>2009-05-30 19:45:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>homogeneous-sol-1-final</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>63</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/05/homogeneous-sol-1-final.png</wp:attachment_url>
</item>
<item>
  <title>Next: Separable Differential Equations</title>
  <link>http://asmeurersympy.wordpress.com/?p=156</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=156</guid>
  <description/>
  <content:encoded><![CDATA[So the next thing on my <a href="http://wiki.sympy.org/wiki/User:Asmeurer/GSoC2009_Application#Description_.28by_timeline.29">list</a> is seperable differential equations.  As I predicted in my proposal, I am going to have to do some work to get SymPy to recognize all equations that are separable.  Currently, it can match expressions that are exactly written as $latex a(x)b(y)\frac{dy}{dx}+c(x)d(y)=0$, such as $latex x^2(y+2)\frac{dy}{dx}-y^3=0$ but the matching engine cannot get things like $latex (x^2y+x^2)\frac{dy}{dx}+-y^3=0$, because it doesn't know how to factor out the $latex x^2$.  There is a function, collect, that can factor out expressions if you give them to it explicily (e.g., <code>collect(x**2*y+x**2,x**2)</code>), but it doesn't know yet how to separate variables in general.  So I will be working on it this week.  Once it can properly separate separable expressions, implementing it in dsolve will be cake.  

Also, it needs to learn how to do $latex\exp{x+y}\rightarrow\exp{x}\exp{y}$ and $latex 1+x+y+xy \rightarrow (1+x)(1+y)$.  ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>156</wp:post_id>
  <wp:post_date>2009-05-31 18:48:29</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>&gt;&gt;&gt; a = [x, x+1] &gt;&gt;&gt; newa = [] &gt;&gt;&gt; for i in a: ...     if not i.has(x): ...         newa.append(i) ...     a = newa ... &gt;&gt;&gt; newa []</title>
  <link>http://asmeurersympy.wordpress.com/2009/07/20/modifying-a-list-while-looping-through-it-in-python/code-block-2/</link>
  <pubDate>Mon, 20 Jul 2009 06:28:34 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/07/code-block-2.png</guid>
  <description/>
  <content:encoded><![CDATA[&gt;&gt;&gt; a = [x, x+1]
&gt;&gt;&gt; newa = []
&gt;&gt;&gt; for i in a:
...     if not i.has(x):
...         newa.append(i)
...     a = newa
...
&gt;&gt;&gt; newa
[]]]></content:encoded>
  <excerpt:encoded><![CDATA[&gt;&gt;&gt; a = [x, x+1] &gt;&gt;&gt; newa = [] &gt;&gt;&gt; for i in a: ...     if not i.has(x): ...         newa.append(i) ...     a = newa ... &gt;&gt;&gt; newa []]]></excerpt:encoded>
  <wp:post_id>204</wp:post_id>
  <wp:post_date>2009-07-20 06:28:34</wp:post_date>
  <wp:post_date_gmt>2009-07-20 06:28:34</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>code-block-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>197</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/07/code-block-2.png</wp:attachment_url>
</item>
<item>
  <title>Code block 3</title>
  <link>http://asmeurersympy.wordpress.com/2009/07/20/modifying-a-list-while-looping-through-it-in-python/code-block-3/</link>
  <pubDate>Mon, 20 Jul 2009 06:29:38 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/07/code-block-3.png</guid>
  <description/>
  <content:encoded><![CDATA[&gt;&gt;&gt; a = [1, 2, 3, 4]
&gt;&gt;&gt; for i in a:
...    a.remove(i)
...
&gt;&gt;&gt; a
[2, 4]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>205</wp:post_id>
  <wp:post_date>2009-07-20 06:29:38</wp:post_date>
  <wp:post_date_gmt>2009-07-20 06:29:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>code-block-3</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>197</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/07/code-block-3.png</wp:attachment_url>
</item>
<item>
  <title>Code block 1</title>
  <link>http://asmeurersympy.wordpress.com/2009/07/20/modifying-a-list-while-looping-through-it-in-python/code-block-1/</link>
  <pubDate>Mon, 20 Jul 2009 06:32:24 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/07/code-block-11.png</guid>
  <description/>
  <content:encoded><![CDATA[&gt;&gt;&gt; a = [x, x+1]
&gt;&gt;&gt; for i in a:
...     if i.has(x):
...         a.remove(i)
...
&gt;&gt;&gt; a
[1 + x]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>207</wp:post_id>
  <wp:post_date>2009-07-20 06:32:24</wp:post_date>
  <wp:post_date_gmt>2009-07-20 06:32:24</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>code-block-1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>197</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/07/code-block-11.png</wp:attachment_url>
</item>
<item>
  <title>Crazy Trig Wronskian (SymPy)</title>
  <link>http://asmeurersympy.wordpress.com/2009/08/01/variation-of-parameters-and-more/crazy-trig-wronskian-sympy/</link>
  <pubDate>Sun, 02 Aug 2009 22:19:07 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/08/crazy-trig-wronskian-sympy.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>240</wp:post_id>
  <wp:post_date>2009-08-02 22:19:07</wp:post_date>
  <wp:post_date_gmt>2009-08-02 22:19:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>crazy-trig-wronskian-sympy</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>219</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/08/crazy-trig-wronskian-sympy.png</wp:attachment_url>
</item>
<item>
  <title>Ondrej Visit 001</title>
  <link>http://asmeurersympy.wordpress.com/2009/08/17/los-alamos-sprint/ondrej-visit-001/</link>
  <pubDate>Mon, 17 Aug 2009 18:48:25 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/08/ondrej-visit-0011.jpg</guid>
  <description/>
  <content:encoded><![CDATA[Up on the mountain.]]></content:encoded>
  <excerpt:encoded><![CDATA[Ondrej and Me]]></excerpt:encoded>
  <wp:post_id>261</wp:post_id>
  <wp:post_date>2009-08-17 18:48:25</wp:post_date>
  <wp:post_date_gmt>2009-08-17 18:48:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ondrej-visit-001</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>256</wp:post_parent>
  <wp:menu_order>10</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/08/ondrej-visit-0011.jpg</wp:attachment_url>
</item>
<item>
  <title>Ondrej Visit 002</title>
  <link>http://asmeurersympy.wordpress.com/2009/08/17/los-alamos-sprint/ondrej-visit-002/</link>
  <pubDate>Mon, 17 Aug 2009 18:48:32 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/08/ondrej-visit-002.jpg</guid>
  <description/>
  <content:encoded><![CDATA[This is the road we took to get up here.  It was pretty windy at parts (I was driving).]]></content:encoded>
  <excerpt:encoded><![CDATA[The road]]></excerpt:encoded>
  <wp:post_id>262</wp:post_id>
  <wp:post_date>2009-08-17 18:48:32</wp:post_date>
  <wp:post_date_gmt>2009-08-17 18:48:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ondrej-visit-002</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>256</wp:post_parent>
  <wp:menu_order>9</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/08/ondrej-visit-002.jpg</wp:attachment_url>
</item>
<item>
  <title>Ondrej Visit 003</title>
  <link>http://asmeurersympy.wordpress.com/2009/08/17/los-alamos-sprint/ondrej-visit-003/</link>
  <pubDate>Mon, 17 Aug 2009 18:48:36 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/08/ondrej-visit-003.jpg</guid>
  <description/>
  <content:encoded><![CDATA[Up on the mountain near the hot springs.]]></content:encoded>
  <excerpt:encoded><![CDATA[Ondrej and Me]]></excerpt:encoded>
  <wp:post_id>263</wp:post_id>
  <wp:post_date>2009-08-17 18:48:36</wp:post_date>
  <wp:post_date_gmt>2009-08-17 18:48:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ondrej-visit-003</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>256</wp:post_parent>
  <wp:menu_order>8</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/08/ondrej-visit-003.jpg</wp:attachment_url>
</item>
<item>
  <title>Ondrej Visit 004</title>
  <link>http://asmeurersympy.wordpress.com/2009/08/17/los-alamos-sprint/ondrej-visit-004/</link>
  <pubDate>Mon, 17 Aug 2009 18:48:42 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/08/ondrej-visit-004.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[The Valles Caldera]]></excerpt:encoded>
  <wp:post_id>264</wp:post_id>
  <wp:post_date>2009-08-17 18:48:42</wp:post_date>
  <wp:post_date_gmt>2009-08-17 18:48:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ondrej-visit-004</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>256</wp:post_parent>
  <wp:menu_order>7</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/08/ondrej-visit-004.jpg</wp:attachment_url>
</item>
<item>
  <title>Ondrej Visit 005</title>
  <link>http://asmeurersympy.wordpress.com/2009/08/17/los-alamos-sprint/ondrej-visit-005/</link>
  <pubDate>Mon, 17 Aug 2009 18:48:47 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/08/ondrej-visit-005.jpg</guid>
  <description/>
  <content:encoded><![CDATA[Standing in front of the Caldera sign.]]></content:encoded>
  <excerpt:encoded><![CDATA[Me and Ondrej]]></excerpt:encoded>
  <wp:post_id>265</wp:post_id>
  <wp:post_date>2009-08-17 18:48:47</wp:post_date>
  <wp:post_date_gmt>2009-08-17 18:48:47</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ondrej-visit-005</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>256</wp:post_parent>
  <wp:menu_order>6</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/08/ondrej-visit-005.jpg</wp:attachment_url>
</item>
<item>
  <title>Ondrej Visit 006</title>
  <link>http://asmeurersympy.wordpress.com/2009/08/17/los-alamos-sprint/ondrej-visit-006/</link>
  <pubDate>Mon, 17 Aug 2009 18:48:52 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/08/ondrej-visit-006.jpg</guid>
  <description/>
  <content:encoded><![CDATA[Standing in front of the Caldera sign.]]></content:encoded>
  <excerpt:encoded><![CDATA[Me and Ondrej]]></excerpt:encoded>
  <wp:post_id>266</wp:post_id>
  <wp:post_date>2009-08-17 18:48:52</wp:post_date>
  <wp:post_date_gmt>2009-08-17 18:48:52</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ondrej-visit-006</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>256</wp:post_parent>
  <wp:menu_order>5</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/08/ondrej-visit-006.jpg</wp:attachment_url>
</item>
<item>
  <title>Ondrej Visit 007</title>
  <link>http://asmeurersympy.wordpress.com/2009/08/17/los-alamos-sprint/ondrej-visit-007/</link>
  <pubDate>Mon, 17 Aug 2009 18:49:03 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/08/ondrej-visit-007.jpg</guid>
  <description/>
  <content:encoded><![CDATA[Up on a mountain near some hot springs.  Ondrej took this picture from up hill from us, so we look kind of short.]]></content:encoded>
  <excerpt:encoded><![CDATA[Me and Luke]]></excerpt:encoded>
  <wp:post_id>267</wp:post_id>
  <wp:post_date>2009-08-17 18:49:03</wp:post_date>
  <wp:post_date_gmt>2009-08-17 18:49:03</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ondrej-visit-007</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>256</wp:post_parent>
  <wp:menu_order>4</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/08/ondrej-visit-007.jpg</wp:attachment_url>
</item>
<item>
  <title>Ondrej Visit 008</title>
  <link>http://asmeurersympy.wordpress.com/2009/08/17/los-alamos-sprint/ondrej-visit-008/</link>
  <pubDate>Mon, 17 Aug 2009 18:49:07 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/08/ondrej-visit-008.jpg</guid>
  <description/>
  <content:encoded><![CDATA[In front of the Caldera sign.]]></content:encoded>
  <excerpt:encoded><![CDATA[Me]]></excerpt:encoded>
  <wp:post_id>268</wp:post_id>
  <wp:post_date>2009-08-17 18:49:07</wp:post_date>
  <wp:post_date_gmt>2009-08-17 18:49:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ondrej-visit-008</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>256</wp:post_parent>
  <wp:menu_order>3</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/08/ondrej-visit-008.jpg</wp:attachment_url>
</item>
<item>
  <title>Ondrej Visit 009</title>
  <link>http://asmeurersympy.wordpress.com/2009/08/17/los-alamos-sprint/ondrej-visit-009/</link>
  <pubDate>Mon, 17 Aug 2009 18:49:13 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/08/ondrej-visit-009.jpg</guid>
  <description/>
  <content:encoded><![CDATA[Up on a mountain near some hot springs.  Ondrej took this picture from up hill from us, so we look kind of short.]]></content:encoded>
  <excerpt:encoded><![CDATA[Me and Luke]]></excerpt:encoded>
  <wp:post_id>269</wp:post_id>
  <wp:post_date>2009-08-17 18:49:13</wp:post_date>
  <wp:post_date_gmt>2009-08-17 18:49:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ondrej-visit-009</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>256</wp:post_parent>
  <wp:menu_order>2</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/08/ondrej-visit-009.jpg</wp:attachment_url>
</item>
<item>
  <title>Ondrej Visit 010</title>
  <link>http://asmeurersympy.wordpress.com/2009/08/17/los-alamos-sprint/ondrej-visit-010/</link>
  <pubDate>Mon, 17 Aug 2009 18:49:16 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2009/08/ondrej-visit-010.jpg</guid>
  <description/>
  <content:encoded><![CDATA[Standing in front of the Caldera]]></content:encoded>
  <excerpt:encoded><![CDATA[Luke]]></excerpt:encoded>
  <wp:post_id>270</wp:post_id>
  <wp:post_date>2009-08-17 18:49:16</wp:post_date>
  <wp:post_date_gmt>2009-08-17 18:49:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ondrej-visit-010</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>256</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2009/08/ondrej-visit-010.jpg</wp:attachment_url>
</item>
<item>
  <title>SymPy makes it to Fink</title>
  <link>http://asmeurersympy.wordpress.com/2010/04/06/latest-sympy-makes-it-to-fink/screen-shot-2010-04-06-at-1-25-10-pm/</link>
  <pubDate>Tue, 06 Apr 2010 19:33:06 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2010/04/screen-shot-2010-04-06-at-1-25-10-pm.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>364</wp:post_id>
  <wp:post_date>2010-04-06 19:33:06</wp:post_date>
  <wp:post_date_gmt>2010-04-06 19:33:06</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>screen-shot-2010-04-06-at-1-25-10-pm</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>363</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2010/04/screen-shot-2010-04-06-at-1-25-10-pm.png</wp:attachment_url>
</item>
<item>
  <title>PuDB</title>
  <link>http://asmeurersympy.wordpress.com/2010/06/04/pudb-a-better-python-debugger/pudb/</link>
  <pubDate>Fri, 04 Jun 2010 20:49:29 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2010/06/pudb.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[This is where the heurisch algorithm hangs.]]></excerpt:encoded>
  <wp:post_id>401</wp:post_id>
  <wp:post_date>2010-06-04 20:49:29</wp:post_date>
  <wp:post_date_gmt>2010-06-04 20:49:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>pudb</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>400</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2010/06/pudb.png</wp:attachment_url>
</item>
<item>
  <title>gcd</title>
  <link>http://asmeurersympy.wordpress.com/2010/06/11/integration-of-rational-functions/gcd/</link>
  <pubDate>Thu, 10 Jun 2010 18:07:35 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2010/06/gcd.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>420</wp:post_id>
  <wp:post_date>2010-06-10 18:07:35</wp:post_date>
  <wp:post_date_gmt>2010-06-10 18:07:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>gcd</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>379</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2010/06/gcd.png</wp:attachment_url>
</item>
<item>
  <title>crazy function</title>
  <link>http://asmeurersympy.wordpress.com/2010/07/24/the-risch-algorithm-part-2-elementary-functions/crazy-function/</link>
  <pubDate>Sat, 24 Jul 2010 02:47:10 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2010/07/crazy-function.pdf</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>630</wp:post_id>
  <wp:post_date>2010-07-24 02:47:10</wp:post_date>
  <wp:post_date_gmt>2010-07-24 02:47:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>crazy-function</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>600</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2010/07/crazy-function.pdf</wp:attachment_url>
</item>
<item>
  <title>crazy function</title>
  <link>http://asmeurersympy.wordpress.com/2010/07/24/the-risch-algorithm-part-2-elementary-functions/crazy-function-2/</link>
  <pubDate>Sat, 24 Jul 2010 02:48:16 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2010/07/crazy-function.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>632</wp:post_id>
  <wp:post_date>2010-07-24 02:48:16</wp:post_date>
  <wp:post_date_gmt>2010-07-24 02:48:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>crazy-function-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>600</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2010/07/crazy-function.png</wp:attachment_url>
</item>
<item>
  <title>PuDB XCode Midnight Theme Colors</title>
  <link>http://asmeurersympy.wordpress.com/2010/06/04/pudb-a-better-python-debugger/screen-shot-2010-07-28-at-12-51-36-pm/</link>
  <pubDate>Wed, 28 Jul 2010 18:52:23 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2010/07/screen-shot-2010-07-28-at-12-51-36-pm.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[PuDB XCode Midnight Theme Colors]]></excerpt:encoded>
  <wp:post_id>682</wp:post_id>
  <wp:post_date>2010-07-28 18:52:23</wp:post_date>
  <wp:post_date_gmt>2010-07-28 18:52:23</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>screen-shot-2010-07-28-at-12-51-36-pm</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>400</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2010/07/screen-shot-2010-07-28-at-12-51-36-pm.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[PuDB XCode Midnight Theme Colors]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>test</title>
  <link>http://asmeurersympy.wordpress.com/?p=732</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=732</guid>
  <description/>
  <content:encoded><![CDATA[$latex \LaTeX$]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>732</wp:post_id>
  <wp:post_date>2010-08-08 23:06:47</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>test</title>
  <link>http://asmeurersympy.wordpress.com/?p=734</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=734</guid>
  <description/>
  <content:encoded><![CDATA[OK, fink claims that f2py is installed as a virtual package to numpy.

<a href="http://pastebin.com/prhZ6DNu">This</a> is my <code>quiet=False</code> output.

Sorry, I actually don't know anything about numpy, Fortran, or code generation, but seeing SymPy faster than the other guy always perks my interest :)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>734</wp:post_id>
  <wp:post_date>2010-08-08 23:32:42</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>test</title>
  <link>http://asmeurersympy.wordpress.com/?p=737</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=737</guid>
  <description/>
  <content:encoded><![CDATA[Again an interesting post (and it looks nicer :)).  Maybe I'll try them later in your branch to see if it works this time, and if so, if I get similar results.

What did you use to create the plots?  Did you automate it somehow, or did you have to enter the numbers manually?  I would like to create a timing plot comparing <code>risch_integrate()</code> to <code>integrate()</code>, but would like to get a lot of points (say, compare $latex \int x^ne^x dx$ for $latex n$ from 0 to 50, which is phenomenally faster in the new implementation), but I don't want to manually grab 100 <code>%timeit</code> numbers.  ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>737</wp:post_id>
  <wp:post_date>2010-08-11 04:40:08</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>test</title>
  <link>http://asmeurersympy.wordpress.com/?p=742</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=742</guid>
  <description/>
  <content:encoded><![CDATA[Sorry, I get the same error as before (<code>ImportError: dynamic module does not define init function (initwrapper_module_0</code>).  I'm trying in the latest <code>autowrap3</code> branch (4496107) (funny how the first part of the SHA1 for your branches always seem to be pure numerical digits).  

Even without it working, one can see the cost of the faster code generated function, which is that it takes a minute or two initially to compile, even for a function as simple as the one in <code>[8]</code>

A suggestion: rename <code>quiet=True</code> to <code>verbose=False</code>.

For timeit, IPython's <code>magic_timeit()</code> has its own custom code to automatically determine the number of loops.  So I think the solution is to just take the source for it and modify it to return a value instead of printing it.  Or I noticed that Mateusz started a similar thing <a href="http://github.com/mattpap/sympy-polys/commit/7454fdc4ff4bbff2bfc263c1006b4bed41abb45e">already</a> in his polys11 branch, so maybe I will just work off of that.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>742</wp:post_id>
  <wp:post_date>2010-08-13 05:31:16</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>The Risch Algorithm: Part 4, The Structure Theorems</title>
  <link>http://asmeurersympy.wordpress.com/?p=753</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=753</guid>
  <description/>
  <content:encoded><![CDATA[<strong>The Structure Theorems</strong>

<em>Here's a blog post that I actually started to write last August.  I suggest you read parts <a href="http://asmeurersympy.wordpress.com/2010/06/11/integration-of-rational-functions/" target="_blank">0</a>, <a href="http://asmeurersympy.wordpress.com/2010/06/30/the-risch-algorithm-part-1/" target="_blank">1</a>, <a href="http://asmeurersympy.wordpress.com/2010/07/24/the-risch-algorithm-part-2-elementary-functions/" target="_blank">2</a>, and <a href="http://asmeurersympy.wordpress.com/2010/08/14/the-risch-algorithm-part-3-liouvilles-theorem/" target="_blank">3</a> first.</em>

The Transcendental Risch Algorithm is very picky.  Every elementary extension (review <a href="http://asmeurersympy.wordpress.com/2010/07/24/the-risch-algorithm-part-2-elementary-functions/">part 2</a> for the definition of this) that we use for the integral has to be transcendental over the already existing extensions.  I also spoke a little about the difficulties of this in the first part of <a href="http://asmeurersympy.wordpress.com/2010/08/05/prototype-risch_integrate-function-ready-for-testing/">this blog post</a>.  

The bad news is that recognizing algebraic functions is not as easy as looking for things like $latex \sqrt{x}$ and $latex (x + 2)^{\frac{3}{2}}$.  The reason is that with transcendental functions we can have hidden algebraic relations.  For example, in each of the following sets, the elements are algebraically dependent over $latex \mathbb{C}$:

1. $latex \{x, e^x, e^{x + 1}\}$
2. $latex \{x, \log{(x)}, e^\frac{\log{(x)}}{2}\}$
3. $latex \{x, \log{(x)}, \log{(x + 1)}, \log{(2x^2 + 2x)}\}$

Can you see the algebraic relations?  If you have been reading this blog for long enough, you should be able to.  In the first set, we see that $latex e^{x + 1} - ee^x = 0$, in 2., which is an example that I have given probably about five times now in my blog, $latex {\left(e^\frac{\log{(x)}}{2}\right)}^2 - x = 0$ (i.e., $latex e^\frac{\log{(x)}}{2} = \sqrt{x}$), and in 3. $latex \log{(x)} + \log{(x + 1)} + \log{(2)} - \log{(2x^2 + 2x)} = 0$ (in each case, I have given the relation in terms of the minimal polynomial that equals 0, which is the definition of <a href="http://en.wikipedia.org/wiki/Algebraic_dependence">algebraic dependence</a>). 

Now, the good news is that there is a complete algorithm for not only determining when elements are algebraic over the already existing field, but also computing the minimal polynomial, which gives the relation needed to rewrite the dependent elements in terms of the others.  

Notice that in the above sets, if you remove the last element, the remaining terms are algebraically independent.  In other words, you can algebraically rewrite the last term in terms of the remaining.  We have $latex e^{x + 1} = ee^x$, $latex e^\frac{\log{(x)}}{2} = \sqrt{x}$, and $latex \log{(2x^2 + 2x)} = \log{(2)} + \log{(x)} + \log{(x + 1)}$.  

The above are three ways that the transcendental functions of the exponential and the logarithm can be written in a way that they are algebraically dependent]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>753</wp:post_id>
  <wp:post_date>2011-07-08 23:52:17</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Stuff for this week</title>
  <link>http://asmeurersympy.wordpress.com/?p=894</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=894</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>894</wp:post_id>
  <wp:post_date>2011-06-05 04:52:13</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>MathJax Test</title>
  <link>http://asmeurersympy.wordpress.com/?p=954</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=954</guid>
  <description/>
  <content:encoded><![CDATA[


<div class="math">
\[\zeta(s) = 1+\frac{1}{2^s}+\frac{1}{3^s}+\frac{1}{4^s}+\ldots\]</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>954</wp:post_id>
  <wp:post_date>2011-07-02 01:18:30</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Improved PuDB</title>
  <link>http://asmeurersympy.wordpress.com/2011/08/08/hacking-pudb-now-an-even-better-python-debugger/screen-shot-2011-08-07-at-8-28-11-pm/</link>
  <pubDate>Mon, 08 Aug 2011 02:31:33 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2011/08/screen-shot-2011-08-07-at-8-28-11-pm.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Click for full size image]]></excerpt:encoded>
  <wp:post_id>1021</wp:post_id>
  <wp:post_date>2011-08-08 02:31:33</wp:post_date>
  <wp:post_date_gmt>2011-08-08 02:31:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>screen-shot-2011-08-07-at-8-28-11-pm</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1020</wp:post_parent>
  <wp:menu_order>3</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2011/08/screen-shot-2011-08-07-at-8-28-11-pm.png</wp:attachment_url>
</item>
<item>
  <title>Screen Shot 2011-08-07 at 8.28.11 PM</title>
  <link>http://asmeurersympy.wordpress.com/2011/08/08/hacking-pudb-now-an-even-better-python-debugger/screen-shot-2011-08-07-at-8-28-11-pm-2/</link>
  <pubDate>Mon, 08 Aug 2011 02:44:05 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2011/08/screen-shot-2011-08-07-at-8-28-11-pm1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1022</wp:post_id>
  <wp:post_date>2011-08-08 02:44:05</wp:post_date>
  <wp:post_date_gmt>2011-08-08 02:44:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>screen-shot-2011-08-07-at-8-28-11-pm-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1020</wp:post_parent>
  <wp:menu_order>2</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2011/08/screen-shot-2011-08-07-at-8-28-11-pm1.png</wp:attachment_url>
</item>
<item>
  <title>PuDB Prefs Window</title>
  <link>http://asmeurersympy.wordpress.com/2011/08/08/hacking-pudb-now-an-even-better-python-debugger/screen-shot-2011-08-07-at-8-41-30-pm/</link>
  <pubDate>Mon, 08 Aug 2011 02:44:50 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2011/08/screen-shot-2011-08-07-at-8-41-30-pm.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Click to see full size image]]></excerpt:encoded>
  <wp:post_id>1023</wp:post_id>
  <wp:post_date>2011-08-08 02:44:50</wp:post_date>
  <wp:post_date_gmt>2011-08-08 02:44:50</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>screen-shot-2011-08-07-at-8-41-30-pm</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1020</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2011/08/screen-shot-2011-08-07-at-8-41-30-pm.png</wp:attachment_url>
</item>
<item>
  <title>Screen Shot 2012-08-20 at 10.50.21 PM</title>
  <link>http://asmeurersympy.wordpress.com/2012/08/21/sympy-live-sphinx-extension/screen-shot-2012-08-20-at-10-50-21-pm/</link>
  <pubDate>Tue, 21 Aug 2012 04:50:54 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2012/08/screen-shot-2012-08-20-at-10-50-21-pm.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1138</wp:post_id>
  <wp:post_date>2012-08-21 04:50:54</wp:post_date>
  <wp:post_date_gmt>2012-08-21 04:50:54</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>screen-shot-2012-08-20-at-10-50-21-pm</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1122</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2012/08/screen-shot-2012-08-20-at-10-50-21-pm.png</wp:attachment_url>
</item>
<item>
  <title>SymPy-Live-Sphinx</title>
  <link>http://asmeurersympy.wordpress.com/2012/08/21/sympy-live-sphinx-extension/sympy-live-sphinx/</link>
  <pubDate>Tue, 21 Aug 2012 05:15:18 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2012/08/sympy-live-sphinx.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Example of the SymPy Live Sphinx extension at http://docs.sympy.org/dev/tutorial.html#algebra.]]></excerpt:encoded>
  <wp:post_id>1149</wp:post_id>
  <wp:post_date>2012-08-21 05:15:18</wp:post_date>
  <wp:post_date_gmt>2012-08-21 05:15:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>sympy-live-sphinx</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1122</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2012/08/sympy-live-sphinx.png</wp:attachment_url>
</item>
<item>
  <title>Ondrej's Hat</title>
  <link>http://asmeurersympy.wordpress.com/2013/07/02/scipy-2013/2013-06-26-08-02-40-hdr/</link>
  <pubDate>Tue, 02 Jul 2013 01:40:34 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2013/07/2013-06-26-08-02-40-hdr.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1344</wp:post_id>
  <wp:post_date>2013-07-02 01:40:34</wp:post_date>
  <wp:post_date_gmt>2013-07-02 01:40:34</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>2013-06-26-08-02-40-hdr</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1287</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2013/07/2013-06-26-08-02-40-hdr.jpg</wp:attachment_url>
</item>
<item>
  <title>SymPy 0.7.3.rc1</title>
  <link>http://asmeurersympy.wordpress.com/2013/07/07/automating-the-sympy-release-process/screenshot-2013-07-06-22-05-31/</link>
  <pubDate>Sun, 07 Jul 2013 03:06:43 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2013/07/screenshot-2013-07-06-22-05-31.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1352</wp:post_id>
  <wp:post_date>2013-07-07 03:06:43</wp:post_date>
  <wp:post_date_gmt>2013-07-07 03:06:43</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>screenshot-2013-07-06-22-05-31</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1348</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2013/07/screenshot-2013-07-06-22-05-31.png</wp:attachment_url>
</item>
<item>
  <title>SymPy 0.7.3.rc1 Edit</title>
  <link>http://asmeurersympy.wordpress.com/2013/07/07/automating-the-sympy-release-process/screenshot-2013-07-06-22-08-19/</link>
  <pubDate>Sun, 07 Jul 2013 03:08:41 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.files.wordpress.com/2013/07/screenshot-2013-07-06-22-08-19.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1353</wp:post_id>
  <wp:post_date>2013-07-07 03:08:41</wp:post_date>
  <wp:post_date_gmt>2013-07-07 03:08:41</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>screenshot-2013-07-06-22-08-19</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1348</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://asmeurersympy.files.wordpress.com/2013/07/screenshot-2013-07-06-22-08-19.png</wp:attachment_url>
</item>
<item>
  <title>Just finished a new bit.</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/30/just-finished-a-new-bit/</link>
  <pubDate>Sat, 30 May 2009 05:59:21 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=60</guid>
  <description/>
  <content:encoded><![CDATA[I just finished first order homogeneous equations, as well as my logcombine function, and I have pushed them to <a href="http://github.com/asmeurer/sympy/tree/odes-stable">http://github.com/asmeurer/sympy/tree/odes-stable</a>.  So expect a major blog posting about them both soon (it is midnight right now, so bedtime, maybe tomorrow).

If you are a member of the SymPy project reading this, <em>please</em>, review my patches.  I have already submitted exact equations and the logcombine function, and neither of them have made it in.  And the more reviewing that there is, the better for my code.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>60</wp:post_id>
  <wp:post_date>2009-05-30 05:59:21</wp:post_date>
  <wp:post_date_gmt>2009-05-30 05:59:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>just-finished-a-new-bit</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>First Order Differential Equations with Homogeneous Coefficients</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/</link>
  <pubDate>Sun, 31 May 2009 00:10:45 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=63</guid>
  <description/>
  <content:encoded><![CDATA[So here is what I have done. &nbsp;Homogeneous has <a href="http://en.wikipedia.org/wiki/Homogeneous_(mathematics)">several meanings</a>, but when I use it in this post, I will mean <a href="http://en.wikipedia.org/wiki/Homogeneous_function">homogeneous functions</a>. &nbsp;We only care about functions of two variables, so I will also only talk about them. &nbsp;A function $latex F(x,y) $&nbsp;is called homogeneous of order $latex n$ if $latex F(tx,ty)=t^nF(x,y)$&nbsp;for some $latex n$. &nbsp;Also, if we "pull" an $latex x$&nbsp;out, we get $latex F(x,y)=x^nF(1,\frac{x}{y})=x^nG(\frac{y}{x})$, which is why the definition is often stated that the function can be written as a function of $latex \frac{y}{x} $. &nbsp;Of course, we could do the same with $latex y$&nbsp;and get a function of $latex \frac{x}{y}$. &nbsp;Here is an example of a homogeneous&nbsp;function: $latex x^2+y\sqrt{x^2+y^2}\sin{\frac{x}{y}}$. &nbsp;You can see that $latex (xt)^2+yt\sqrt{(xt)^2+(yt)^2}\sin{\frac{xt}{yt}}=t^2\left(x^2+y\sqrt{x^2+y^2}\sin{\frac{x}{y}}\right)$. 

Now, if the coefficients $latex P$&nbsp;and $latex Q$&nbsp;in the&nbsp;first order differential equation $latex P(x,y)dx+Q(x,y)dy=0$&nbsp;are both homogeneous functions of the same order, then the substitution $latex x=uy$&nbsp;or $latex y=ux$&nbsp;will make the equation&nbsp;separable. &nbsp;I will show how to do it for $latex y=ux$. &nbsp;We have $latex dy=xdy+udx$&nbsp;by the product rule. &nbsp;We also have $latex P(x,y)=P(x,xu)$ and $latex Q(x,y)=Q(x,xu)$. &nbsp;Because these functions are homogeneous, we can "pull out" an $latex x^n$&nbsp;from each, giving us $latex x^nP(1,u)dx+x^nQ(1,u)(xdu+udx)=0$. &nbsp;Because we made the substitution $latex u=\frac{y}{x}$, we already have had to assume $latex x\neq0$. &nbsp;Thus, we can divide the whole thing by $latex x^n$. &nbsp;Doing this, and expanding the remaining terms, we get $latex P(1,u)dx+xQ(1,u)du+uQ(1,u)dx=0$. &nbsp;Refactoring the $latex dx$ and $latex dy$ terms, we get $latex (P(1,u)+uQ(1,u))dx=-xQ(1,u)du$. &nbsp;The equation is&nbsp;separable! &nbsp;Separating&nbsp;variables and integrating, we get&nbsp;$latex \int{\frac{dx}{x}}=\int{\frac{-Q(1,u)du}{P(1,u)+uQ(1,u)}}+C$. &nbsp;If we had used $latex x=uy$ instead, we would have gotten $latex \int{\frac{dy}{y}}=\int{\frac{-P(u,1)du}{uP(u,1)+Q(u,1)}}+C$. &nbsp;This is exactly how I was able to solve these equations in SymPy. &nbsp;Each homogeneous equation has two possible integrals, and often the right hand side of one equation is a much harder integral than the right hand side of the other. &nbsp;Therefore, I did them both, and applied a little&nbsp;heuristic&nbsp;on which one to return. &nbsp;It prefers expressions that can be solved for y (f(x) in the case of SymPy),&nbsp;expressions&nbsp;that have evaluated integrals, and if neither of them are solvable, the shortest one, which tends to be the simplest. 

Here is an example from my text book. &nbsp;$latex 2xydx+(x^2+y^2)dy=0$. &nbsp;Astute readers of this blog may have noticed that this equation is <a href="http://asmeurersympy.wordpress.com/2009/05/16/work-started-exact-differential-equations/">exact</a>. &nbsp;It is easier to solve that way, but we will try using the methods outlined above. &nbsp;First, we notice that the coeficients of $latex dx$ and $latex dy$ are both homogeneous of order 2, so we can make the substitution $latex x=uy$ or $latex u=yx$ and the equation would become seperable. &nbsp;If I were doing this by hand or for a homework assignment, I would make one of those substitutions and work it through, but we have the exact form above, so let's use it just like SymPy would. &nbsp;$latex P(x,y)=2xy $ and $latex Q(x,y)=x^2+y^2$. &nbsp;So we get $latex \int{\frac{dx}{x}}=\int{\frac{-(1+u^2)du}{2u+u(1+u^2)}}+C$ with $latex u=\frac{y}{x}$ and $latex \int{\frac{dy}{y}}=\int{\frac{-2udu}{u(2u)+(1+u^2)}}+C$ with $latex u=\frac{x}{y}$ (here and for the remainder of this derivation, the arbitrary constants in the two equations do not necessarily equal each other until the last step). &nbsp;Both integrals can be solved &nbsp;with a&nbsp;substitution&nbsp;of the denominator, giving, with $latex u$ back substituted, $latex \ln{x}=\frac{-\ln{(\frac{y^3}{x^3}+\frac{3y}{x})}}{3}+C$ and $latex \ln{y}=\frac{-\ln{(\frac{3x^3}{y^3}+1)}}{3}+C$. &nbsp;If we make $latex C=ln(C_1)$, and pull the constants in front of the logs on the right hand sides in as powers, we can combine everything into logarithms. &nbsp;After doing that, we then take the antilog of both sides and get $latex x=C_1{(\frac{y^3}{x^3}+\frac{3y}{x})}^{-\frac{1}{3}}$ and $latex y=C_1{(\frac{3x^3}{y^3}+1)}^{-\frac{1}{3}}$. &nbsp;We then raise the whole equation to the $latex -3$ power and make $latex C_1^{-3}=A$. &nbsp;We get
$latex \frac{1}{x^3}=A(\frac{y^3}{x^3}+3\frac{y}{x})$
$latex \frac{1}{x^3}=A\frac{y^3+3x^2y}{x^3}$
$latex K=y^3+3x^2y$ 
and 
$latex \frac{1}{y^3}=A(\frac{3x^2}{y^2}+1)$
$latex \frac{1}{y}=A(3x^2y+y^2)$
$latex K=y^3+3x^2y$,
where $latex K=\frac{1}{A}$

Verify as an exercise that you get the same solution by the exact differential equation methods (or <a href="http://comics.com/brevity/2006-02-16/">don't... you know, depending on which you'd rather do</a>).

Of course, if that was all there was to it, I would have finished in a day. &nbsp;There was more. &nbsp;First, I had to write a function that determines if an expression is homogeneous and what order if it is.  That was about 150 lines of code right there plus tests (150 lines is a lot in Python).   

I also wanted it to recognize that $latex \ln{x}-\ln{y}$ is homogeneous because $latex \ln{x}-\ln{y}=\ln{\frac{x}{y}}$.  SymPy was incapable of combining logarithms like this, so I had to write a logcombine function, which was another 100 lines of code plus tests.  This came in handy, because I was also able to use it in the part above where I combined the logarithms of my answer to eliminate all of them.  

Lastly, you may have noticed that my math looks much nicer in this post.  It turns out that WordPress supports math using $<!--more-->latex <!--more-->&lt;<!--more-->math<!--more-->&gt;$.  Unfortunately, I did not discover this until I had already uploaded images of almost all the math expressions in the post, so I had to go back and fix them.  

Also, I was having a problem where the math wouldn't render, but it turns out that this was an issue with me copying and pasting "$latex" and the expressions into the WordPress rich text editor.  I changed my editor settings to plain text.  I'm sorry, but web rich text editors do not work.  And I've grown accustomed to seeing the source of stuff that I write having done everything in $latex \LaTeX$ for a year and having edited Wikipedia for a while. 

I wish there were a free blogging site like WordPress or Blogger that used MediaWiki or $latex \LaTeX$ as its rendering engine.  It would look nice, the formatting would be a standard thing that isn't confusing html, and $latex \LaTeX$ math would come out much nicer.  ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>63</wp:post_id>
  <wp:post_date>2009-05-31 00:10:45</wp:post_date>
  <wp:post_date_gmt>2009-05-31 00:10:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>first-order-differential-equations-with-homogeneous-coefficients</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:comment>
    <wp:comment_id>34</wp:comment_id>
    <wp:comment_author><![CDATA[Meeting Ondrej in Los Alamos &laquo; GSoC 2009: SymPy ODEs]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2009/07/13/meeting-ondrej-in-los-alamos/</wp:comment_author_url>
    <wp:comment_author_IP>74.200.245.227</wp:comment_author_IP>
    <wp:comment_date>2009-07-13 02:22:36</wp:comment_date>
    <wp:comment_date_gmt>2009-07-13 02:22:36</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] a working Constant class, I can solve homogeneous differential equations (not to be confused with first order differential equations with homogeneous coefficients) with one case (there are several cases depending on whether the roots of the so called [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>64</wp:comment_id>
    <wp:comment_author><![CDATA[Testing implicit solutions to ODEs &laquo; GSoC 2009: SymPy ODEs]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2009/08/12/testing-implicit-solutions-to-odes/</wp:comment_author_url>
    <wp:comment_author_IP>72.233.96.139</wp:comment_author_IP>
    <wp:comment_date>2009-08-12 21:27:25</wp:comment_date>
    <wp:comment_date_gmt>2009-08-12 21:27:25</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] really simple ones. I ended up XFAILing most of my implicit checksol tests. I think every single homogeneous coefficients had an implicit solution, and none of them were working with [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>249</wp:comment_id>
    <wp:comment_author><![CDATA[2010 in review &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2011/01/02/2010-in-review/</wp:comment_author_url>
    <wp:comment_author_IP>72.233.69.84</wp:comment_author_IP>
    <wp:comment_date>2011-01-02 23:07:22</wp:comment_date>
    <wp:comment_date_gmt>2011-01-02 23:07:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] First Order Differential Equations with Homogeneous Coefficients May 20092 comments [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1294009642</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1294009642.7291";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>683</wp:comment_id>
    <wp:comment_author><![CDATA[Emory]]></wp:comment_author>
    <wp:comment_author_email>emorytafoya@gmx.de</wp:comment_author_email>
    <wp:comment_author_url>http://www.oldtimertraktoren.net/</wp:comment_author_url>
    <wp:comment_author_IP>50.115.173.170</wp:comment_author_IP>
    <wp:comment_date>2012-10-01 03:16:22</wp:comment_date>
    <wp:comment_date_gmt>2012-10-01 03:16:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Wow that was odd. I just wrote an extremely long comment 
but after I clicked submit my comment didn't show up. Grrrr... well I'm not writing all that 
over again. Anyway, just wanted to say excellent blog!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1349061382</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1349061383.1779301166534423828125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Separable next</title>
  <link>http://asmeurersympy.wordpress.com/2009/05/31/separable-next/</link>
  <pubDate>Sun, 31 May 2009 18:48:35 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=159</guid>
  <description/>
  <content:encoded><![CDATA[So the next thing on my <a href="http://wiki.sympy.org/wiki/User:Asmeurer/GSoC2009_Application#Description_.28by_timeline.29">list</a> is seperable differential equations.  As I predicted in my proposal, I am going to have to do some work to get SymPy to recognize all equations that are separable.  Currently, it can match expressions that are exactly written as $latex a(x)b(y)\frac{dy}{dx}+c(x)d(y)=0$, such as $latex x^2(y+2)\frac{dy}{dx}-y^3=0$ but the matching engine cannot get things like $latex (x^2y+2x^2)\frac{dy}{dx}+-y^3=0$, because it doesn't know how to factor out the $latex x^2$.  There is a function, collect, that can factor out expressions if you give them to it explicily with

<code>collect(x**2*y+x**2,x**2)</code>

but it doesn't know yet how to separate variables in general.  So I will be working on it this week.  Once it can properly separate separable expressions, implementing it in dsolve will be cake.  

Also, it needs to learn how to do $latex e^{x+y}\rightarrow e^{x}e^{y}$ and $latex 1+x+y+xy \rightarrow (1+x)(1+y)$.  ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>159</wp:post_id>
  <wp:post_date>2009-05-31 18:48:35</wp:post_date>
  <wp:post_date_gmt>2009-05-31 18:48:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>separable-next</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:comment>
    <wp:comment_id>9</wp:comment_id>
    <wp:comment_author><![CDATA[vks]]></wp:comment_author>
    <wp:comment_author_email>spam@ur.self</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>91.39.82.84</wp:comment_author_IP>
    <wp:comment_date>2009-06-01 15:20:47</wp:comment_date>
    <wp:comment_date_gmt>2009-06-01 15:20:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Did you try cse() + factor()?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>68.42.37.143</wp:comment_author_IP>
    <wp:comment_date>2009-06-01 16:23:31</wp:comment_date>
    <wp:comment_date_gmt>2009-06-01 16:23:31</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I know that factor can reduce the polynomial.  I was just saying that I need to use it.  

<del datetime="2009-06-01T18:39:45+00:00">cse() doesn't seem to do anything.  Any expression I put in cse(expr) just returns [[],[expr,]].</del>

I figured out what cse does from the examples, but I don't see how that will help me separate expressions.  It looks like it turns things like <code>(x+y)**2+sqrt(x+y)</code> into <code>([(x0, x + y)], [x0**(1/2) + x0**2])</code>.  It doesn't even seem to work for <code>exp(x+y)</code>, although <code>([(x0, x + y)], [exp(x0)])</code> is not what I want.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12</wp:comment_id>
    <wp:comment_author><![CDATA[vks]]></wp:comment_author>
    <wp:comment_author_email>no@way.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>91.39.77.103</wp:comment_author_IP>
    <wp:comment_date>2009-06-06 11:02:19</wp:comment_date>
    <wp:comment_date_gmt>2009-06-06 11:02:19</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[&gt;&gt;&gt; e = sin(x)
&gt;&gt;&gt; factor(e**2 + e)
Traceback (most recent call last):
  File "", line 1, in 
  File "sympy/polys/factortools.py", line 80, in factor
    coeff, factors = poly_factors(f, *symbols, **flags)
  File "sympy/polys/factortools.py", line 20, in poly_factors
    f = Poly(f, *symbols)
  File "sympy/polys/polynomial.py", line 402, in __new__
    terms = Poly._decompose(poly, *symbols)
  File "sympy/polys/polynomial.py", line 545, in _decompose
    raise PolynomialError("Can't decompose %s" % factor)
sympy.polys.polynomial.PolynomialError: Can't decompose sin(x)**2
&gt;&gt;&gt; cse(e**2 + e)
([(x0, sin(x))], [x0 + x0**2])

Then you can substitute back:

&gt;&gt;&gt; w, g = cse(e**2 + e)
&gt;&gt;&gt; g = factor(g[0])
&gt;&gt;&gt; g
x0*(1 + x0)
&gt;&gt;&gt; g.subs(w[0][0], w[0][1]) # you'd have to iterate
(1 + sin(x))*sin(x)

&gt; It doesn’t even seem to work for exp(x+y)

It should only replace x+y if it occurs multiple times:

&gt;&gt;&gt; cse(exp(x+y))
([], [exp(x + y)]) # correct
&gt;&gt;&gt; cse(exp(x+y)+x+y)
([], [x + y + exp(x + y)]) # wrong
&gt;&gt;&gt; cse(exp(x+y)+x+y+sin(x+y))
([(x0, x + y)], [x0 + sin(x0) + exp(x0)]) # correct

I filed a bug report for the second case.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>10</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>13</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>68.42.37.143</wp:comment_author_IP>
    <wp:comment_date>2009-06-06 16:52:14</wp:comment_date>
    <wp:comment_date_gmt>2009-06-06 16:52:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[OK.  I see what you mean now.  cse() turns it into a polynomial which can then be handled by factor().  It seems to choke if it has too many transcendentals:
&gt;&gt;&gt; e = expand(x*sin(x)*(y**2+sin(y)))
&gt;&gt;&gt; e
x*y**2*sin(x) + x*sin(x)*sin(y)
&gt;&gt;&gt; cse(e)
([(x0, sin(x))], [x*x0*sin(y) + x*x0*y**2])
&gt;&gt;&gt; factor(cse(e)[1][0])
Traceback (most recent call last):
  File "", line 1, in 
  File "./sympy/polys/factortools.py", line 80, in factor
    coeff, factors = poly_factors(f, *symbols, **flags)
  File "./sympy/polys/factortools.py", line 20, in poly_factors
    f = Poly(f, *symbols)
  File "./sympy/polys/polynomial.py", line 402, in __new__
    terms = Poly._decompose(poly, *symbols)
  File "./sympy/polys/polynomial.py", line 545, in _decompose
    raise PolynomialError("Can't decompose %s" % factor)
PolynomialError: Can't decompose sin(y)

Compared to the simple separatevars function I wrote up:
&gt;&gt;&gt; separatevars(e)
x*(sin(y) + y**2)*sin(x)

As for expanding exponentials, I will write a function that does that (it should be simple).  Right now, I am working on fixing issue 252 so that they aren't put right back together after I take them apart.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>git stash</title>
  <link>http://asmeurersympy.wordpress.com/2009/06/05/git-stash/</link>
  <pubDate>Fri, 05 Jun 2009 03:56:29 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=165</guid>
  <description/>
  <content:encoded><![CDATA[I've always wondered what the command is that lets you do stuff like change branches and checkout to older states without commiting, since git won't let you do anything if you haven't commited.  

Well, I found the answer.  It's <code><a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html">git stash</a></code>.  I think I will be using this a lot, considering how often my workflow gets interrupted.  I wish I knew about it before I started working on this exponentiation mess (more on that later).  

It is also nicer to test if my code breaks an old feature to stash instead of testing in sympy 0.6.4 installed on my system.  

UPDATE: No wonder I didn't find this earlier.  <code>stash</code> isn't listed in <code>git --help</code>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>165</wp:post_id>
  <wp:post_date>2009-06-05 03:56:29</wp:post_date>
  <wp:post_date_gmt>2009-06-05 03:56:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>git-stash</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:comment>
    <wp:comment_id>11</wp:comment_id>
    <wp:comment_author><![CDATA[ulrik]]></wp:comment_author>
    <wp:comment_author_email>ulrik.sverdrup@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>130.235.231.110</wp:comment_author_IP>
    <wp:comment_date>2009-06-05 11:44:58</wp:comment_date>
    <wp:comment_date_gmt>2009-06-05 11:44:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[If you have big WIPs, another (common) git practice is to commit often, commit small commits. Then at merge time or more often, you use 'rebase -i' to reorder and squash together commits into commits/patches ready for submitting.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>14</wp:comment_id>
    <wp:comment_author><![CDATA[Andy Terrel]]></wp:comment_author>
    <wp:comment_author_email>andy.terrel@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>76.184.141.235</wp:comment_author_IP>
    <wp:comment_date>2009-06-08 17:10:27</wp:comment_date>
    <wp:comment_date_gmt>2009-06-08 17:10:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[also check out stgit.

http://procode.org/stgit/]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>Vacation</title>
  <link>http://asmeurersympy.wordpress.com/2009/06/13/vacation/</link>
  <pubDate>Sat, 13 Jun 2009 00:45:44 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=170</guid>
  <description/>
  <content:encoded><![CDATA[I am on vacation now.  I am visiting the Grand Canyon, Hoover Dam, Yellowstone, and other places.  I will be able to do some coding on the road, but not as much as when I am home.  The vacation will last about a week.  Hopefully I will be able to get a blog post about what I have been doing in SymPy written up in the next few days. ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>170</wp:post_id>
  <wp:post_date>2009-06-13 00:45:44</wp:post_date>
  <wp:post_date_gmt>2009-06-13 00:45:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>vacation</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Refactoring Expand</title>
  <link>http://asmeurersympy.wordpress.com/2009/06/21/refactoring-expand/</link>
  <pubDate>Sun, 21 Jun 2009 04:48:54 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=172</guid>
  <description/>
  <content:encoded><![CDATA[So I have spent the past week refactoring expand so that you can have more control over what expansion methods you use.  With the present method, expand takes in hints which defaults to basic.  basic distributed multiplication over addition ($latex x(y+z) \rightarrow xy+xz$), expanded multinomial expressions ($latex (x+y)^2 \rightarrow x^2+2xy+y^2$), expanded logarithms ($latex \log{x^2} \rightarrow 2\log{x}$ and $latex \log{xy} \rightarrow \log{x}+\log{y}$), and expanded powers ($latex (xy)^n \rightarrow x^ny^n$ and $latex e^{x+y} \rightarrow e^{x}e^{y}$).  

If you wanted to do any of these things, you had to use expand_basic, which did all of them.  Also, you had no control on how deep the expansion went.  It went all they way down in recursion, so if you only wanted, for example, to distribute multiplication  on the top level, it was impossible.  

So I decided to start and fix <a href="http://code.google.com/p/sympy/issues/detail?id=1455">issue 1455</a>.  I now have a branch ready in my github account (see <a href="http://github.com/asmeurer/sympy/tree/expand">here</a>).  

With my patch, you can now choose to expand using each of the above individually with the log, mul, multinomial, power_exp, power_base.  In addition to this, you also now have complete control of how deep the expression recurses in the expand.  Previously, you couldn't, for example, expand $latex x(y+e^{x(y+z)})$ to $latex xy+xe^{x(y+z)}$. (It would also distribute the exponent, then expand to $latex e^{xy}e^{xz}$).  Now, you can choose to only distribute multiplication over addition, and to only do it on the top level.  

<strong>Automatic expansion of exponents</strong>
I mentioned above that expand would expand $latex e^{xy+xz}$ to $latex e^{xy}e^{xz}$. Actually, in the current version of SymPy, this would not happen because it automatically combines exponents like $latex e^{xy}e^{xz}$ to $latex e^{xy+xz}$.  

I have been working for the past few weeks changing this as per <a href="http://code.google.com/p/sympy/issues/detail?id=252&amp;q=asmeurer">issue 252</a>.   I have been mostly successful, except there are two nseries tests that I cannot figure out how to fix.  If you think you know why nseries would fail without automatic combining of exponents, please let me know.  The expand branch in my GitHub repo also has the exponent patches in it, if you want to see what I mean.  

Because some things, like the gruntz algorithm, rely on automatic combining of exponents, so I had to rework powsimp, which combined exponents but also combined bases ($latex x^ay^a$ to $latex (xy)^a$) so that it could only combine exponents.  That way, I could use it to get the old behavior where I needed it.  Use <code>powsimp(expr, deep=True, combine='exp')</code> in my branch to get the old automatic behavior.  


<strong>So what does this have to do with ODEs?</strong>
When I started working on separable equations, I wanted to be able to separate things like $latex e^{x+y}$ into $latex e^xe^y$, which is separable in $latex x$ and $latex y$.  So that is why I needed to refactor expand (I don't, for example, want to change $latex x(y+1)$ to $latex xy+x$ because the later is not easily recognizable as separate.  Doing this or course required that SymPy didn't automatically put back together $latex e^xe^y$ into $latex e^{x+y}$, so I had to fix that issue as well.  

I am almost finished implementing separable (there are some match issues that I will blog about later whenever I get them straightened out), and the only thing that is holding all of this back is those nseries tests.  If anyone is familiar with how those algorithms work and which parts require automatic combining of exponents, that would be great.  ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>172</wp:post_id>
  <wp:post_date>2009-06-21 04:48:54</wp:post_date>
  <wp:post_date_gmt>2009-06-21 04:48:54</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>refactoring-expand</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>How to permanently lose data with git (and then retrieve it again)</title>
  <link>http://asmeurersympy.wordpress.com/2009/06/22/how-to-permanently-lose-data-with-git-and-then-retrieve-it-again/</link>
  <pubDate>Mon, 22 Jun 2009 05:16:23 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=181</guid>
  <description/>
  <content:encoded><![CDATA[So I pushed some changes to github so Ondrej could help me debug the nseries tests, when I noticed that the changes that I pushed had some bad comments.  So I decided to rebase.  But git rebase -i told me that there was already a rebase in progress.  I figured that I must have done it a long time ago and forgot to abort, so I ran git rebase --abort.  

DON'T DO THAT.

I noticed my editor was telling me that an open file had changed.  Then, I noticed that ALL of my uncommited changes were gone!  And, being uncommited changes, git did not have them saved anywhere!

So now I started to panic.  I had done a lot of work on dsolve that I hadn't commited yet. Normally, I have hourly backups run by <a href="http://www.apple.com/macosx/features/timemachine.html">Time Machine</a>, but I am on vacation and my backup drive is at home.  So I started to see if I could retrieve it somewhere.  grep quickly told me that it wasn't in the hidden git directory, but it was still in my .pyc files.  But a Google search told me that retrieving from that is not so easy, if not impossible with Python 2.6.  So then, I decided to see if there was any lingering stuff in my virtual memory from my editor.  So I ran grep on my harddrive and waited.  

While I was waiting, though, I noticed when I scrolled up in my command history that my lost changes were in my Terminal.  It turns out that I had just run git commit --interactive and had used * on my patches, so it gave me everything!  

So I copied my Terminal history and will work on putting everything back tomorrow.  It should be easy, assuming that git apply works for the format that git gives in commit --interactive.  

So the lessons are: Don't abort a rebase without commiting.  Don't start a rebase and then leave it there.  Look in your Terminal history if you loose stuff.  And it might be a good idea to make manual backups if you are away from your backup drive for a while.

This also highlights why it is important to try to recover data immediately after realizing that it is gone.  If I had closed my Terminal session or filled it past the maximum number of lines, my data would be gone.  Even if it were in my virtual memory, that wouldn't last forever either.  ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>181</wp:post_id>
  <wp:post_date>2009-06-22 05:16:23</wp:post_date>
  <wp:post_date_gmt>2009-06-22 05:16:23</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>how-to-permanently-lose-data-with-git-and-then-retrieve-it-again</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:comment>
    <wp:comment_id>21</wp:comment_id>
    <wp:comment_author><![CDATA[Ondrej Certik]]></wp:comment_author>
    <wp:comment_author_email>ondrej@certik.cz</wp:comment_author_email>
    <wp:comment_author_url>http://ondrej.certik.cz</wp:comment_author_url>
    <wp:comment_author_IP>97.123.28.108</wp:comment_author_IP>
    <wp:comment_date>2009-06-22 16:08:24</wp:comment_date>
    <wp:comment_date_gmt>2009-06-22 16:08:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[It's because you don't color your prompt with the name of the branch (and the prompt also changes to something like "master|REBASE" if you rebase). See here how it looks like:

http://code.google.com/p/sympy/wiki/GitTutorials

so I very, very strongly suggest you use that.

http://blog.ericgoodwin.com/2008/4/10/auto-completion-with-git

e.g. here is my PS1 prompt:

    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\[33[31m\]$(__git_ps1 "(%s)")\[33[00m\]\$ '


if you use Mac, source the "contrib/completion/git-completion.bash" file (in the git repository for git), which contains the definition of the __git_ps1 and some documentation too (read it if you have troubles getting it work). 

Once you have the colored prompt, I am pretty sure it will never happen again.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>20</wp:comment_id>
    <wp:comment_author><![CDATA[ulrik]]></wp:comment_author>
    <wp:comment_author_email>ulrik.sverdrup@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://kaizer.se/</wp:comment_author_url>
    <wp:comment_author_IP>89.236.28.174</wp:comment_author_IP>
    <wp:comment_date>2009-06-22 09:57:18</wp:comment_date>
    <wp:comment_date_gmt>2009-06-22 09:57:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I'd say this is a very disturbing quirk in git; it's happened to many, me included, but mostly I commit so often that I don't lose anything. Still, that --abort calls reset --hard is very disturbing.

The gitters just say.. commit often, commit everything, and use rebase -i to squash it back together really nice. But I hope this quirk is being resolved in future versions.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>22</wp:comment_id>
    <wp:comment_author><![CDATA[vks]]></wp:comment_author>
    <wp:comment_author_email>b@d.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>91.39.98.223</wp:comment_author_IP>
    <wp:comment_date>2009-06-22 23:34:51</wp:comment_date>
    <wp:comment_date_gmt>2009-06-22 23:34:51</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I think git should backup aborted local changes for 30 days, like it does with commits.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>23</wp:comment_id>
    <wp:comment_author><![CDATA[andy]]></wp:comment_author>
    <wp:comment_author_email>aterrel@uchicago.edu</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>128.135.11.175</wp:comment_author_IP>
    <wp:comment_date>2009-06-24 16:33:37</wp:comment_date>
    <wp:comment_date_gmt>2009-06-24 16:33:37</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Glad to see you got the lost data.  A very important lesson, no matter what scm you use keeping things clean is very important.  Usually I will just reclone somewhere else if I need to put in some quick changes.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>Update</title>
  <link>http://asmeurersympy.wordpress.com/2009/07/06/update/</link>
  <pubDate>Mon, 06 Jul 2009 18:12:26 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=186</guid>
  <description/>
  <content:encoded><![CDATA[It's been a while since I've posted here, so I figured an update was in order.  Here is a list of stuff that I have done since my last post.

- I recovered my data from my Terminal history.  This wasn't too difficult as I predicted.  I just had to do some minor formatting on the <code>git commit --interactive</code> data to make it a valid git patch file.  For whatever reason, a handful of the changes wouldn't apply because git couldn't find where changed lines were, even though they were identical to what was in the patch.  <code>git apply</code> doesn't seem to have a merge option, but eventually I found the <code>--reject</code> option, which puts failed patches in .rej files, instead of just failing the whole apply.

- I got separable equations implemented in dsolve.  I actually did this on the road before I lost my data, but I failed to mention it before, so here it is.  The hardest part with that was creating a decent <code>separatevars()</code> function that could separate just about any funciton. As I mentioned in an <a href="http://asmeurersympy.wordpress.com/2009/06/21/refactoring-expand/">earlier post</a>, this involved changing the way that SymPy handles automatic combining of exponents in the core, as well as refactoring expand. I also had to make the function completely independent of <code>match</code>, because <code>match</code> is too buggy to work correctly for separable equations.  

- Speaking of refactoring <code>expand</code> and combining exponents, that work made it in!  It is the first major thing that I have done that has actually made it into the main SymPy repo.  It got in just before the release of SymPy 0.6.5-beta2, so it should be in the final release of SymPy 0.6.5.  Most likely, none of my ODE stuff will make it in until 0.7.  

- I started to work on <a href="http://en.wikipedia.org/wiki/Variation_of_parameters">Variation of Parameters</a>, but before I could actually get to the variation of parameters part, I needed to be able to solve a homogeneous equation $latex a_ny^{(n)}+a_{n-1}y^{(n-1)}+\dots+a_1y'+a_0y=0$ ($latex a_i$ constant for all $latex i$).  If you know how that works, it involves finding the roots of the polynomial given by $latex a_nr^n+a_{n-1}r^{n-1}+\dots+a_1r+a_0=0$.  Depending on whether these roots are real, imaginary, or complex, you have different solutions with exponentials or sin's and cos's.  I had no trouble getting the exponentials and the sin's and cos's to work correctly (SymPy already has a root finder that I put to work), but I did have a problem getting the arbitrary constants to work correcty.  It turns out that the code for that would be much simpler if I had an arbitrary constant type that automatically "absorbed" other constants.  Since I had planned on doing that anyway, I decided to put the rest of variation of parameters on hold and begin work on that.

- We had a Documentation day on June 30, and I decided to write up a document that would help people new to SymPy and Python with some of the gotchas and pitfalls.  For example, unlike most other independent CAS's like Maple, you can't just type <code>1/2</code> in SymPy to get $latex \frac{1}{2}$.  That is because Python evaluates it numerically.  You have to do <code>S(1)/2</code> or <code>Rational(1,2)</code> to get the Rational class.  It's all things like that.  It's taken me a while to get it together, not because it took me long to write it, but because it has to be in the Sphinx documentation format, which I have had to learn.  I am just finishing it up now.

- I met with Ondrej on Saturday.  He went down from Los Alamos to Carlsbad with a friend to see the caverns, and they stopped here in Albuquerque on the way back up.  He came just in time to see the fireworks, and after that got some dinner.  We weren't able to do any coding, but hopefully we will be able to meet up again later this summer to do some of that.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>186</wp:post_id>
  <wp:post_date>2009-07-06 18:12:26</wp:post_date>
  <wp:post_date_gmt>2009-07-06 18:12:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>update</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Meeting Ondrej in Los Alamos</title>
  <link>http://asmeurersympy.wordpress.com/2009/07/13/meeting-ondrej-in-los-alamos/</link>
  <pubDate>Mon, 13 Jul 2009 02:22:14 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=190</guid>
  <description/>
  <content:encoded><![CDATA[So Ondrej was kind enough to have me over to his house in Los Alamos for Friday and Saturday.  We spent a lot of time coding together.  While we worked on some other things too, we mainly worked on my constant class.  Ondrej and I came up with an idea for restructured Mul and Add classes that would allow different objects in them to handle the other objects in them.  The way it is now, if I want my Constant object to absorb other objects, like <code>2*a*C*x =&gt; C*x</code>, I have to hardcode it into Mul.  The same is true with Add.  This makes the Mul and Add classes muddy.  Right now, there is already special handling for other such dynamic objects such as Order classes (e.g., <code>O(x)</code>), and Infinity class.  See the <code>Add.flatten()</code> and <code>Mul.flatten()</code> methods in sympy/core/add.py and sympy.core/mul.py to see what I mean.  

We came up with a system where symbols and numbers are handled the same way, because we need them to be fast, but if an expression has an object that has a <code>handle_mul()</code> method, it will call that method with the other objects in the expression in the Mul/Add and the object will take care of the special handling.  Ondrej was able to get most of it working in his experimental core that doesn't use assumptions <a href="//github.com/certik/sympyx.git">here</a>.  We will hopefully end up using it, but we need to wait until we merge the new assumptions system. 

So in the mean while, I have a working Constant class that modifies Mul and Add <a href="http://github.com/asmeurer/sympy/tree/constant-Mul">here</a>.  Since it will take a while until the new assumptions system is done (<a href="http://fseoane.net/blog/">Fabian Seoane</a> is doing it for his Google Summer of Code project), we may end up temporarily adding in my Constant branch.  Once I have a working Constant class, I can solve <a href="http://en.wikipedia.org/wiki/Linear_differential_equation#Homogeneous_linear_differential_equation_with_constant_coefficients">homogeneous differential equations</a> (not to be confused with <a href="http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/">first order differential equations with homogeneous coefficients</a>)  with one case (there are several cases depending on whether the roots of the so called characteristic equation are real, imaginary, or complex, but we can actually handle them in one case if we have constants that combine into each other.  More on this in a later post).  Once I have that (which I have everything already except for the arbitrary constants), I can then implement <a href="http://en.wikipedia.org/wiki/Variation_of_parameters">variation of parameters</a>, which, along with separable, will probably be the most used solver of the ones that I will implement this summer.  

Once I get those, I can clean up a lot of the 2nd order differential equation code in dsolve (currently it is just a hack with a bunch of special cases all covered by variation of parameters).  With that code cleaned up, I can refactor dsolve to use my proposed hints engine, which will allow the user to choose which methods they want to use to solve an equation (more on that in a later post too).  ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>190</wp:post_id>
  <wp:post_date>2009-07-13 02:22:14</wp:post_date>
  <wp:post_date_gmt>2009-07-13 02:22:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>meeting-ondrej-in-los-alamos</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Constant stuff</title>
  <link>http://asmeurersympy.wordpress.com/2009/07/16/constant-stuff/</link>
  <pubDate>Thu, 16 Jul 2009 05:06:17 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=194</guid>
  <description/>
  <content:encoded><![CDATA[So I was able to get a working version of the Constant class, but because the code cluttered up the internal Add and Mul classes too much, Ondrej convinced me that to make a function that does the simplification instead, and I reluctantly agreed.  After begining work on it, I realized that it will be much easier to make it just an internal function that handles the special cases presented by <code>dsolve()</code>.  That means that it will only handle arbitrary constants that are independent of one variable, and it will only work with constants that are named as "C1", "C2", and so on.  

If we ever get the sympyx core that Ondrej and I worked on when I was in Los Alamos in, it will be easy for my to use a Constant class, because it will have handler logic that will allow for the Constant class to exist independent of Add and Mul. It already can exist independent of Pow with a minor code addition, but simplifying powers is easier than simplifying addition and multiplcation because exponentiation is neither commutative nor associative, meaning that you don't have to worry about absorbing stuff on the other side of something, like <code>2 + x + C</code>.  

See my <a href="http://github.com/asmeurer/sympy/tree/constant-Mul">constant-Mu</a>l branch for my working version of a Constant class the implements in Mul and Add.  See my <a href="http://github.com/asmeurer/sympy/tree/constant-function">constant-function</a> branch for my work on the internal function.

Because I have decided to make thing simple and make the function internal only, I should have things up and running soon.  Then, it will be simple to fix up my nth order homogeneous stuff that I already have so that it works, and then to implement variation of parameters!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>194</wp:post_id>
  <wp:post_date>2009-07-16 05:06:17</wp:post_date>
  <wp:post_date_gmt>2009-07-16 05:06:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>constant-stuff</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Modifying a list while looping through it in Python</title>
  <link>http://asmeurersympy.wordpress.com/2009/07/20/modifying-a-list-while-looping-through-it-in-python/</link>
  <pubDate>Mon, 20 Jul 2009 06:35:45 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=197</guid>
  <description/>
  <content:encoded><![CDATA[Here is an interesting thing that I found.  <code>x</code> is a SymPy Symbol:
<img src="http://asmeurersympy.files.wordpress.com/2009/07/code-block-11.png" alt="Code block 1" title="Code block 1" width="174" height="86" class="alignnone size-full wp-image-207" />

I would have expected to get <code>a = []</code>, but it only removes the first item.  And yes, <code>x + 1</code> passes the condition:
<code>
&gt;&gt;&gt; (x + 1).has(x)
True
</code>

Clearly, it is a bad idea to modify a list while I am looping through it. I should instead be doing something like this:
<img src="http://asmeurersympy.files.wordpress.com/2009/07/code-block-2.png" alt="Code block 2" title="Code block 2" width="203" height="111" class="alignnone size-full wp-image-204" />
But I am intrigued as to why exactly this fails.  If any of the readers of the blog thinks that he know, please post in the comments.  Or, if I figure it out, I will post an update.  Also, here is a similar example, with a strange result:
<img src="http://asmeurersympy.files.wordpress.com/2009/07/code-block-3.png" alt="Code block 3" title="Code block 3" width="167" height="75" class="alignnone size-full wp-image-205" />

(Sorry for the images by the way.  WordPress's so called "code" blocks are impervious to indentation.)

UPDATE (a few minutes later):
Well, I figured it would come to me as to why this was happening, and it didn't take long.  While I haven't read the actual <a href="http://docs.python.org/reference/index.html#reference-index">Python Language Reference</a>, this is what I am assuming is happening.  This is all just my guessing on how Python is implemented.  Please correct me if I am wrong.

So, obviously, a Python list is just a C array.  It is probably an array of pointers, which is the only way I can see that would let it be mutable with different objects (this is how compiled languages with dynamic typing like <a href="http://en.wikipedia.org/wiki/Objective_c">Objective-C</a> more or less pull it off).  Now C does not have the <code>for i in list</code> syntax that Python has (nor does any other language that I know of.  That is one of the reasons that Python is so awesome!), so if you want to recurse a list (C array), you have to do the usual <code>for (i=0; i&lt;=len(list); i++) {</code> from C (or it probably uses a while loop, which would allow for things like iterators, but a for loop in C is literally just a wrapper around a while loop anyway).  Then of course, inside of the loop, you just have <code>list[i]</code> blocks.  So when I was going through my list, for example, the list of numbers in the last example, it would hit item 0 (the first item), remove it, which would amount to rebuilding the list as <code>[2, 3, 4, 5]</code>, then it would hit item 1, which is now 3, remove it, rebuilding the list, and so on.  So the even numbered elements remain because it skips every element after one that it removes. CPython must have good error handling, because eventually this would cause the indices to go beyond the length of the list.  It seems to me that this behavior is not very well defined.  Personally, I think that whatever you are looping through in a for loop should become immutable within the loop block.  I checked Python 3.1, and the behavior is exactly the same.

Based on this, <code>.remove()</code> rebuilds the list each time.  I would have thought it would just set the value in the array to Null, but I guess that would make it more difficult to test equality with an equivalent list that doesn't have Null values.  It is good to know that <code>.remove()</code> does that, because it means that can be an expensive operation.  ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>197</wp:post_id>
  <wp:post_date>2009-07-20 06:35:45</wp:post_date>
  <wp:post_date_gmt>2009-07-20 06:35:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>modifying-a-list-while-looping-through-it-in-python</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:comment>
    <wp:comment_id>49</wp:comment_id>
    <wp:comment_author><![CDATA[Fabian]]></wp:comment_author>
    <wp:comment_author_email>fabian.seoane@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://fseoane.net</wp:comment_author_url>
    <wp:comment_author_IP>88.23.56.215</wp:comment_author_IP>
    <wp:comment_date>2009-07-20 07:55:43</wp:comment_date>
    <wp:comment_date_gmt>2009-07-20 07:55:43</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[has looks in args, and x.args is [] (the same with any Atom like Integer, Symbol, pi, etc), that's why x.has(x) is False.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>50</wp:comment_id>
    <wp:comment_author><![CDATA[Fabian]]></wp:comment_author>
    <wp:comment_author_email>fabian.seoane@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://fseoane.net</wp:comment_author_url>
    <wp:comment_author_IP>88.23.56.215</wp:comment_author_IP>
    <wp:comment_date>2009-07-20 07:56:58</wp:comment_date>
    <wp:comment_date_gmt>2009-07-20 07:56:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[oops, I was wrong. x.has(x) returns True ...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>51</wp:comment_id>
    <wp:comment_author><![CDATA[Fabian]]></wp:comment_author>
    <wp:comment_author_email>fabian.seoane@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://fseoane.net</wp:comment_author_url>
    <wp:comment_author_IP>88.23.56.215</wp:comment_author_IP>
    <wp:comment_date>2009-07-20 08:01:24</wp:comment_date>
    <wp:comment_date_gmt>2009-07-20 08:01:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Another solution would be to make a copy of the list, i.e.:

for i in a[:]:
   ...

And now you can safely remove, add, elements in a]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>54</wp:comment_id>
    <wp:comment_author><![CDATA[Andy Terrel]]></wp:comment_author>
    <wp:comment_author_email>andy.terrel@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>67.176.214.177</wp:comment_author_IP>
    <wp:comment_date>2009-07-22 00:39:22</wp:comment_date>
    <wp:comment_date_gmt>2009-07-22 00:39:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You should use filter for this.

a = filter(lambda i: i.has(x), a)

And Java has the  "for i in obj" as long as the obj implements the Iterable interface. Lots of languages have this, even Bash.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>55</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron Meurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>68.42.37.143</wp:comment_author_IP>
    <wp:comment_date>2009-07-22 01:27:39</wp:comment_date>
    <wp:comment_date_gmt>2009-07-22 01:27:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for the filter tip.  I also didn't know that list[:] created a copy.  And, I guess  I was wrong about the for i in list syntax.   It looks like several languages support it (http://en.wikipedia.org/wiki/Foreach).  Just not C, which other than Python, is the import one for me because that is what my programs for classes have to be in.  

Of course, none of this answers my question, which is why exactly does it do this?  Is my theory right or is it some other thing?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>54</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>56</wp:comment_id>
    <wp:comment_author><![CDATA[Andy Terrel]]></wp:comment_author>
    <wp:comment_author_email>andy.terrel@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>130.202.96.40</wp:comment_author_IP>
    <wp:comment_date>2009-07-22 20:52:50</wp:comment_date>
    <wp:comment_date_gmt>2009-07-22 20:52:50</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[More or less why doesn't matter because it will change in any implementation.  You can postulate about CPython but JPython and IronPython are in languages with the for each syntax.

Essentially the iteration though the sequence is not defined if the sequence is manipulated.  This is true in most languages.

Also a python list is not just a c array.  Python lists support resizing, insertion, and deletion; c arrays do not.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>55</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>57</wp:comment_id>
    <wp:comment_author><![CDATA[Andy Terrel]]></wp:comment_author>
    <wp:comment_author_email>andy.terrel@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>130.202.96.40</wp:comment_author_IP>
    <wp:comment_date>2009-07-22 21:09:57</wp:comment_date>
    <wp:comment_date_gmt>2009-07-22 21:09:57</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[It looks like you are basically correct about the array inside the list object being blown away and rebuilt. See Objects/listobject.c::listremove]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>55</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>58</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron Meurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>68.42.37.143</wp:comment_author_IP>
    <wp:comment_date>2009-07-23 02:48:05</wp:comment_date>
    <wp:comment_date_gmt>2009-07-23 02:48:05</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I downloaded the source and had a look.  It looks like a list is not an "array" per se, but a struct that contains a "Vector of pointers to list elements", which are realloced when the list size changes (with some optimizations, but that is the basic idea).  

I couldn't find the relevant code on for loops, but I think it checks the size of a each time.  For example, "&gt;&gt;&gt; a = [1]; for i in a: a.append(i)" hangs forever, and when you Control-C, a is a huge list of 1's.  

By the way, I get the same thing in jython (WordPress will probably kill this. It is the same as the last example above):
Jython 2.5.0 (Release_2_5_0:6476, Jun 16 2009, 13:33:26) 
[Java HotSpot(TM) 64-Bit Server VM (Apple Inc.)] on java1.6.0_13
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; a = [1, 2, 3, 4, 5]
&gt;&gt;&gt; for i in a:        
...     a.remove(i)    
... 
&gt;&gt;&gt; a
[2, 4]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>59</wp:comment_id>
    <wp:comment_author><![CDATA[Sebastian Haase]]></wp:comment_author>
    <wp:comment_author_email>seb.haase@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>79.194.40.34</wp:comment_author_IP>
    <wp:comment_date>2009-07-27 19:37:01</wp:comment_date>
    <wp:comment_date_gmt>2009-07-27 19:37:01</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Apparently it is more than just "good style" to not modify a list while iterating over it.
But for your particular use case I always go backwards (!) and use the index (see below).
That just solves the problem because the Remove() (or del a[i]) "invalidates" only indices AFTER the one removed - which have already been dealt with if you go backwards. So like this:
for i in range(len(a)-1,-1,-1):
    if .... a[i]....:
         del a[i]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>60</wp:comment_id>
    <wp:comment_author><![CDATA[Ronan Lamy]]></wp:comment_author>
    <wp:comment_author_email>ronan.lamy@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>86.140.109.142</wp:comment_author_IP>
    <wp:comment_date>2009-07-29 18:54:46</wp:comment_date>
    <wp:comment_date_gmt>2009-07-29 18:54:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The recommended way (I think) of doing this is to avoid filter and use a list comprehension instead:

a = [i for i in a if not i.has(x)]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>54</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>61</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron Meurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>68.42.37.143</wp:comment_author_IP>
    <wp:comment_date>2009-07-29 19:06:25</wp:comment_date>
    <wp:comment_date_gmt>2009-07-29 19:06:25</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I agree.  I changed it to that.  A list comprehension is much clearer and it avoids the use of the easily obfuscatory lambda keyword. 

By the way, it needs to be a = [i for i in a if i.has(x)].]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>60</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>62</wp:comment_id>
    <wp:comment_author><![CDATA[Jeremy]]></wp:comment_author>
    <wp:comment_author_email>jeremy.cowles@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.visualcore.com/</wp:comment_author_url>
    <wp:comment_author_IP>24.7.65.16</wp:comment_author_IP>
    <wp:comment_date>2009-08-02 00:10:01</wp:comment_date>
    <wp:comment_date_gmt>2009-08-02 00:10:01</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The "for...in" syntax is known as the "iterator" pattern, and just FYI, lots of languages support this construct - including JavaScript, Java, Ruby, Visual Basic, C# - and those that do not can still accomplish the same thing it's just manual, such as C and C++.

As far as your loop "bug" goes, this is exactly why most languages raise an exception when modifying a list while iterating over it. I had no idea what Python would do in that situation, I personally would prefer an exception.

It's an example of an imperative programming bug. You are modifying the list that you are iterating over, so the result depends on implementation of the language. 

Nice post! It surprised me that Python even allows this.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>115</wp:comment_id>
    <wp:comment_author><![CDATA[Strange Python Behavior (can someone please explain to me what is going on here?) &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2010/06/16/strange-python-behavior-can-someone-please-explain-to-me-what-is-going-on-here/</wp:comment_author_url>
    <wp:comment_author_IP>76.74.248.140</wp:comment_author_IP>
    <wp:comment_date>2010-06-16 04:49:15</wp:comment_date>
    <wp:comment_date_gmt>2010-06-16 04:49:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Python Behavior (can someone please explain to me what is going on&nbsp;here?)  Every once in a while, seemingly really simple Python code does something completely unexpected for me. Look at the [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1276663756</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>364</wp:comment_id>
    <wp:comment_author><![CDATA[True is True is False is True is False &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2011/03/15/true-is-true-is-false-is-true-is-false/</wp:comment_author_url>
    <wp:comment_author_IP>74.200.244.75</wp:comment_author_IP>
    <wp:comment_date>2011-03-15 22:29:21</wp:comment_date>
    <wp:comment_date_gmt>2011-03-15 22:29:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] for another one of my WTF Python blog posts. Yesterday, I randomly typed this in a Python session (it was late [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1300228162</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1300228163.3862";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>247</wp:comment_id>
    <wp:comment_author><![CDATA[2010 in review &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2011/01/02/2010-in-review/</wp:comment_author_url>
    <wp:comment_author_IP>72.233.69.84</wp:comment_author_IP>
    <wp:comment_date>2011-01-02 23:07:18</wp:comment_date>
    <wp:comment_date_gmt>2011-01-02 23:07:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Modifying a list while looping through it in Python July 200913 comments  4 [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1294009638</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1294009638.1406";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>744</wp:comment_id>
    <wp:comment_author><![CDATA[Richard Ellicott]]></wp:comment_author>
    <wp:comment_author_email>sci@nym.hush.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.facebook.com/richard.ellicott</wp:comment_author_url>
    <wp:comment_author_IP>80.229.164.23</wp:comment_author_IP>
    <wp:comment_date>2012-11-21 23:39:49</wp:comment_date>
    <wp:comment_date_gmt>2012-11-21 23:39:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[omg i just realized how old this is lol, well maybe it's useful to others]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>743</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1353541191.1618320941925048828125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1353541190</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>745</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron Meurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>174.56.21.245</wp:comment_author_IP>
    <wp:comment_date>2012-11-21 23:42:51</wp:comment_date>
    <wp:comment_date_gmt>2012-11-21 23:42:51</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Yes it's old, but this still remains one of the most popular posts on my blog.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>744</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1353541371</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1353541372.00032806396484375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>743</wp:comment_id>
    <wp:comment_author><![CDATA[Richard Ellicott]]></wp:comment_author>
    <wp:comment_author_email>sci@nym.hush.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.facebook.com/richard.ellicott</wp:comment_author_url>
    <wp:comment_author_IP>80.229.164.23</wp:comment_author_IP>
    <wp:comment_date>2012-11-21 23:39:01</wp:comment_date>
    <wp:comment_date_gmt>2012-11-21 23:39:01</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[i have just had the same issue

the issue as i saw it is I was deleting an element of the list shortening it, then the for loop "goes out of range" because your using i or n or whatever in the for loop to target some part of the array (i'll call it that if i want).. i had quite a few frankenstein solutions but to be honest I think the logical one is a try: and except:

it just doesn't make sense to build any crazy workarounds (i am already doing this on a nested list, so i could have an extra variable to be like a delete after loop tickbox) but yeah exceptions are fine, if you're really OCD you program that particular exception in and you can then still be on the lookout for actual exceptions you don't know about (i am not this ocd)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1353541142</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1353541142.113295078277587890625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>664</wp:comment_id>
    <wp:comment_author><![CDATA[Infinitely nested lists in Python &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2012/09/19/infinitely-nested-lists-in-python/</wp:comment_author_url>
    <wp:comment_author_IP>72.232.113.13</wp:comment_author_IP>
    <wp:comment_date>2012-09-19 04:21:12</wp:comment_date>
    <wp:comment_date_gmt>2012-09-19 04:21:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] of this blog know that I sometimes like to write about some strange, unexpected, and unusual things in Python that I stumble across. This post is another one of [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1348028473.1228840351104736328125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1348028472</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Variation of Parameters and More</title>
  <link>http://asmeurersympy.wordpress.com/2009/08/01/variation-of-parameters-and-more/</link>
  <pubDate>Sat, 01 Aug 2009 17:39:48 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=219</guid>
  <description/>
  <content:encoded><![CDATA[Well, the last time I posted a project update, I had resigned myself to writing a constant simplifying function and putting the Constant class on the shelf.  Well, just as I suspected, it was hell writing it, but I eventually got it working.  Already, what I have in dsolve() benefits from it.  I had many solutions with things like $latex \frac{x}{C_1}$ or $latex -C_1x$ in them, and they are now automatically reduced to just $latex C_1x$.  Of course, the disadvantage to this, as I mentioned in the other post, is that it will only simplify once.  Also, I wrote the function very specifically for expressions returned by dsolve.  It only works, for example, with constants named sequentially like C1, C2, C3 and so on.  Even with making it specialized, it was still hell to write.  I was also able to get it to renumber the constants, so something like <code>C2*sin(x) + C1*cos(x)</code> would get transfered to <code>C1*sin(x) + C2*cos(x)</code>.  It uses <code>Basic._compare_pretty()</code> (thanks to Andy for that tip), so it will always number the constants in the order they are printed.  

Once I got that working, it was just little work to finish up what I had already started with solving general linear homogeneous odes ($latex a_ny^{(n)} + a_{n-1}y^{(n-1)} + \dots + a_2y'' + a_1y' + a_0y = 0$ with $latex a_i$ constant for all $latex i$).  Solving these equations is easy.  You just set up a polynomial of the form $latex a_nm^n + a_{n-1}m^{n-1} + \cdots + a_2m^2 + a_1m + a_0 = 0$ and find the roots of it.  Then you plug the roots into an exponential times $latex x^i$ for i from 1 to the multiplicity of the root  (as in $latex Cx^ie^{root \cdot x}$).  You usually expand the real and complex parts of the root using Euler's Formula, and, once you simplify the constants, you get something like $latex x^ie^{realpart \cdot x}(C_1\sin{(impart \cdot x)} + C_2\cos{(impart \cdot x)})$ for each i from 1 to the multiplicity of the root.  Anyway, with the new constantsimp() routine, I was able to set this whole thing up as one step, because if the imaginary part is 0, then the two constants will be simplified into each other.  Also, SymPy has some good polynomial solving, so I didn't have any problems there.  I even made good use of the collect() function to factor out common terms, so you get something like $latex (C_1 + C_2x)e^{x}$ instead of $latex C_1e^{x} + C_2xe^{x}$, which for larger order solutions, can make the solution much easier to read (compare for example, $latex ((C_1 + C_2x)\sin{x} + (C_3 + C_4x)\cos{x})e^{x}$ with the expanded form, $latex C_1e^{x}\sin{x} + C_2xe^{x}\sin{x} + C_3\cos{x}e^{x} + C_4x\cos{x}{e^x}$ as the solution to $latex {\frac {d^{4}}{d{x}^{4}}}f \left( x \right) -4\,{\frac {d^{3}}{d{x}^{3}}}f \left( x \right) +8\,{\frac {d^{2}}{d{x}^{2}}}f \left( x \right) -8\,{\frac {d}{dx}}f \left( x \right) +4\,f \left( x \right) =0$).  

I entered all 30 examples from the relevant chapter of my text (Ordinary Differential Equations by Morris Tenenbaum and Harry Pollard), and the whole thing runs in under 2 seconds on my machine.  So it is fast, though that is mostly due to fast polynomial solving in SymPy.  

So once I got that working well, I started implementing variation of parameters, which is a general method for solving all equations of form $latex a_ny^{(n)} + a_{n-1}y^{(n-1)} + \dots + a_2y'' + a_1y' + a_0y = F(x)$.  The method will set up an integral to represent the particular solution to any equation of this form, assuming that you have all $latex n$ linearly independent solutions to the homogeneous equation $latex a_ny^{(n)} + a_{n-1}y^{(n-1)} + \dots + a_2y'' + a_1y' + a_0y = 0$.  The coefficients $latex a_i$ do not even have to be constant for this method to work, although they do have to be in my implantation because otherwise it will not be able to find general solution to the homogeneous equation.  

So, aside from doing my GSoC project this summer, I am also learning Linear Algebra, because I could not fit it in to my schedule next semester and I need to know it for my Knot Theory class.  It turns out that it was very useful in learning the method of variation of parameters.  I will explain how the method works below, but first I have a little rant.  

Why is the Wikipedia article on <a href="http://en.wikipedia.org/wiki/Variation_of_parameters">variation of parameters</a> the only website anywhere that covers variation of parameters in the general case?  Every other site that I could find only covers 2nd order equations, which I understand is what is taught in most courses because applying it to anything higher can be tedious and deriving the nth order case requires knowledge of Cramer's Rule, which many students may not know.  But you would think that there would at least be sites that discuss what I am about to discuss below, namely, applying it to the general case of an nth order inhomogeneous linear ode.  Even the <a href="http://mathworld.wolfram.com/VariationofParameters.html">Wolphram MathWorld article</a> only explains the derivation for a second order linear ODE, mentioning at the bottom that it can be applied to nth order linear ODEs.  I did find a website called <a href="http://planetmath.org/encyclopedia/VariationOfParameters.html">Planet Math</a> that covers the general case, but it wasn't on the top of the Google results list and took some digging to find.  It also has problems of its own, like being on a very slow server and some of the LaTeX on the page not rendering among them. 

This partially annoys me because the Wikipedia article is not very well written.  You have to read through it several times to understand the derivation (I will try to be better below).  The Planet Math site is a little better, but like I said, it took some digging to find, and I actually found it after I had written up half of this post already.  

But it is also part of a larger attitude that I am finding more and more of where anything that is not likely to be directly applied is not worth knowing and thus not worth teaching.  Sure, it is not likely that any person doing hand calculations will ever attempt variation of parameters on an ode of order higher than 2 or 3, but that is what computer algebra systems like SymPy are for.  Unfortunately, it seems that they are also in a large part for allowing you to not know how or why something mathematically is true.  What difference does it make if variation of parameters can be applied to a 5th order ODE if I have to use Maple to do actually do it anyway.  As long as the makers of Maple know how to apply variation of parameters to a nth order ODE, I can get along just fine.  At least with SymPy, the source is freely available, so anyone who does desire to know how things are working can easily see.  Anyway, I am done ranting now, so if you were skipping that part, this would be the point to start reading again.

So you have your linear inhomogeneous ODE: $latex a_ny^{(n)} + a_{n-1}y^{(n-1)} + \dots + a_2y'' + a_1y' + a_0y = F(x)$.  $latex a_n$ cannot be zero (otherwise it would be a n-1 order ODE), so we can and should divide through by it.  Lets pretend that we already did that, and just use the same letters.  Also, I will rewrite $latex a_n$ as $latex a_n(x)$ to emphasize that the coefficients do not have to be constants for this to work.  So you have your linear inhomogeneous ODE: $latex y^{(n)} + a_{n-1}(x)y^{(n-1)} + \dots + a_2(x)y'' + a_1(x)y' + a_0(x)y = F(x)$.  So, as I mentioned above, we need n linearly independent solutions to the homogeneous equation $latex y^{(n)} + a_{n-1}(x)y^{(n-1)} + \dots + a_2(x)y'' + a_1(x)y' + a_0(x)y = 0$ to use this method.  Let us call those solutions $latex y_1(x), y_2(x), \dots, y_n(x)$.  Now let us write our particular solution as $latex y_p(x) = c_1(x)y_1(x) + c_2(x)y_2(x) + \dots + c_n(x)y_n(x)$.  Now, if we substitute our particular solution in to the left hand side of our ODE, we should get $latex F(x)$ back.  So we have $latex (y_p)^{(n)} + a_{n-1}(x)(y_p)^{(n-1)} + \dots + a_2(x)y_p'' + a_1(x)y_p' + a_0(x)y_p =$ $latex F(x)$.  Now, let me rewrite $latex y_p$ as a summation to help keep things from getting too messy.  I am also going to write $latex c_i$ instead of $latex c_i(x)$ on terms for additional sanity.  Every variable is a function of x.  $latex y_p(x) = \sum_{i=1}^{n} c_i y_i$.  The particular solution should satisfy the condition of the ODE, so
$latex y_p^{(n)} + a_{n-1}y_p^{(n-1)} + \dots + a_2y_p'' + a_1y_p' + a_0y_p = F(x)$.

$latex (\sum_{i=1}^{n} c_i y_i)^{(n)} + a_{n-1}(\sum_{i=1}^{n} c_i y_i)^{(n-1)} + \dots + a_2(\sum_{i=1}^{n} c_i y_i)^{(2)} + $
$latex a_1(\sum_{i=1}^{n} c_i y_i)^{(1)} + a_0\sum_{i=1}^{n} c_i y_i = F(x)$.

Now, if we apply the product rule to this, things will get ugly really fast, because we have to apply the product rule on each term as many times as the order of that term (the first term would have to be applied n times, the second, n-1 times, and so on).  But there is a trick that we can use.  In the homogeneous case, there is no particular solution, so in that case the $latex c_i$ terms must all vanish identically because the solutions are linearly independent of one another.  Thus, if we plug the particular solution into the homogeneous case, we get

$latex (\sum_{i=1}^{n} c_i y_i)^{(n)} + a_{n-1}(\sum_{i=1}^{n} c_i y_i)^{(n-1)} + \dots + a_2(\sum_{i=1}^{n} c_i y_i)^{(2)} + $
$latex a_1(\sum_{i=1}^{n} c_i y_i)^{(1)} + a_0\sum_{i=1}^{n} c_i y_i = 0$.

We already know that if we plug the $latex y_i$ terms in individually of the $latex c_i$ terms, that the expression will vanish identically because the $latex y_i$ terms are solutions to the homogeneous equation.  The product rule on each term will be evaluated according to the <a href="http://en.wikipedia.org/wiki/Leibniz_rule_(generalized_product_rule)">Leibniz Rule</a>, which is that $latex (c_i \cdot f_i)^{(n)}=\sum_{k=0}^n {n \choose k} c_i^{(k)} y_i(x)^{(n-k)}$.  Now the $latex c_i y_i^{(n)}$ terms will vanish because we can factor out a $latex c_i$ and they will be exactly the homogeneous solution.  Because the expression is identically equal to zero, the remaining terms must vanish as well.  If we assume that each $latex \sum_{i=1}^n c_i' y_i^{(j)}=0$ for each j from 0 to n-2, then this will take care of this; the terms with higher derivatives on $latex c_i$ will also be 0, if this is true, then we do not need them for our derivation.  In other words, 
$latex  c_1' y_1  + c_2' y_2 + \cdots + c_n' y_n = 0 $
$latex c_n' y_1' + c_n' y_2' + \cdots + c_n' y_n' = 0 $
$latex \vdots $
$latex c_n' y_1^{(n-2)} + c_n' y_2^{(n-2)} + \cdots + c_n' y_n^{(n-2)} = 0$.

So, turning back to our original ODE with the particular solution substituted in, we have
$latex (\sum_{i=1}^{n} c_i y_i)^{(n)} + a_{n-1}(\sum_{i=1}^{n} c_i y_i)^{(n-1)} + \dots + a_2(\sum_{i=1}^{n} c_i y_i)^{(2)} + $
$latex a_1(\sum_{i=1}^{n} c_i y_i)^{(1)} + a_0\sum_{i=1}^{n} c_i y_i = F(x)$.
But we know that most of the terms of this will vanish, from our assumption above.  If we remove those terms, what remains is $latex \sum_{i=1}^{n} c_i' y_i^{(n-1)} = F(x)$.  So this is where it is nice that I learned <a href="http://en.wikipedia.org/wiki/Cramer%27s_rule">Cramer's Rule</a> literally days before learning how to do Variation of Parameters in the general case.  We have a system of n equations (the n-1 from above, plus the one we just derived), of n unknowns (the $latex c_i$ terms).  The determinant that we use here is used often enough to warrant a name: the <a href="http://en.wikipedia.org/wiki/Wronskian">Wronskian</a>.  We have that $latex c_i' = \frac{W_i(x)}{W(x)}$, or $latex c_i = \int \frac{W_i(x)}{W(x)}$, where $latex W_i(x)$ is the Wronskian of the fundamental system with the ith column replaced with $latex \begin{bmatrix} 0 \\ 0 \\ \vdots \\ 0 \\ F(x) \end{bmatrix}$.  So we finally have $latex y_p = \sum_{i=1}^n \int \frac{W_i(x)}{W(x)} y_i$.  

Well, that's the theory, but as always here, that is only half of the story.  A Wronskian function is already implemented in SymPy, and finding $latex W_i(x)$ simply amounts to $latex F(x)$ times the Wronskian of the system without the ith equation, all times $latex (-1)^i$.  So implementing it was easy enough.  But it soon became clear that there would be some problems with this method.  Sometimes, the SymPy would return a really simple Wronskian, something like $latex -4e^{2x}$, but other times, it would return something crazy.  For example, consider the expression that I reported in <a href="http://code.google.com/p/sympy/issues/detail?id=1562">SymPy issue 1562</a>.  The expression is (thanks to SymPy's <code>latex()</code> command, no thanks to WordPress's stupid auto line breaks that have forced me to upload my own image.  If it wasn't such a pain, I would do it for every equation, because it looks much nicer.):
<img src="http://asmeurersympy.files.wordpress.com/2009/08/crazy-trig-wronskian-sympy.png" alt="Crazy Trig Wronskian (SymPy)" title="Crazy Trig Wronskian (SymPy)" width="450" height="78" class="alignnone size-full wp-image-240" />.
This is the Wronskian, as calculated by SymPy's <code>wronskian()</code> function, of 
$latex \begin{bmatrix}x \sin{x}, &amp; \sin{x}, &amp; 1, &amp; x \cos{x}, &amp; \cos{x}\end{bmatrix}$, which is the set of linearly independent solutions to the ODE $latex {\frac {d^{5}}{d{x}^{5}}}f \left( x \right) +2\,{\frac {d^{3}}{d{x}^{3}}}f \left( x \right) +{\frac {d}{dx}}f \left( x \right) -1$.  Well, the problem here is that, as verified by Maple, that complex Wronskian above is identically equal to $latex -4$.  SymPy's <code>simplify()</code> and <code>trigsimp()</code> functions are not advanced enough to handle it.  It turns out that in this case, the problem is that SymPy's <code>cancel()</code> and <code>factor()</code> routines do not work unless the expression has only symbols in it, and that expression requires you to cancel and factor to find the $latex \cos^2{x} + \sin^2{x}$ (see the issue page for more information on this).  Unfortunately, SymPy's <code>integrate()</code> cannot handle that unsimplified expression in the denominator of something, as you could imagine, and it seems like almost every time that sin's and cos's are part of the solution to the homogeneous equation, the Wronskian becomes too difficult for SymPy to simplify.  So, while I was hoping to slip along with only variation of parameters, which technically solves every linear inhomogeneous ODE, it looks like I am going to have to implement the method of undetermined coefficients.  Variation of parameters will still be useful, as undetermined coefficients only works if the expression on the right hand side of the equation, $latex F(x)$ has a finite set of linearly independent derivatives (such as sin, cos, exp, polynomial terms, and combinations of them (I'll talk more about this whenever I implement it).  

The good news here is that I discovered that I was wrong.  I had previously believed that among the second order special cases were cases that could only be handled by variation of parameters or undetermined coefficients, but it turns out I was wrong.  All that was implemented were the homogeneous cases for second order linear with constant coefficients.  In addition to this, there was one very special case ODE that Ondrej had implemented for an example (examples/advanced/relativity.py).  The ODE is
$latex -2({\frac{d}{dx}}f(x)){e^{-f(x)}}+x({\frac{d}{dx}}f(x))^{2}{e^{-f(x)}}-x({\frac{d^{2}}{d{x}^{2}}}f(x)){e^{-f(x)}}$, which is the second derivative of $latex xe^{-f(x)}$ with respect to x.  According to the example file, it is know as Einstein's equations.  Maple has a nice <code>odeadvisor()</code> function similar to the <code>classify_ode()</code> function I am writing for SymPy that tells you all of the different ways that an ODE can be solved. So, I plugged that ODE into it and got a few possible methods out that I could potentially implement in SymPy to maintain compatibility with the example equation.  The chief one is that the lowest order of f in the ODE is 1 (assuming you divide out the $latex e^{-f(x)}$ term, which is perfectly reasonable as that term will never be 0. You can then make the substitution $latex u = f'(x)$, and you will reduce the order of the ODE to first order, which in this case would be a Bernoulli equation, the first thing that I ever implemented in SymPy.  

But I didn't do that.  Reduction of order methods would be great to have for <code>dsolve()</code>, but that is a project for another summer.  Aside from that method, Maple's <code>odeadvisor()</code> also told me that it was a Liouville ODE.  I had never heard of that method, and neither it seems has Wikipedia or "Uncle Google" (as Ondrej calls it).  Fortunately, Maple's Documentation has a nice page for each type of ODE returned by <code>odeadvisor()</code>, so I was able to learn the method. The method relies on Lie Symmetries and exact second order equations, neither of which I am actually familiar with, so I will not attempt to prove anything here.  Suffice it to say that if an ODE has the form 
$latex {\frac{d^{2}}{d{x}^{2}}}y(x)+g(y(x))({\frac{d}{dx}}y(x))^{2}+f(x){\frac{d}{dx}}y(x)=0$, then the solution to the ODE is
$latex \int^{y(x)}{e^{\int g(a){da}}}{da}+C1\int{e^{-\int f(x){dx}}}{dx}+C2=0$
You could probably verify this by substituting the solution into the original ODE.  See the <a href="http://www.maplesoft.com/support/help/view.aspx?path=odeadvisor/Liouville">Maple Documentation page on Liouville ODEs</a>, as well as the <a href="http://eric.ed.gov:80/ERICWebPortal/custom/portlets/recordDetails/detailmini.jsp?_nfpb=true&amp;_&amp;ERICExtSearch_SearchValue_0=ED089982&amp;ERICExtSearch_SearchType_0=no&amp;accno=ED089982">paper they reference</a> (Goldstein and Braun, "Advanced Methods for the Solution of Differential Equations", see pg. 98).  

The solution is very straight forward--as much so as first order linear or Bernoulli equations, so it was a cinch to implement it.  It looks like quite a few differential equations generated by doing $latex F''(y(x), x)$ for some function or x and y $latex F(y(x), x)$ generates equations of that type, so it could be actually useful for solving other things.  

Before I sign off, I just want to mention one other thing that I implemented.  I wanted my linear homogeneous constant coefficient ODE solver to be able to handle ODEs for which SymPy can't solve the characteristic equation, for whatever reason.  SymPy has <code>RootOf()</code> objects similar to Maple that let you represent the roots of a polynomial without actually solving it, or even being able to solve it, but a you can only use RootOf's if you know that none of the roots are repeated.  Otherwise, you would have to know which terms require an additional $latex x^i$ to preserve linear independence.  Well, it turns out that there is a way to tell if a polynomial has repeated roots without solving for them.  There is a number associated with every polynomial of one variable called the <a href="http://en.wikipedia.org/wiki/Discriminant">discriminant</a>.  For example, the discriminant of the common quadratic polynomial $latex ax^2 + bx + c$ is the term under the square root of the famous solution $latex b^2 - 4ac$.  It is clear that a quadratic has repeated roots if and only if the discriminant is 0.  Well, the same is true for the discriminant of any polynomial.  I am not highly familiar with this (ask me again after I have taken my abstract algebra class next semester), but apparently there is something called the resultant, which is the product of the differences of roots between two polynomials and which can also be calculated without explicitly finding the roots of the polynomials.  Clearly, this will be 0 if and only if the two polynomials share a root.  So the discriminant is built from the fact that a polynomial has a repeated root iff it shares a root with its resultant.  So it is basically the resultant of a polynomial and its derativave, times an extra factor.  It is 0 if and only if the polynomial has a repeated root.  

Fortunately, SymPy's excelent Polys module already had resultants implemented (quite efficiently too, I might add), so it was easy to implement the discriminant.  I added it as <a href="http://code.google.com/p/sympy/issues/detail?id=1555&amp;q=discriminant">issue 1555</a>.  If you are a SymPy developer and you have somehow managed to make yourself read this far (bless your heart), please review that patch.  

Well, this has turned out to be one hella long blog post.  But what can I say.  You don't have to read this thing (except for possibly my mentor.  Sorry Andy).  And I haven't been quite updating weekly like I am supposed to be, so this compensates.  If you happened upon this blog post because, like me, you were looking for a general treatment of variation of parameters, I hope you found my little write up helpful.  And if you did, and you now understand it, could you go ahead and improve the Wikipedia article.  I'm not up to it?  ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>219</wp:post_id>
  <wp:post_date>2009-08-01 17:39:48</wp:post_date>
  <wp:post_date_gmt>2009-08-01 17:39:48</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>variation-of-parameters-and-more</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:comment>
    <wp:comment_id>63</wp:comment_id>
    <wp:comment_author><![CDATA[Fabian]]></wp:comment_author>
    <wp:comment_author_email>fabian@fseoane.net</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>83.54.14.63</wp:comment_author_IP>
    <wp:comment_date>2009-08-06 00:29:18</wp:comment_date>
    <wp:comment_date_gmt>2009-08-06 00:29:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[you might want to ping mateusz to review the patch, as he is working in the poly module]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>72</wp:comment_id>
    <wp:comment_author><![CDATA[Undetermined Coefficients &laquo; GSoC 2009: SymPy ODEs]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2009/08/17/undetermined-coefficients/</wp:comment_author_url>
    <wp:comment_author_IP>74.200.245.189</wp:comment_author_IP>
    <wp:comment_date>2009-09-07 05:04:42</wp:comment_date>
    <wp:comment_date_gmt>2009-09-07 05:04:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] the other hand, from the programmer&#8217;s point of view, variation of parameters is much better. All you have to do is take the Wronskian of the general solution set and use it to [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>Homogeneous coefficients corner case</title>
  <link>http://asmeurersympy.wordpress.com/2009/08/10/homogeneous-coefficients-corner-case/</link>
  <pubDate>Mon, 10 Aug 2009 17:30:22 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=245</guid>
  <description/>
  <content:encoded><![CDATA[Before I started the program, I implemented Bernoulli equations.  But the general solution to Bernoulli equations involves raising something to the power of $latex \frac{1}{1-n}$, where n is the power of the dependent term (see the <a href="http://en.wikipedia.org/wiki/Special:Search?search=bernoulli%20differential%20equation&amp;go=Go">Wikipedia page</a> for more info).  This works great, as I soon discovered, unless n == 1.  Then you get something to the power of $latex \infty$.  So I had to go in and remove the corner case.

So you think that after that I would have been more careful after that about checking that if general solution that divides by something I would test to see if that something is not zero before returning it as a solution.

Well, as I was just trying to implement some separable equation tests, I was going through the exercises of my ode text as I usually do for tests, and I came across $latex xy' - y = 0$.  If you recall, this equation also has coefficients that homogeneous of the same order (1). From the general solution to homogeneous coefficients, you would plug it into $latex \int{\frac{dx}{x}}=\int{\frac{-Q(1,u)du}{P(1,u)+uQ(1,u)}}+C$ where $latex u = \frac{y}{x}$ or $latex \int{\frac{dy}{y}}=\int{\frac{-P(u,1)du}{uP(u,1)+Q(u,1)}}+C$ where $latex u = \frac{x}{y}$ (here, P and Q are from the general form $latex P(x,y)dx+Q(x,y)dy=0$).  Well, it turns out that if you plug the coefficients from my example into those equations, the denominator will become 0 for each one.  So I (obviously) need to check for that $latex P(1,u)+uQ(1,u)$ and  $latex uP(u,1)+Q(u,1)$ are not 0 before running the homogeneous coefficients solver on a differential equation.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>245</wp:post_id>
  <wp:post_date>2009-08-10 17:30:22</wp:post_date>
  <wp:post_date_gmt>2009-08-10 17:30:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>homogeneous-coefficients-corner-case</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Testing implicit solutions to ODEs</title>
  <link>http://asmeurersympy.wordpress.com/2009/08/12/testing-implicit-solutions-to-odes/</link>
  <pubDate>Wed, 12 Aug 2009 21:27:21 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=251</guid>
  <description/>
  <content:encoded><![CDATA[So, the hard deadline for GSoC it Monday, so this will probably be my last post until then (I am very busy trying to finish up the ode module by then).  But this is one of those things that you just have to blog about.

So I have this checksol function in test_ode.py that attempts to check it the solutions to odes are valid or not.  It was a relic of the old ode module.  For that, it would just substitute the solution into the ode and see if it simplified to 0.  That is what it still does, if the solution is solved for f(x) (the function for all of my ode tests).  But if the solution is implicit in f, either because solve() is not good enough to solve it or because it cannot be solved, then that method obviously does not work.  So what I was trying to do is what my textbook suggested.  Take the derivative of the solution implicitly n times, where n is the order of the ode, and see if that is equal to the ode.  Basically, I was subtracting the ode from it and seeing if it reduced to 0.

However, it wasn't really working at all for most of my implicit solutions, even the really simple ones.  I ended up XFAILing most of my implicit checksol tests.  I think every single <a href="http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/">homogeneous coefficients</a> had an implicit solution, and none of them were working with checksol().  

So I started to ask around on IRC to see if anyone had any better ideas for testing these.  Ondrej couldn't think of anything.  Luke and Chris worked on an example that I gave them, and it seemed to be that it <em>wasn't</em> correct (which I didn't believe for a second, because the solution was straight out of my text, and both homogeneous coefficients integrals produced that same solution).  It turns out that we were mixing up $latex \log{\frac{y}{x}}$ and $latex \log{\frac{x}{y}}$ terms.  One of those appeared in the ode and the other appeared in the solution (the ode was $latex y dx  + x\log{\frac{y}{x}}dy - 2x dy = 0$ and the solution is $latex \frac{y}{1 + \log{\frac{x}{y}}}=C$, <a href="http://books.google.com.np/books?id=29utVed7QMIC&amp;lpg=PA24&amp;ots=uxLSUKt_3P&amp;dq=testing%20implicit%20solutions%20to%20ode&amp;hl=en&amp;pg=PA61#v=onepage&amp;q=&amp;f=false">number 9 from my odes text, pg. 61</a>.  

So Chris had a novel idea.  For 1st order odes, you can take the derivative of the solution and solve for $latex \frac{dy}{dx}$, which will always be possible, because differentiation is a linear operator.  Then substitute that into the original ode, and it will reduce.  

So we were talking about this on IRC later, and I had an epiphany as to why my original method wasn't working.  After trying it manually on an ode, I found that I had to multiply through the solution's derivative by $latex \frac{x}{f(x)}$ to make it equal to the ode.  Then, that reminded me of an important solution method that I didn't have time to implement this summer: integrating factors.  I remember that my textbook had <a href="http://books.google.com.np/books?id=29utVed7QMIC&amp;lpg=PA24&amp;ots=uxLSUKt_3P&amp;dq=testing%20implicit%20solutions%20to%20ode&amp;hl=en&amp;pg=PA83#v=onepage&amp;q=&amp;f=false">mentioned</a> that there is a theorem that states that every 1st order ODE that is linear in the derivative has a unique integrating factor that makes it exact.  And I realized, the derivative of the solution will be equal to the ODE if and only if the ODE is exact.  I checked my exact tests and verified my hunch.  I had to XFAIL all of my implicit homogeneous coefficients solutions, but all of my exact checksols were working just fine.  

So I refactored my checksol function to do this, and it now can check almost every one of my failing checksols.  The exceptions are some where trigsimp() cannot simplify the solution to 0 (we have a poor trigsimp), a second order solution (the above trick only works on 1st order odes, I believe), and some other simplification problems. 

The only down side to this new routine is that it is kind of slow (because of the simplification).  I am going to have to skip a test of only 6 solutions because it takes 24 seconds to complete.  ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>251</wp:post_id>
  <wp:post_date>2009-08-12 21:27:21</wp:post_date>
  <wp:post_date_gmt>2009-08-12 21:27:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>testing-implicit-solutions-to-odes</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:comment>
    <wp:comment_id>65</wp:comment_id>
    <wp:comment_author><![CDATA[Chris Smith]]></wp:comment_author>
    <wp:comment_author_email>smichr@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>202.70.82.196</wp:comment_author_IP>
    <wp:comment_date>2009-08-13 05:22:33</wp:comment_date>
    <wp:comment_date_gmt>2009-08-13 05:22:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[So the saga continues! Might I suggest that for the higher order derivatives you do the following (e.g. for a second order equation):

- let s be the solution of the ode in df/dx and d2f/dx2
- solve s.diff(x) for sdfdx and s.diff(x,2) for sd2fdx2 (which may have f, df/dx, and (df/dx)^2 values in it.
- subs the d2f/dx2 in the ode with what you found, then subst the df/dx in that expression with the df/dx value that you found: (ode.subs(df/dx,sdfdx)).subs(d2f/dx2,sd2fdx)
- show that that substituted expression equals zero.

Best regards,
 Chris]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>66</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>68.42.37.143</wp:comment_author_IP>
    <wp:comment_date>2009-08-13 05:47:02</wp:comment_date>
    <wp:comment_date_gmt>2009-08-13 05:47:02</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Interesting.  If this works (and it seems like it may, though I haven't played around with it), then my checksol could become general enough to move out of the test file and into the main namespace!  It seems like you could easily generalize your idea into nth order solutions.  Just take each of nth derivatives, solve for each one, and substitute into the ode in reverse order.

It's at the bottom of my list of things to do by the GSoC deadline though, so unless I find myself ahead of schedule, I expect it may have to come as a later patch.

Right now, there are no higher order solution methods implemented that return implicit solutions, except for the occasional Liouville ODE (2nd order).  Even so, it could be nice to have a general check_ode_sol (better name?) function for the module.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>65</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>Los Alamos "Sprint"</title>
  <link>http://asmeurersympy.wordpress.com/2009/08/17/los-alamos-sprint/</link>
  <pubDate>Mon, 17 Aug 2009 18:42:57 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=256</guid>
  <description/>
  <content:encoded><![CDATA[Last weekend, Luke came to visit Ondrej in Los Alamos, so I decided to drive him up from Albuquerque and visit him again.  It was nice meeting Luke and seeing Ondrej again.  

Aside from coding (the main thing that I did was fix an ugly match bug that was preventing dsolve() from recognizing certain ODEs), we visited the atomic museum in Los Alamos, the <a href="http://en.wikipedia.org/wiki/Valles_Caldera">Valles Caldera</a>, and some of the surrounding hot springs.  

Here are some pictures that Luke took with his iPhone.  Stupid WordPress seems to insist on flipping some of them (I can't fix it):
[gallery]

This is one of three posts that I plan on doing this week.  I just finished my GSoC project today/last night, so I will be blogging about that.  I plan on doing a post on the method of Undetermined Coefficients, as well as some other things that I managed to do.  The other post will be my general musings/advice for GSoC. That will probably be my last post here in a while.  I plan on continuing work with SymPy, but I get very busy with classes, so I most likely won't be doing much until next summer.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>256</wp:post_id>
  <wp:post_date>2009-08-17 18:42:57</wp:post_date>
  <wp:post_date_gmt>2009-08-17 18:42:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>los-alamos-sprint</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Undetermined Coefficients</title>
  <link>http://asmeurersympy.wordpress.com/2009/08/17/undetermined-coefficients/</link>
  <pubDate>Mon, 17 Aug 2009 22:33:00 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=276</guid>
  <description/>
  <content:encoded><![CDATA[<em>[Sorry for the delay in this post.  I was having some difficulties coming up with some of the rationales below. Also, classes have started, which has made me very busy.]</em>

If there was one ODE solving method that I did not want to implement this summer, it was undetermined coefficients.  I didn't really like the method too much when we did it my my ODE class (though it was not as unenjoyable as series methods).  The thing that I never really understood very well is to what extent you have to multiply terms in the trial function by powers of x to make them linearly independent of the solution to the general equation.  We did our ODEs homework in Maple, so I would usually just keep trying higher powers of x until I got a solution.  But to implement it in SymPy, I had to have a much better understanding of the exact rules for it.

From a user's point of view, the method of undetermined coefficients is much better than the method of variation of parameters.  While it is true that variation of parameters is a general method and undetermined coefficients only works on a special class of functions, undetermined coefficients requires no integration or advanced simplification, so it is fast (very fast, as well shall see below).  All that the CAS has to do is figure out what a trial function looks like, plug it into the ODE, and solve for the coefficients, which is a system of linear equations.  

On the other hand, from the programmer's point of view, <a href="http://asmeurersympy.wordpress.com/2009/08/01/variation-of-parameters-and-more/">variation of parameters</a> is much better.  All you have to do is take the Wronskian of the general solution set and use it to set up some integrals.  But the Wronskian has to be simplified, and if the general solution contains sin's and cos's, this requires trigonometric simplification not currently available in SymPy (although it looks like the <a href="http://code.google.com/p/sympy/issues/detail?id=1598">new Polys module</a> will be making a big leap forward in this area).  Also, integration is slow, and in SymPy, it often fails (hangs forever).  

Figuring out what the trial function should be for undetermined coefficients is way more difficult to program, but having finnally finished it, I can say that it is definitely worth having in the module.  Problems that it can solve can run orders of magnitude faster than the variation of parameters, and often variation of parameters can't do the integral or returns a less simplified result.  

So what is this undetermined coefficients?  Well, the idea is this:  if you knew what each linearly independent term of the particular solution was, minus the coefficients, then you could just set each coefficient as an unknown, plug it into the ODE, and solve for them.  It turns out that resulting system of equations is linear, so if you do the first part right, you can always get a solution.  

The key thing here is that you know what form the particular solution will take.  However, you don't really know this ahead of time.  All you have is the linear ode $latex a_ny^{(n)}(x) + \dots + a_1y'(x) + a_0y(x) = F(x)$ (as far as I can tell, this only works in the case where the coefficients $latex a_i$ are constant with respect to x.  I'd be interested to learn that it works for other linear ODEs.  At any rate, that is the only one that works in my branch right now.).  The solution to the ode is $latex y(x) = y_g(x) + y_p(x)$, where $latex y_g(x)$ is the solution to the homogeneous equation $latex f(x) \equiv 0$, and $latex y_p(x)$ is the particular solution that produces the $latex F(x)$ term on the right hand side.  The key here is just that.  If you plug $latex y_p(x)$ into the left hand side of the ode, you get $latex F(x)$.  

It turns out that this method only works if the function $latex F(x)$ only has a finite number of linearly independent derivatives (I am unsure, but this might be able to work in other cases, but it would involve much more advanced mathematics).  So what kind of functions have a finite number of linearly independent solutions?  Obviously, polynomials do.  So does $latex e^x$, $latex \cos{x}$, and $latex \sin{x}$.  Also, if we multiply two or more of these types together, then we will get a finite number of linearly independent solutions after applying the product rule.  But is that all?  Well, if we take the definition of linear independence from linear algebra, we know that a set of n vectors $latex \{\boldsymbol{v_1}, \boldsymbol{v_2}, \boldsymbol{v_3}, \dots, \boldsymbol{v_n}\}$, not all zero, are linearly independent only if $latex a_1\boldsymbol{v_1} + a_2\boldsymbol{v_2} + a_3\boldsymbol{v_3} + \dots + a_n\boldsymbol{v_n}=0$ holds only when $latex a_1 \equiv 0, a_2 \equiv 0, a_3 \equiv 0, \dots, a_n \equiv 0$, that is, the only solution is the trivial one (remember, this is the <em>definition</em> of linear independence).  They are linearly dependent if there exist weights $latex a_1, a_2, a_3, \dots, a_n$, not all 0, such that the equation $latex a_1\boldsymbol{v_1} + a_2\boldsymbol{v_2} + a_3\boldsymbol{v_3} + \dots + a_n\boldsymbol{v_n}=0$ is satisfied.  Using this definition, we can see that a function $latex f(x)$ will have a finite number of linearly independent derivatives if it satisfies $latex a_nf^{(n)}(x) + a_{n - 1}f^{(n - 1)}(x) + \dots + a_1f'(x) + a_0f(x) = 0$ for some $latex n$ and with $latex a_i\neq 0$ for some $latex i$.  But this is just a <a href="http://asmeurersympy.wordpress.com/2009/08/01/variation-of-parameters-and-more/">homogeneous linear ODE with constant coefficients</a>, which we know how to solve.    The solutions are all of the form $latex ax^ne^{b x}\cos{cx}$ or $latex ax^ne^{b x}\sin{cx}$, where a, b, and c are real numbers and n is a non-negative integer.  We can set the various constants to 0 to get the type we want.  For example, for a polynomial term, b will be 0 and c will be 0 (use the cos term).

So this gives us the exact form of functions that we need to look for to apply undetermined coefficients, based on the assumption that it only works on functions with a finite number of linearly independent derivatives.  

Well, implementing it was quite difficult.  For every ODE, the first step in implementation is matching the ODE, so the solver can know what methods it can apply to a given ODE.  To match in this case, I had to write a function that determined if the function matched the form given above, which was not too difficult, though not as trivial as just grabbing the right hand side in variation of parameters.  The next step is to use the matching to format the ODE for the solver.  In this case, it means finding all of the finite linearly independent derivatives of the ODE, so that the solver can just create a linear combination of them solve for the coefficients.  This was a little more difficult, and it took some lateral thinking.  

At this point, there is one more thing that needs to be noted. Since the trial functions, that is, the linearly independent derivative terms of the right hand side of the ODE, are of the same form as the solutions to the homogeneous equation, it is possible that one of the trial function terms will be a solution to the homogeneous equation.  If this happens, plugging it into the ODE will cause it to go to zero, which means that we will not be able to solve for a coefficient for that term.  Indeed, that term will be of the form $latex C1*\textrm{term}$ in the final solution, so even if we had a coefficient for it, it would be absorbed into this term from the solution to the homogeneous equation.  For example, variation of parameters will give a coefficient for such terms, even though it is unnecessary.  This is a clue that Maple uses variation of parameters for all linear constant coefficient ODE solving, because it gives the unnecessary terms with the coefficients that would be given by variation of parameters, instead of absorbing them into the arbitrary constants.  

We can safely ignore these terms for undetermined coefficients, because their coefficients will not even appear in the system of linear equations of the coefficients anyway.  But, without these coefficients, we will run into trouble.  It turns out that if a term $latex x^ne^{ax}\sin{bx}$ or $latex x^ne^{ax}\cos{bx}$ is repeated solution to the homogeneous equation, and $latex x^{n + 1}e^{ax}\sin{bx}$ or $latex x^{n + 1}e^{ax}\cos{bx}$ is not, so that $latex n$ is the highest $latex x$ power that makes it a solution to the homogeneous equation, and if the trial solution has $latex x^me^{ax}\sin{bx}$ or $latex x^me^{ax}\cos{bx}$ terms, but not $latex x^{m + 1}e^{ax}\sin{bx}$ or $latex x^{m + 1}e^{ax}\cos{bx}$ terms, so that $latex m$ is the highest power of $latex x$ in the the trial function terms, then we need to multiply these trial function terms by $latex x^{n + m}$ to make them linearly independent with the solutions of the homogeneous equation.  

Most <a href="http://en.wikipedia.org/wiki/Method_of_undetermined_coefficients">references</a> simply say that you need to multiply the trial function terms by "sufficient powers of x" to make them linearly independent with the homogeneous solution.  Well, this is just fine if you are doing it by hand or you are creating the trial function manually in Maple and plugging it in and solving for the coefficients.  You can just keep upping the powers of x until you get a solution for the coefficients.  Creating those trial functions in Maple, plugging them into the ODE, and solving for the coefficients is exactly what I had to do for my homework when I took ODEs last spring, and this "upping powers" trial and error method is exactly the method I used.  But when you are doing it in SymPy, you need to know exactly what power to multiply it by.  If it is too low, you will not get solution to the coefficients.  If it is too high, you can actually end up with too many terms in the final solution, giving a wrong answer.  

Fortunately, my excellent <a href="http://books.google.com.np/books?id=29utVed7QMIC&amp;lpg=PA24&amp;ots=uxLSUKt_3P&amp;dq=testing%20implicit%20solutions%20to%20ode&amp;hl=en&amp;pg=PA61#v=onepage&amp;q=&amp;f=false">ODEs textbook</a> gives the exact cases to follow, and so I was able to implement it correctly.  The textbook also gives a whole slew of exercises, all for which the solutions are given.  As usual, this helped me to find the bugs in my very complex and difficult to write routine.  It also helped me to find a <a href="http://code.google.com/p/sympy/issues/detail?id=1601">match bug</a> that would have prevented <code>dsolve()</code> from being able to match certain types of ODEs.  The bug turned out to be fundamental to the way <code>match()</code> is written, so I had to write my own custom matching function for linear ODEs.  

The final step in solving the undetermined coefficients is of course just creating a linear combination of the trial function terms, plugging it into the original ODE, and setting the coefficients of each term on each side equal to each other, which gives a linear system. SymPy can solve these easily, and once you have the values of the coefficients, you can use them to build your particular solution, at which point, you are done.  

The results were astounding.  Variation of parameters would hang on many simple inhomogeneous ODEs because of poor trig simplification of the Wronsikan, but my undetermined coefficients method handles them perfectly.  Also, there is no need to worry about absorbing superfluous terms into the arbitrary constants as with variation of parameters, because they are removed from within the undetermined coefficients algorithm.

But the biggest thing was speed.  Here are some benchmarks on some random ODEs from the test suite. WordPress code blocks are impervious to whitespace, as I have mentioned before, so no pretty printing here.  Also, it truncates the hints.  The hints used are <code>'nth_linear_constant_coeff_undetermined_coefficients'</code> and <code>'nth_linear_constant_coeff_variation_of_parameters'</code>:
<code>
<blockquote>
In [1]: time dsolve(f(x).diff(x, 2) - 3*f(x).diff(x) - 2*exp(2*x)*sin(x), f(x), hint='nth_linear_constant_coeff_undetermined_coefficients')
CPU times: user 0.07 s, sys: 0.00 s, total: 0.08 s
Wall time: 0.08 s
Out[2]: 
f(x) == C1 + (-3*sin(x)/5 - cos(x)/5)*exp(2*x) + C2*exp(3*x)

In [3]: time dsolve(f(x).diff(x, 2) - 3*f(x).diff(x) - 2*exp(2*x)*sin(x), f(x), hint='nth_linear_constant_coeff_variation_of_parameters')
CPU times: user 0.92 s, sys: 0.01 s, total: 0.93 s
Wall time: 0.94 s
Out[4]: 
f(x) == C1 + (-3*sin(x)/5 - cos(x)/5)*exp(2*x) + C2*exp(3*x)

In [5]: time dsolve(f(x).diff(x, 4) - 2*f(x).diff(x, 2) + f(x) - x + sin(x), f(x), hint='nth_linear_constant_coeff_undetermined_coefficients')
CPU times: user 0.06 s, sys: 0.00 s, total: 0.06 s
Wall time: 0.06 s
Out[6]: 
f(x) == x - sin(x)/4 + (C1 + C2*x)*exp(x) + (C3 + C4*x)*exp(-x)

In [7]: time dsolve(f(x).diff(x, 4) - 2*f(x).diff(x, 2) + f(x) - x + sin(x), f(x), hint='nth_linear_constant_coeff_variation_of_parameters')
CPU times: user 5.43 s, sys: 0.03 s, total: 5.46 s
Wall time: 5.52 s
Out[8]: 
f(x) == x - sin(x)/4 + (C1 + C2*x)*exp(x) + (C3 + C4*x)*exp(-x)

In [9]: time dsolve(f(x).diff(x, 5) + 2*f(x).diff(x, 3) + f(x).diff(x) - 2*x - sin(x) - cos(x), f(x), 'nth_linear_constant_coeff_undetermined_coefficients')
CPU times: user 0.10 s, sys: 0.00 s, total: 0.10 s
Wall time: 0.11 s
Out[10]: 
f(x) == C1 + (C2 + C3*x - x**2/8)*sin(x) + (C4 + C5*x + x**2/8)*cos(x) + x**2

In [11]: time dsolve(f(x).diff(x, 5) + 2*f(x).diff(x, 3) + f(x).diff(x) - 2*x - sin(x) - cos(x), f(x), 'nth_linear_constant_coeff_variation_of_parameters')

</blockquote>
</code>
The last one involves a particularly difficult Wronskian for SymPy (run it with hint='nth_linear_constant_coeff_variation_of_parameters_Integral', simplify=False).

Wall time comparisons reveal amazing speed differences.  We're talking orders of magnitude.
<code>
<blockquote>
In [13]: 0.94/0.08
Out[13]: 11.75

In [14]: 5.52/0.06
Out[14]: 92.0

In [15]: oo/0.11
Out[15]: +inf
</blockquote>
</code>
Of course, variation of parameters has the most difficult time when there are sin and cos terms involved, because of the poor trig simplification in SymPy.  So let's see what happens with an ODE that just has exponentials and polynomial terms involved.
<code>
<blockquote>
In [16]: time dsolve(f(x).diff(x, 2) + f(x).diff(x) - x**2 - 2*x, f(x), hint='nth_linear_constant_coeff_undetermined_coefficients')
CPU times: user 0.10 s, sys: 0.00 s, total: 0.10 s
Wall time: 0.10 s
Out[17]: 
f(x) == C1 + x**3/3 + C2*exp(-x)

In [18]: time dsolve(f(x).diff(x, 2) + f(x).diff(x) - x**2 - 2*x, f(x), hint='nth_linear_constant_coeff_variation_of_parameters')
CPU times: user 0.19 s, sys: 0.00 s, total: 0.19 s
Wall time: 0.20 s
Out[19]: 
f(x) == C1 + x**3/3 + C2*exp(-x)

In [20]: time dsolve(f(x).diff(x, 3) + 3*f(x).diff(x, 2) + 3*f(x).diff(x) + f(x) - 2*exp(-x) + x**2*exp(-x), f(x), hint='nth_linear_constant_coeff_undetermined_coefficients')
CPU times: user 0.09 s, sys: 0.00 s, total: 0.09 s
Wall time: 0.09 s
Out[21]: 
f(x) == (C1 + C2*x + C3*x**2 + x**3/3 - x**5/60)*exp(-x)

In [22]: time dsolve(f(x).diff(x, 3) + 3*f(x).diff(x, 2) + 3*f(x).diff(x) + f(x) - 2*exp(-x) + x**2*exp(-x), f(x), hint='nth_linear_constant_coeff_variation_of_parameters')
CPU times: user 0.29 s, sys: 0.00 s, total: 0.29 s
Wall time: 0.29 s
Out[23]: 
f(x) == (C1 + C2*x + C3*x**2 + x**3/3 - x**5/60)*exp(-x)

</blockquote>
</code>
The wall time comparisons here are:
<code>
<blockquote>
In [24]: 0.20/0.10
Out[24]: 2.0

In [25]: 0.29/0.09
Out[25]: 3.22222222222
</blockquote>
</code>

So we don't have orders of magnitude anymore, but it is still 2 to 3 times faster.  Of course, most ODEs of this form <em>will</em> have sin or cos terms in them, so the order of magnitude improvement over variation of parameters can probably be attributed to undetermined coefficients in general.  

Of course, we know that variation of parameters will still be useful, because functions like $latex \ln{x}$, $latex \sec{x}$ and $latex \frac{1}{x}$ do not have a finite number of linearly independent derivatives, and so you cannot apply the method of undetermined coefficients to them.  

There is one last thing I want to mention.  You can indeed multiply any polynomial, exponential, sin, or cos functions together and still get a function that has a finite number of linearly independent solutions, but if you multiply two or more of the trig functions, you have to apply the <a href="http://en.wikipedia.org/wiki/Trig_identities#Power-reduction_formulas">power reduction rules</a> to the resulting function to get it in terms of sin and cos alone.  Unfortunately, SymPy does not yet have a <a href="http://code.google.com/p/sympy/issues/detail?id=1590">function</a> that can do this, so to solve such a differential equation with undetermined coefficients (recommended, see above), you will have to apply them manually yourself.  Also, just for the record, it doesn't play well with exponentials in the form of sin's and cos's or the other way around (complex coefficients on the arguments), so you should back convert those first too.  

Well, this concludes the first of two blog posts that I promised.  I also promised that I would write about my summer of code experiences.  Not only is this important to me, but it is a <a href="http://code.google.com/p/sympy/wiki/GSoC2009">requirement</a>.  I really <em>hope</em> to get this done soon, but with classes, who knows.  ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>276</wp:post_id>
  <wp:post_date>2009-08-17 22:33:00</wp:post_date>
  <wp:post_date_gmt>2009-08-17 22:33:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>undetermined-coefficients</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:comment>
    <wp:comment_id>86</wp:comment_id>
    <wp:comment_author><![CDATA[Lloyd Ceballos]]></wp:comment_author>
    <wp:comment_author_email>Quaglieri@yahoo.co.uk</wp:comment_author_email>
    <wp:comment_author_url>http://www.consoletoolkit.com</wp:comment_author_url>
    <wp:comment_author_IP>85.229.78.9</wp:comment_author_IP>
    <wp:comment_date>2010-04-24 15:08:02</wp:comment_date>
    <wp:comment_date_gmt>2010-04-24 15:08:02</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[It is very interesting your Blogg. Thanks for notifying me!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>Google Summer of Code 2009 Wrap Up</title>
  <link>http://asmeurersympy.wordpress.com/2009/09/07/google-summer-of-code-2009-wrap-up/</link>
  <pubDate>Mon, 07 Sep 2009 06:49:12 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=340</guid>
  <description/>
  <content:encoded><![CDATA[Sorry about the extreme delay with this.  I of course have been busy with classes.

Note that this will just be a summary of the summer, with my comments looking back on it.  If you want more details on each individual thing that I implemented, look back on my previous blog posts.

Let me start from the beginning.  Around late February to early March of this year, I discovered the existence of Google Summer of Code.  I knew that I wanted to do some kind of work this summer, preferably an internship, so it piqued my interest.  At that time, the mentoring organizations were still applying for GSoC 2009, so I could only look at the ones from 2008.  Most of them were either Linux things or Web things, neither of which I had any experience in or am I much interested in.  I took a free course in Python at my University the previous semester, and it was the programming language that I knew best at the time.  I had learned some Java in my first semester CS class (did I mention that this was my first year at college?), and I hated it, and I was still learning C for my second semester CS class.  So I looked at what the Python Foundation had to offer.  I am a double major in math and computer science, so I looked under the math/science heading.  That's when I saw SymPy.

I should not that I have been ahead in Math.  It was my second semester, and I was taking Discrete Mathematics, Ordinary Differential Equations, Basic Concepts of Math, and Vector Analysis.  So I looked for project ideas on the SymPy page that related to what I knew.  The only one that I saw, other than core improvements, was to improve the ODE solving capabilities.  I got into contact with the community and looked at the source, finding that it was only capable of solving 1st order linear equations and some special cases of 2nd order linear homogeneous equations with constant coefficients.  I already at that point knew several methods from my ODE course, and I knew much of what I would learn.  

<strong>Application Period</strong>
The most difficult part of the Google Summer of Code, in my opinion, is the application period.  For starters, you have to do it while you are still in classes, so you pretty much have to do it in your free time.  Also, if you have never applied for Google Summer of Code before, you do not really know what a good application should look like.  I have long had my application available on the <a href="http://wiki.sympy.org/wiki/User:Asmeurer/GSoC2009_Application">SymPy Wiki</a>, and I will reference it here a few times.  First off, it was recommended to me by some of the SymPy developers that I put as many potential things that I could do in the summer in my application as I though I could do.  I was still only about half way through my ODEs course when I wrote the application, but I had the syllabus so I knew the methods I would be learning at least by name.  So that is exactly what I did:  I packed my application with every possible thing that I knew we would be learning about in ODEs.  

After I felt that I had a strong application, and Ondrej had proofread it for me, I submitted it.  There were actually two identical applications, one for the Python Software Foundation, and one for Portland State University.  This is because SymPy was not accepted as a mentoring organization directly, so they had to use those two foundations as proxies.  A requirement of acceptance is to submit a patch that passes review.  I decided to add a Bernoulli solver, because Bernoulli can be solved in the general case much like the 1st order linear ODE, which was already implemented.  

After I applied, there was an acceptance period.  I used that period to become aquatinted with the SymPy community and code base.  A good way to do this is to try to fix <a href="http://code.google.com/p/sympy/issues/list?q=label:EasyToFix">EasyToFix issues</a>.  I found <a href="http://code.google.com/p/sympy/issues/detail?id=694">issue 694</a>, which is to implement a bunch of tests from a paper by Michael Wester for testing computer algebra systems.  The tests cover every possible thing that a full featured CAS could do, so it was a great way to learn SymPy.  The issue is still unfinished, so working on it is still a good way to learn how to use SymPy.  

Also, it was important to learn git, SymPy's version control system.  The learning curve it pretty steep if you have never used version control system before, but once you can use it, it becomes a great tool at your disposal.  

<strong>Acceptance</strong>
After being accepted, I toned down my work with SymPy to work on finishing up my classes.  My classes finished a few weeks before the official start, so I used that period to get a jump start on my project.

<strong>The GSoC Period</strong>
For the start of the period, I followed my timeline.  I implemented 1st order ODEs with homogeneous coefficients and 1st order exact ODEs.  These were both pretty simple to do, as I expected.  

The next thing I wanted to do was separable.  My goal at this point was to get every relevant exercise from my textbook to work with my solvers.  One of the exercises from my <a href="http://books.google.com.np/books?id=29utVed7QMIC&amp;lpg=PA24&amp;ots=uxLSUKt_3P&amp;hl=en&amp;pg=PA56#v=onepage&amp;q=&amp;f=false">book</a> (Pg. 56, No. 21) was $latex dy=e^{x + y}dx$.  I soon discovered that it was impossible for SymPy to separate $latex e^{x + y} \rightarrow e^{x}e^{y}$, because the second would be automatically combined in the core.  I also discovered that <code>expand()</code>, which should have been the function to split that, expanded using all possible methods indiscriminately.  Part of my <code>separatevars()</code> function that I was writing to separate variables in expressions would be to split things like $latex x + yx \rightarrow x(1 + y)$ and $latex 2 x y + x^{2} + y^{2} \rightarrow (x + y)^{2}$, but <code>expand()</code>
as it was currently written would expand those.  

So I spent a few weeks hacking on the core to make it not auto-combine exponents.  I came up with a rule that exponents would only auto-combine if they had the same term minus the coefficient, the same rule that <code>Add</code> uses to determine what terms should auto combined by addition.  So it would combine $latex e^{x}e^{x} \rightarrow e^{2x}$, but $latex e^{x}e^{y}$ would be left alone.  It turns out that some of our algorithms, namely the Gruntz limit algorithm, relies on auto-combining.  We already had a function that could combine exponents, <code>powsimp()</code>, but it also combined bases, as in $latex x^zy^z \rightarrow (xy)^z$, so I had to split the behavior so that it could act only as auto-combining once did (by the way, use <code>powsimp(expr, combine='exp', deep=True)</code> to do this).  Then, after some help from Ondrej on pinpointing the exact location of the bugs, I just applied the function there.  The last thing I did here was to split the behavior of expand, so that you could do <code>expand(x*(y + 1), mul=False)</code> and it would leave it alone, but <code>expand(exp(x + y), mul=False)</code> would return <code>exp(x)*exp(y)</code>.  This split behavior turned out to be useful in more than one place in my code.  

This was the first non bug fix patch of mine that was pushed in to SymPy, and at the time of this writing, it is the last major one in the latest stable version.  It took some major rebasing to get my convoluted commit history ready for submission, and it was during this phase that I git finally clicked for me, especial the <code>git rebase</code> command.  This work took a few weeks from my ODEs time, and it became clear that I would not be doing every possible thing from my application.  The reason that I included so much in my application was that my project was non-atomic.  I could implement a little or a lot and still have a working  useful module.  

If you look at my timeline on my application, you can see that the first half is symbolic methods, and the second half is other methods, things like series.  It turns out that we didn't really learn much about systems of ODEs in my course and we learned very little about numerical methods (and it would take much more to know how to implement them).  We did learn series methods, but they were so annoying to do that I came to hate them with a passion.  So I decided to just focus on symbolic methods, which were my favorite anyway.  My goal was to implement as many as I could.  

After I finished up separable equations, I came up with an idea that I did not have during the application period. <code>dsolve()</code> was becoming cluttered fast with all of my solution methods.  The way that it worked was that it took an ODE and it tried to match methods one by one until it found one that worked, which it then used.   This had some drawbacks.  First, as I mentioned, the code was very cluttered.  Second, the ODEs methods would have to be applied in a predetermined order.  There are several ODEs that match more than one method.  For example, $latex 2xy + (x^2 + y^2)\frac{dy}{dx}=0$ has coefficients that are both homogeneous of order 2, and is also exact, so it can be solved by either method.  The two solvers return differently formatted solutions for each one.  A simpler example is that 1st order ODEs with homogeneous coefficients can be solved in two different ways.  My working solution was to try them both and then apply some heuristics to return the simplest one.  But sometimes, one way would create an impossible integral that would hand the integration engine.  And it made debugging the two solvers more difficult because I had to override my heuristic.  This also touches on the third point.  Sometimes the solution to an ODE can only be represented in the form of an unevaluatable integral. SymPy's <code>integrate()</code> function is supposed to return an unevaluated <code>Integral</code> class if it cannot do it, but all too often it will just hang forever.  

The solution I came up with was to rewrite dsolve using a hints method.  I would create a new function called <code>classify_ode()</code> that would do all of the ODE classification, removing it from the solving code.  By default, dsolve would still use a predetermined order of matching methods.  But you could override it by passing a "hint" to <code>dsolve</code> for any matching method, and it would apply that method.  There would also be options to only return unevaluated integrals when applicable.  

I ended up doing this and more (see the docstrings for <code>classify_ode()</code> and <code>dsolve()</code> in the current git master branch), but before I could I needed to clean up some things.  I needed to rewrite all of <code>dsolve()</code> and related functions.  Before I started the program, there were some special cases in dsolve for second order linear homogeneous ODEs with constant coefficients and one very special case ODE for the expanded form of $latex \frac{d^2}{dx^2}(xe^{-y}) = 0$.  

So the first thing I did was implement a solver for the general homogeneous linear with constant coefficients case.  These are rather simple to do: you just find the roots of the characteristic polynomial built off of the coefficients, and then put the real parts of the roots in front of the argument of an exponential and the imaginary parts in front of the arguments of a sine and cosine (for example, $latex 3 \pm 2i$ would give $latex C1e^{3x}\sin{2x} + C2e^{3x}\cos{2x}$.  The thing was, that if the imaginary part is 0, then you only have 1 arbitrary constant on the exponential, but if it is non-zero, you get 2, one for each trig function.  The rest falls out nicely if you plug 0 in for $latex b$ into $e^{ax}(C1\sin{bx} + C2\cos{box})$ because the sine goes to 0 and the cosine becomes 1.  But you would end up with $latex C1 + C2$ instead of just $latex C1$ in that case.  I had already planned on doing arbitrary constant simplification as part of my project, so I figured I would put this on hold and do that first.  Then, once that was done, the homogeneous case would be reduced to 1 case instead of the usual 2 or 3.  

My original plan was to make an arbitrary constant type that automatically simplified itself.  So, for example, if you entered <code>C1 + 2 + x</code> with <code>C1</code> an arbitrary constant, it would reduce to just <code>C1 + x</code>.  I worked with Ondrej, including visiting him in Los Alamos, and we build up a class that worked.  The problem was that, in order to have auto-simplification, I had to write the simplification directly into the core.  Neither of us liked this, so we worked a little bit on a basic core that would allow auto-simplification to be written directly in the classes instead of in the <code>Mul.flatten()</code> and <code>Add.flatten()</code> methods.  It turns out that my constant class isn't the only thing that would benefit from this.  Things like the order class (O(x)) and the infinity class (oo) are auto-simplified in the core, and things could be much cleaner if they happened in the classes themselves.  Unfortunately, modifying the core like this is not something that can happen overnight or even in a few weeks.  For one thing, it needed to wait until we had the new assumptions system, which was another Google Summer of Code project running parallel to my own.  So we decided to shelf the idea.

I still wanted constant simplification, so I settled with writing a function that could do it instead.  There were some downsides to this.  Making the function as general as the classes might have been would have been far too much work, so I settled on making it an internal-only  function that only worked on symbols named <code>C1</code>, <code>C2</code>, etc.  Also, unlike writing the simplification straight into <code>Mul.flatten()</code> which was as simple as removing any terms that were not dependent on x, writing a function that parsed an expression and simplified it was considerably harder to write.  I managed to churn out something that worked, and so I was ready to finish up the solver I had started a few paragraphs ago.  

After I finished that, I still needed to maintain the ability to solve that special case ODE.  Apparently, it is an ODE that you would get somewhere in deriving something about relativity, because it was in the relativity.py example file.  I used Maple's excellent <code>odeanalyser()</code> function (this is where I go the idea for my <code>classify_ode()</code>)to find a simple general case ODE that it fit (Liouville ODE).  After I finished this, I was ready to start working on the hints engine.  

It took me about a week to move all classification code into <code>classify_ode()</code>, move all solvers into individual functions, separate simplification code into yet other functions, and tie it all together in <code>dsolve()</code>.  In the end, the model worked very well.  The modularization allowed me to do some other things that I had not considered, such as creating a special "best" hint that used some heuristics that I originally developed for first order homogeneous which always has two possible solutions to try to give the best formatted solution for any ODE that has more than one possible solution method.  It also made debugging individual methods much easier, because I could just use the built in hint calls in <code>dsolve()</code> instead of commenting out lines of code in the source.  

This was good, because there was one more method that I wanted to implement.  I wanted to be able to solve the inhomogeneous case of a nth order linear ode with constant coefficients.  This can be done in the general case using the method of variation of parameters.  It was quite simple to set up variation of parameters up in the code.  You only have to set up a system of integrals using the Wronskian of the general solutions.  It would usually be a very poor choice of a method if you were trying to solve an ODE by hand because taking the Wronskian and computing n integrals is a lot of work.  But for a CAS, the work is already there.  I just have to set up the integrals.  

It soon became clear that even though, in theory, the method of variation of parameters can solve any ODE of this type, in practice, it does not always work so well in SymPy.  This is because SymPy have very poor simplification, especially trigonometric simplification, so sometimes there would be a trigonometric Wronskian that would be identically equal to some constant, but it could only simplify it to some very large rational function of sines and cosines.  When these were passed to the integral engine, it would cause it to fail, because it could not find the integral for such a seemingly complex expression.  

In addition, taking Wronskians, simplifying them, and then taking n integrals is a lot of work as I said, and even when SymPy could do it, it took a long time.  There is another method for solving these types of equations called undetermined coefficients that does not require integration.  It only works on a class of ODEs where the right hand side of the ODE is a simple combination of sines, cosines, exponentials, and polynomials in x.  It turns out that these kinds of functions are common anyway, so most ODEs of this type that you would encounter could be solved with this method.  Unlike variation of parameters, undetermined coefficients requires considerable setup, including checking for different cases.  This would be the method that you would want to use if you had to solve the ODE by hand because, even with all the setup, it only requires solving a system of linear equations vs. solving n integrals with variation of parameters, but for a CAS, it is the setup that matters, so this was a difficult prospect.

I spent the last couple of weeks writing up the necessary algorithms to setup the required system of linear equations and handling the different cases.  After I finally worked out all of the bugs, I ran some profiling against my variation of parameters solver.  It turned out that for ODEs that had trigonometric solutions (which take longer to simplify), my undetermined coefficients solver was an order of magnitude faster than the variation of parameters solver (and that is just for the ODEs that the variation of parameters engine could even solve at all).  For ODEs that only had exponentials, it was still 2-4 times faster.  

I finished off the summer by writing extensive documentation for all of my solvers and functions.  Hopefully someone who uses SymPy to solve ODEs can learn something about ODE solving methods as well as how to use the function I wrote when they read my documentation. 

<strong> Post-GSoC</strong>
I plan on continuing development with SymPy now that the Google Summer of Code period is over.  SymPy is an amazing project, mixing Python and Computer Algebra, and I want to help it grow.  I may even apply again in a future year to implement some other thing in SymPy, or maybe apply as a mentor for SymPy to help someone else improve it.  

<strong>Advice</strong>
What follows is some general advice for someone who wants to apply for Google Summer of Code.  Some of the advice pertains specifically to SymPy, and some of it is general advice that I think would apply to any project.

- Get involved early.  As soon as you decide that you want to participate in Google Summer of Code, start getting involved in the project.  Get into contact with them and discuss possible projects.  If you are looking before the participating organizations are announced, look at the organizations from previous years. For some organizations, it will vary; for others (like Python), it is almost given that they will be accepted every year.   

- Some projects (including SymPy) require you to send in a patch that passes review to be accepted.  This will give you a change to start familiarizing yourself with the code base.  If you are applying to SymPy, the Wester example I mentioned above is a really good way to learn what SymPy can do and how it works.  

- Subscribe to the mailing list, and once you are comfortable with it, participate.  Also, it is a good idea to idle in IRC (SymPy is on freenode at #sympy).  This will help you get to know the main contributors for the project.   

- For you application, see if the people in the project you are applying for will review it. If they like your project idea, they will try to help you write a good application so you can be accepted and you can implement it.  If they don't like your idea, then they will tell you and you should change it, otherwise you will not be accepted, no matter how well written your proposal is.  I have my proposal on the wiki (see link above).  I am not saying that it is necessarily a very good proposal, but it did get accepted.  If you are applying to SymPy, Ondrej will proofread your applications for you.

- If you are an IRC fan, there is also #gsoc on freenode, where you can ask all your GSoC related questions.  Be warned that it does get pretty noisy in the application period, especially right before the applications are due and right before proposals are accepted.  

- I cannot stress this one enough.  If you have never worked with a version control system before, it is perhaps more important to spend your time learning it than it is to learn the code base for your project.  These things have a steep learning curve if you have never used them before.  Once you master them though, they can make your life much easier.  Also, the sooner you learn to use them well, the easier your life will be later on down the road.  I spent a good part of the last week of GSoC cleaning up my commit history from the first half of the summer when I bad very poor committing/log habits.  If your project uses git, such as SymPy does, you might look at <a href="http://www-cs-students.stanford.edu/~blynn//gitmagic/">this</a> tutorial.  If it uses something else, good luck.  Seriously, git is the only good version control system.  See <a href="http://www.youtube.com/watch?v=4XpnKHJAok8">this video</a>.

- Expect to spend only about half of the summer actually implementing stuff.  You may think that you are a good programmer and that your code will not be so buggy that you will need to spend that much time fixing bugs, and you may be right.  But the fact is, you will be working on code bases written by may programmers that are not so good.  You will need to fix several already existing bugs to make your code work, which means that you will need to learn the code base well, learn how to read other people's code, and how to fix bugs that you had no part in creating.  You will be glad if a bug is in your code because you will usually know immediately what causes it and how to fix it.  But if a bug is somewhere else, you will need to find it, figure out why it happens, what is supposed to happen, and how to fix it without breaking anything else.  This is also why it is important to be active in the developer community.  

- Good luck.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>340</wp:post_id>
  <wp:post_date>2009-09-07 06:49:12</wp:post_date>
  <wp:post_date_gmt>2009-09-07 06:49:12</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>google-summer-of-code-2009-wrap-up</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>How to get both 32-bit and 64-bit Python in Snow Leopard</title>
  <link>http://asmeurersympy.wordpress.com/2009/11/13/how-to-get-both-32-bit/</link>
  <pubDate>Fri, 13 Nov 2009 01:16:42 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=356</guid>
  <description/>
  <content:encoded><![CDATA[We had some discussion on one of the Python issues about whether my Python in Snow Leopard should be 32-bit or 64-bit.  I originally thought that it was tied to what the kernel was, but I turned out to be wrong. 

From what I discovered, the important thing is what the Python was compiled as.  You can tell what your Python has been compiled as by running:
<code>
&gt;&gt;&gt; import sys
&gt;&gt;&gt; from math import log
&gt;&gt;&gt; log(sys.maxsize, 2)
</code>
If this is just under 31, then it is 32 bit.  If it returns 63, then it is 64.  An easier way to tell it to run:
<code>
&gt;&gt;&gt; 2**40
</code>
If you get 1099511627776L, then you have 32-bit Python, if you get 1099511627776, you have 64-bit Python (notice that the number is long in 32-bit Python, because it is larger than maxint).  

This test won't work in Python 3 because all integers are "long" by default, but the first part will still work.  

So why does this matter, you ask?  Well, aside from the fact that much longer numbers are not long (anything less than 2**63 - 1 = 9223372036854775807), there is the issue of hashing. 

In 64-bit Python:
<code>
&gt;&gt;&gt; hash('a')
12416037344
</code>

but in 32-bit Python
<code>
&gt;&gt;&gt; hash('a')
-468864544
</code>

SymPy uses hash values to order arguments, so often it happens that behavior in one architecture will not show up in the other.  These problems are often hard to track and fix, but the worst is when things work fine on the machine you are working on.  This actually happened to me with my GSoC project.  I was renumbering the arbitrary constants in the printing order in an expression, but it turned out that the printing order of an expression can be dependent on .args order, so I had to modify the tests to canonize the numbering first.

So here comes the crux of the post.  It turns out that on Mac OS X, if you install the binary from python.org (Mac Installer Disk Image), this installs a 32-bit Python (for compatibility reasons) in /Library/Frameworks/Python.framework/Versions/2.6/bin/python2.6
.  However, if you install Python using 64-bit fink in Snow Leopard, it will compile it from source into 64-bit, and install it into /sw/bin/python2.6.  

So now I have an easy way to test both architectures without having to ssh into some other machine, which was what I was doing before.  ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>356</wp:post_id>
  <wp:post_date>2009-11-13 01:16:42</wp:post_date>
  <wp:post_date_gmt>2009-11-13 01:16:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>how-to-get-both-32-bit</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:comment>
    <wp:comment_id>75</wp:comment_id>
    <wp:comment_author><![CDATA[shanipribadi]]></wp:comment_author>
    <wp:comment_author_email>shanipribadi@gmx.net</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>125.163.32.216</wp:comment_author_IP>
    <wp:comment_date>2009-11-15 13:27:01</wp:comment_date>
    <wp:comment_date_gmt>2009-11-15 13:27:01</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I think what you meant was log(sys.maxsize, 2) so that it returns the base 2 logarithm of sys.maxsize. Or you could also use log(sys.maxsize)/log(2)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>8705567</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>76</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>129.138.31.10</wp:comment_author_IP>
    <wp:comment_date>2009-11-15 16:43:27</wp:comment_date>
    <wp:comment_date_gmt>2009-11-15 16:43:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Yes.  I did.  I have edited the post to fix this.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>75</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>91</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron Meurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>68.42.37.143</wp:comment_author_IP>
    <wp:comment_date>2010-05-15 17:12:34</wp:comment_date>
    <wp:comment_date_gmt>2010-05-15 17:12:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[How is it better?  It doesn't seem simpler to me, especially not simper than the 2**40 trick.  It does explain why strings hash differently, though.  sys.maxsize seems to me to be the most future-proof of the lot.  If I wanted to check this in a script, I would definitely use that one.  

Also, I noticed that Python 2.7 will be offered in both 32- and 64-bit Mac OS X installers.  I don't know if it will be possible to install both System installs at the same time, though.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>90</wp:comment_id>
    <wp:comment_author><![CDATA[Fred Palmer]]></wp:comment_author>
    <wp:comment_author_email>fred.palmer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>99.0.37.25</wp:comment_author_IP>
    <wp:comment_date>2010-05-14 04:47:47</wp:comment_date>
    <wp:comment_date_gmt>2010-05-14 04:47:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[This is a little better way to determine your version:


NullVoid ~: python
Python 2.6.5 (r265:79359, Mar 24 2010, 01:32:55) 
[GCC 4.0.1 (Apple Inc. build 5493)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.calcsize("P") * 8
32
&gt;&gt;&gt; quit()
NullVoid ~: /System/Library/Frameworks/Python.framework/Versions/2.6/bin/python
Python 2.6.1 (r261:67515, Feb 11 2010, 00:51:29) 
[GCC 4.2.1 (Apple Inc. build 5646)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.calcsize("P") * 8
64
&gt;&gt;&gt;]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>139</wp:comment_id>
    <wp:comment_author><![CDATA[How to force using 64 bit python on Mac OS X? | The Largest Forum Archive]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://tuts9.com/questions/22241/how-to-force-using-64-bit-python-on-mac-os-x</wp:comment_author_url>
    <wp:comment_author_IP>174.120.4.130</wp:comment_author_IP>
    <wp:comment_date>2010-07-08 20:02:07</wp:comment_date>
    <wp:comment_date_gmt>2010-07-08 20:02:07</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] This link shows how to identify if a python that I&#8217;m running is 32bit or 64bit. And I checked my python is 32 bit. [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1278619327</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>246</wp:comment_id>
    <wp:comment_author><![CDATA[2010 in review &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2011/01/02/2010-in-review/</wp:comment_author_url>
    <wp:comment_author_IP>72.233.69.84</wp:comment_author_IP>
    <wp:comment_date>2011-01-02 23:07:14</wp:comment_date>
    <wp:comment_date_gmt>2011-01-02 23:07:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] How to get both 32-bit and 64-bit Python in Snow Leopard November 20095 comments and 1 Like on WordPress.com,  3 [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1294009635</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1294009635.1887";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>368</wp:comment_id>
    <wp:comment_author><![CDATA[Instructions for Installing 64bit SciPy, Python 2.7.1 on MacOS X 10.6 &laquo; Byte Mining]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.bytemining.com/2011/03/instructions-for-installing-64bit-scipy-python-2-7-1-on-macos-x-10-6/</wp:comment_author_url>
    <wp:comment_author_IP>174.120.139.168</wp:comment_author_IP>
    <wp:comment_date>2011-03-28 19:01:46</wp:comment_date>
    <wp:comment_date_gmt>2011-03-28 19:01:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] (This tip comes from Aaron Meurer&#8217;s SymPy blog) [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1301338908</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1301338908.7205";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Automatically Remove Trailing Whitespace in XCode</title>
  <link>http://asmeurersympy.wordpress.com/2009/12/29/automatically-remove-trailing-whitespace-in-xcode/</link>
  <pubDate>Tue, 29 Dec 2009 23:56:46 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=360</guid>
  <description/>
  <content:encoded><![CDATA[I like XCode, and I use it to edit all of my source for SymPy.   But, like many editors, it likes to auto-indent new lines to the level of indentation of the previous line.  This is a useful feature, but it makes for training whitespace out the wazoo, since blank lines will be indented in.  I am constantly finding myself using SymPy's strip_whitespace script to clean up my files.  

This bugged me enough that I Googled a solution, and found <a href="http://code.google.com/p/google-toolbox-for-mac/wiki/GTMXcodePlugin">this</a>.  It is a simple XCode plugin that, among other things, adds an option to strip trailing whitespace on save.  Just install in the PlugIns folder in the XCode package and enable the option in the new Google pane of the XCode preferences.  ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>360</wp:post_id>
  <wp:post_date>2009-12-29 23:56:46</wp:post_date>
  <wp:post_date_gmt>2009-12-29 23:56:46</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>automatically-remove-trailing-whitespace-in-xcode</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:comment>
    <wp:comment_id>421</wp:comment_id>
    <wp:comment_author><![CDATA[Vim vs. Emacs (Part 1) &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2011/12/20/vim-vs-emacs-part-1/</wp:comment_author_url>
    <wp:comment_author_IP>72.233.44.22</wp:comment_author_IP>
    <wp:comment_date>2011-12-20 08:17:49</wp:comment_date>
    <wp:comment_date_gmt>2011-12-20 08:17:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] been using for Python files, didn&#8217;t work very well with the new version (in particular, the essential plugin that I&#8217;d been using to clear trailing whitespace on save doesn&#8217;t yet work in XCode 4). [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1324369070</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1324369071.7408";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Latest SymPy makes it to Fink</title>
  <link>http://asmeurersympy.wordpress.com/2010/04/06/latest-sympy-makes-it-to-fink/</link>
  <pubDate>Tue, 06 Apr 2010 19:41:16 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=363</guid>
  <description/>
  <content:encoded><![CDATA[Look at this screenshot:
<a href="http://asmeurersympy.files.wordpress.com/2010/04/screen-shot-2010-04-06-at-1-25-10-pm.png"><img src="http://asmeurersympy.files.wordpress.com/2010/04/screen-shot-2010-04-06-at-1-25-10-pm.png" alt="" title="SymPy makes it to Fink" width="450" height="112" class="alignnone size-full wp-image-364" /></a>

So the latest version of SymPy finally made it into <a href="http://www.finkproject.org/">fink</a>.  Normally, this wouldn't be that exciting, but before this, the most recent version in fink was 0.6.4, which was before I ever joined the project, with the exception of two commits.  So this is the first version on fink to include all of my contributions, including my 2009 Google Summer of Code work.  ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>363</wp:post_id>
  <wp:post_date>2010-04-06 19:41:16</wp:post_date>
  <wp:post_date_gmt>2010-04-06 19:41:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>latest-sympy-makes-it-to-fink</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>GSoC 2010</title>
  <link>http://asmeurersympy.wordpress.com/2010/04/26/gsoc-2010/</link>
  <pubDate>Mon, 26 Apr 2010 22:05:39 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=367</guid>
  <description/>
  <content:encoded><![CDATA[So I applied for Google Summer of Code again this year, and I got accepted!  I will post more here later, but you can read the proposal abstract <a href="http://socghop.appspot.com/gsoc/student_project/show/google/gsoc2010/python/t127230762920">here</a>.  The project is to improve the integrator in SymPy, making it faster, and able to solve more integrals.  ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>367</wp:post_id>
  <wp:post_date>2010-04-26 22:05:39</wp:post_date>
  <wp:post_date_gmt>2010-04-26 22:05:39</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>gsoc-2010</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:comment>
    <wp:comment_id>92</wp:comment_id>
    <wp:comment_author><![CDATA[michwill]]></wp:comment_author>
    <wp:comment_author_email>michwill@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>220.233.41.146</wp:comment_author_IP>
    <wp:comment_date>2010-05-16 14:03:21</wp:comment_date>
    <wp:comment_date_gmt>2010-05-16 14:03:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi, Aaron!

Your proposal looks pretty nice. That's the thing I really want to be improved in sympy.

Good luck with your work and keep all the world up to date in your blog!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>95</wp:comment_id>
    <wp:comment_author><![CDATA[More information on my Google Summer of Code project this year &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2010/05/26/more-information-on-my-google-summer-of-code-project-this-year/</wp:comment_author_url>
    <wp:comment_author_IP>74.200.246.88</wp:comment_author_IP>
    <wp:comment_date>2010-05-26 17:33:48</wp:comment_date>
    <wp:comment_date_gmt>2010-05-26 17:33:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] information on my Google Summer of Code project this&nbsp;year  So, as I noted here, I have been accepted into the Google Summer of Code program again this year. I mentioned that my [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>More information on my Google Summer of Code project this year</title>
  <link>http://asmeurersympy.wordpress.com/2010/05/26/more-information-on-my-google-summer-of-code-project-this-year/</link>
  <pubDate>Wed, 26 May 2010 17:33:38 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=369</guid>
  <description/>
  <content:encoded><![CDATA[So, as I noted <a href="http://asmeurersympy.wordpress.com/2010/04/26/gsoc-2010/trackback/">here</a>, I have been accepted into the Google Summer of Code program again this year.  I mentioned that my project involved improving the integrator, but I didn't say much other than that.  So here I plan on saying a bit more.  If you want more details, you can read my application <a href="http://wiki.sympy.org/wiki/User:Asmeurer/GSoC2010_Application">on the SymPy wiki</a>.  

My goal is to improve the integrator in SymPy, in other words, the back end to the <code>integrate()</code> function.  This is no easy task.  Currently, SymPy has a pretty decnet integration engine.  It is even able to solve some integrals that no other system is known to be able to solve (the second integral <a href="http://en.wikipedia.org/wiki/Risch_algorithm#Implementation">here</a>). But, as I discovered often many times throughout my work on ODEs last year, the integrator can often leave something to be desired.  There are two problems that I hope to address.  

First, the integrator often fails on elementary integrals.  This is because all of the integration in SymPy is based on a heuristic called the Risch-Norman algorithm.  Symbolic integration has been completely solved in the form of the Risch algorithm, meaning that there exists an algorithm to determine if an elementary function has an elementary antiderivative or not, and to find it if it does.  This algorithm, called the Risch algorithm, is extremely complicated, to the extent that no computer algebra system has ever completely implemented all the parts of it.  My plan is to begin implementing the full algorithm in SymPy.  I don't expect to finish the whole thing -- as I said no one ever has.  Rather, I hope to make a good headway into what is known as the transcendental part.  The Risch algorithm is broken up into four parts: rational part, the transcendental part, the algebraic part, and the mixed part.  

The rational part is involves integrating rational functions (functions of the form $latex \frac{a_nx^n + a_{n-1}x^{n-1} + \cdots + a_2x^2 + a_1x + a_0}{b_nx^n + b_{n-1}x^{n-1} + \cdots + b_2x^2 + a_1x + a_0}$).  The rational part is the easiest part in the sense that the algorithm is the simplest, and also that all rational function integrals are elementary (a term that I will define later).  Rational function integration is already implemented in sympy in full, though I may give a brief outline of how it works in a later post.  

The transcendental part is the part that I will be implementing this summer.  My guide will be <a href="http://www.amazon.com/Symbolic-Integration-Transcendental-Computation-Mathematics/dp/3540214933/ref=sr_1_fkmr0_2?ie=UTF8&amp;qid=1274894380&amp;sr=8-2-fkmr0"><em>Symbolic Integration I: Transcendental Functions</em> by Manuel Bronstein</a>, which describes and proves the transcendental part of the algorithm in some 300+ pages.  I will try to explain a little of how the algorithm works in some blog posts, but understand that it is very complex.  Therefore, I will probably explain it without proving things.  If you are interested in buying the book and learning the algorithm rigorously, the only prerequisites that I can tell are calculus (so you know what an integral and a derivative are), and a semester of abstract algebra (you need to know about rings, fields, ideals, homomorphisms, etc., as well as the various theorems relating them).  

In the book, I am still in the part that develops the theory called differential algebra necessary to prove the integration algorithm correct.  So to begin the GSoC program, I am working on learning the polys module in sympy.  My method of doing this is to write doctests for all the functions in the module.  It's a daunting task, but it's been probably the best way of learning how a computer module works that I have ever tried.  You really have to understand all aspects of a function to write a doctest for it, the types of the parameters and return value, as well as what the algorithm is actually doing.  It's especially helpful that the code for the functions is right below the docstring for each function, so I can see how it really works on the inside, removing the mystery of the module.  Furthermore, it will serve as a reference for me for the remainder of the summer, as well for anyone else who wants to learn the polys module, or just needs to debug it.  I've also ran into several bugs and inefficiencies in the module that I have taken the liberty of fixing.  

Well that's it for this post.  If you want to follow my progress on the doctests, my branch is <a href="http://github.com/asmeurer/sympy/tree/polydocs-polys9">http://github.com/asmeurer/sympy/tree/polydocs-polys9</a>.  Note that the branch will be very unstable until I finish at some point at the end of this week or the beginning of the next.  ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>369</wp:post_id>
  <wp:post_date>2010-05-26 17:33:38</wp:post_date>
  <wp:post_date_gmt>2010-05-26 17:33:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>more-information-on-my-google-summer-of-code-project-this-year</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_oembed_0a0b6ad7484f5210e06107ef6290995e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>96</wp:comment_id>
    <wp:comment_author><![CDATA[Ondrej Certik]]></wp:comment_author>
    <wp:comment_author_email>ondrej@certik.cz</wp:comment_author_email>
    <wp:comment_author_url>http://ondrej.certik.cz</wp:comment_author_url>
    <wp:comment_author_IP>134.197.8.250</wp:comment_author_IP>
    <wp:comment_date>2010-05-27 01:31:16</wp:comment_date>
    <wp:comment_date_gmt>2010-05-27 01:31:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for documenting the polys branch, that is absolutely awesome. We wanted to do it with Mateusz, but didn't find time to do so here in Reno.

Thanks also for the posts about the Risch algorithm, I want to learn it myself eventually. :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>Integration of rational functions</title>
  <link>http://asmeurersympy.wordpress.com/2010/06/11/integration-of-rational-functions/</link>
  <pubDate>Fri, 11 Jun 2010 19:39:58 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=379</guid>
  <description/>
  <content:encoded><![CDATA[So for this week's blog post I will try to explain how the general algorithm for integrating rational functions works.  Recall that a <a href="http://en.wikipedia.org/wiki/Rational_function">rational function</a> is the quotient of two polynomials.  We know that using common denominators, we can convert the sum of any number of rational functions into a single quotient, $latex \frac{a_nx^n + a_{n-1}x^{n-1} + \cdots + a_2x^2 + a_1x + a_0}{b_nx^n + b_{n-1}x^{n-1} + \cdots + b_2x^2 + a_1x + a_0}$.  Also, using <a href="http://en.wikipedia.org/wiki/Polynomial_division">polynomial division</a> we can rewrite any rational function as the sum of a polynomial and the quotient of two polynomials such that the degree of the numerator is less than the degree of the denominator ($latex F(x) = \frac{b(x)}{c(x)} = p(x) + \frac{r(x)}{g(x)}$, with $latex deg(r) &lt; deg(g)$).  Furthermore, we know that the representation of a rational function is not unique.  For example, $latex \frac{(x + 1)(x - 1)}{(x + 2)(x - 1)}$ is the same as $latex \frac{x + 1}{x + 2}$ except at the point $latex x = 1$, and $latex \frac{(x - 1)^2}{x - 1}$ is the same as $latex x - 1$ everywhere.  But by using <a href="http://en.wikipedia.org/wiki/Euclid%27s_algorithm_for_polynomials#Polynomials">Euclid's algorithm</a> for finding the GCD of polynomials on the numerator and the denominator, along with polynomial division on each,  we can cancel all common factors to get a representation that is unique (assuming we expand all factors into one polynomial).  Finally, using polynomial division with remainder, we can rewrite any rational function $latex F(x)$ as $latex \frac{a(x)}{b(x)} = p(x) + \frac{a(x)}{d(x)}$, where $latex a(x)$, $latex b(x)$, $latex c(x)$, $latex d(x)$, and $latex p(x)$ are all polynomials, and the degree of $latex a$ is less than the degree of $latex d$.  

We know from calculus that the integral of any rational function consists of three parts: the polynomial part, the rational part, and the logarithmic part (consider arctangents as complex logarithms).  The polynomial part is just the integral of $latex p(x)$ above.  The rational part is another rational function, and the logarithmic part, which is a sum of logarithms of the form $latex a\log{s(x)}$, where $latex a$ is an algebraic constant and $latex s(x)$ is a polynomial (note that if $latex s(x)$ is a rational function, we can split it into two logarithms of polynomials using the log identities).  

To find the rational part, we first need to know about square-free factorizations.  An important result in algebra is that any polynomial with rational coefficients can be factored uniquely into irreducible polynomials with rational coefficients, up to multiplication of a non-zero constant and reordering of factors, similar to how any integer can be factored uniquely into primes up to multiplication of 1 and -1 and reordering of factors (technically, it is with coefficients from a unique factorization domain, for which the rationals is a special case, and up to multiplication of a unit, which for rationals is every non-zero constant).  A polynomial is square-free if this unique factorization does not have any polynomials with powers greater than 1.  Another theorem from algebra tells us that irreducible polynomials over the rationals do not have any repeated roots, and so given this, it is not hard to see that a polynomial being square-free is equivalent to it not having repeated roots.  

A <a href="http://en.wikipedia.org/wiki/Square-free_factorization">square-free factorization</a> of a polynomial is a list of polynomials, $latex P_1P_2^2 \cdots P_n^n$, where each $latex P_i$ is square-free (in other words, $latex P_1$ is the product of all the factors of degree 1, $latex P_2$ is the product of all the factors of degree 2, and so on).  There is a relatively simple algorithm to compute the square-free factorization of a polynomial, which is based on the fact that $latex gcd(P, \frac{dp}{dx})$ reduces the power of each irreducible factor by 1.  For example:
<a href="http://asmeurersympy.files.wordpress.com/2010/06/gcd.png"><img src="http://asmeurersympy.files.wordpress.com/2010/06/gcd.png" alt="" title="gcd" width="246" height="175" class="alignnone size-full wp-image-420"/></a>
(Sorry for the picture.   WordPress code blocks do not work)

It is not too hard to prove this using the product rule on the factorization of P.  So you can see that by computing $latex \frac{P}{gcd(P, \frac{dP}{dx})}$, you can obtain $latex P_1P_2\cdots P_n$.  Then, by recursively computing $latex A_0 = P$, $latex A_1 = gcd(A_0, \frac{dA_0}{dx})$, $latex A2 = gcd(A_1, \frac{dA_1}{dx})$, … and taking the quotient each time as above, we can find the square-free factors of P.  

OK, so we know from partial fraction decompositions we learned in calculus that if we have a rational function of the form $latex \frac{Q(x)}{V(x)^n}$ , where $latex V(x)$ is square-free, the integral will be a rational function if $latex n &gt; 1$ and a logarithm if $latex n = 1$.  We can use the partial fraction decomposition that is easy to find once we have the square-free factorization of the denominator to rewrite the remaining rational function as a sum of terms of the form $latex \frac{Q}{V_k^k}$, where $latex V_i$ is square-free.  Because $latex V$ is square-free, $latex gcd(V, V')=1$, so the <a href="http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm">Extended Euclidean Algorithm</a> gives us $latex B_0$ and $latex C_0$ such that $latex B_0V + C_0V'=1$ (recall that $latex g$ is the gcd of $latex p$ and $latex q$ if and only if there exist $latex a$ and $latex b$ relatively prime to $latex g$ such that $latex ap+bq=g$.  This holds true for integers as well as polynomials). Thus we can find $latex B$ and $latex C$ such that $latex BV + CV'= \frac{Q}{1-k}$.  Multiplying through by $latex \frac{1-k}{V^k}$, $latex \frac{Q}{V^k}=-\frac{(k-1)BV'}{V^k} + \frac{(1-k)C}{V^{k-1}}$, which is equal to $latex \frac{Q}{V^k} = (\frac{B'}{V^{k-1}} - \frac{(k-1)BV'}{V^k}) + \frac{(1-k)C-B'}{V^{k-1}}$.  You may notice that the term in the parenthesis is just the derivative of  $latex \frac{B}{V^{k-1}}$, so we get $latex \int\frac{Q}{V^k}=\frac{B}{V^{k-1}} + \int\frac{(1-k)C - B'}{V^{k-1}}$.  This is called Hermite Reduction.  We can recursively reduce the integral on the right hand side until the $latex k=1$. Note that there are more efficient ways of doing this that do not actually require us to compute the partial fraction decomposition, and there is also a linear version due to Mack (this one is quadratic), and an even more efficient algorithm called the Horowitz-Ostrogradsky Algorithm, that doesn't even require a square-free decomposition.  

So when we have finished the Hermite Reduction, we are left with integrating rational functions with purely square-free denominators.  We know from calculus that these will have logarithmic integrals, so this is the logarithmic part.  

First, we need to look at resultants and PRSs. The <a href="http://en.wikipedia.org/wiki/Resultant">resultant</a> of two polynomials is defined as differences of the roots of the two polynomials, i.e., $latex resultant(A, B) = \prod_{i=1}^n\prod_{j=1}^m (\alpha_i - \beta_j)$, where $latex A = (x - \alpha_1)\cdots(x - \alpha_n)$ and $latex B = (x - \beta_1)\cdots(x - \beta_m)$ are monic polynomials split into linear factors.  Clearly, the resultant of two polynomials is 0 if and only if the two polynomials share a root. It is an important result that the resultant of two polynomials can be computed from only their coefficients by taking the determinant of the <a href="http://en.wikipedia.org/wiki/Sylvester_matrix">Sylvester Matrix</a> of the two polynomials.  However, it is more efficiently calculated using a polynomial remainder sequence  (PRS) (sorry, there doesn't seem to be a Wikipedia article), which in addition to giving the resultant of A and B, also gives a sequence of polynomials with some useful properties that I will discuss below.  A polynomial remainder sequence is a generalization of the Euclidian algorithm where in each step, the remainder $latex R_i$ is multiplied by a constant $latex \beta_i$.  The Fundamental PRS Theorem shows how to compute specific $latex \beta_i$ such that the resultant can be calculated from the polynomials in the sequence. 

Then, if we have $latex \frac{A}{D}$, left over from the Hermite Reduction (so $latex D$ square-free), let $latex R=resultant_t(A-t\frac{dD}{dx}, D)$, where $latex t$ is a new variable, and $latex \alpha_i$ be the distinct roots of R.  Let $latex p_i=\gcd(A - \alpha_i\frac{dD}{dx}, D)$.  Then it turns out that the logarithmic part of the integral is just $latex \alpha_1\log{p_1} + \alpha_2\log{p_2} + \cdots \alpha_n\log{p_n}$.  This is called the Rothstein-Trager Algorithm.

However, this requires finding the prime factorization of the resultant, which can be avoided if a more efficient algorithm called the Lazard-Rioboo-Trager Algorithm is used. I will talk a little bit about it.  It works by using subresultant polynomial reminder sequences. 

It turns out that the above $latex gcd(A-\alpha\frac{dD}{dx}, D)$ will appear in the PRS of $latex D$ and $latex A-t\frac{dD}{dx}$.  Furthermore, we can use the PRS to immediately find the resultant $latex R=resultant_t(A-t\frac{dD}{dx}, D)$, which as we saw, is all we need to compute the logarithmic part.  

So that's rational integration.  I hope I haven't bored you too much, and that this made at least a little sense.  I also hope that it was all correct.  Note that this entire algorithm has already been implemented in SymPy, so if you plug a rational function in to <code>integrate()</code>, you should get back a solution.  However, I describe it here because the transcendental case of the Risch Algorithm is just a generalization of rational function integration.

As for work updates, I found that the Poly version of the heursitic Risch algorithm was considerably slower than the original version, due to inefficiencies in the way the polynomials are currently represented in SymPy.  So I have put that aside, and I have started implementing algorithms from the full algorithm.  There's not much to say on that front.  It's tedious work.  I copy the algorithm from Bronstein's book, then try make sure that it is correct based on the few examples given and from the mathematical background given, and when I'm satisfied, I move on to the next one.  Follow my <a href="http://github.com/asmeurer/sympy/tree/integration">integration</a> branch if you are interested.

 In my next post, I'll try to define some terms, like "elementary function," and introduce a little differential algebra, so you can understand a little bit of the nature of the general integration algorithm.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>379</wp:post_id>
  <wp:post_date>2010-06-11 19:39:58</wp:post_date>
  <wp:post_date_gmt>2010-06-11 19:39:58</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>integration-of-rational-functions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>132</wp:comment_id>
    <wp:comment_author><![CDATA[The Risch Algorithm Part 1 &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2010/06/30/the-risch-algorithm-part-1/</wp:comment_author_url>
    <wp:comment_author_IP>76.74.255.104</wp:comment_author_IP>
    <wp:comment_date>2010-06-30 03:43:11</wp:comment_date>
    <wp:comment_date_gmt>2010-06-30 03:43:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] of the Risch Algorithm, this is similar to the rational function integration that I outlined in this post, and has Liouville&#8217;s Theorem at its core. This is where I will start off next [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1277869391</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>188</wp:comment_id>
    <wp:comment_author><![CDATA[The Risch Algorithm: Part 3, Liouville&#8217;s Theorem &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2010/08/14/the-risch-algorithm-part-3-liouvilles-theorem/</wp:comment_author_url>
    <wp:comment_author_IP>76.74.254.66</wp:comment_author_IP>
    <wp:comment_date>2010-08-14 02:55:41</wp:comment_date>
    <wp:comment_date_gmt>2010-08-14 02:55:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Algorithm blog posts. It is recommended that you read parts 1 and 2 first, as well as my post on rational function integration, which could be considered part [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1281754542</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>377</wp:comment_id>
    <wp:comment_author><![CDATA[Update for the Beginning of the Summer &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2011/05/26/update-for-the-beginning-of-the-summer/</wp:comment_author_url>
    <wp:comment_author_IP>76.74.254.93</wp:comment_author_IP>
    <wp:comment_date>2011-05-26 05:42:02</wp:comment_date>
    <wp:comment_date_gmt>2011-05-26 05:42:02</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] done that week. Others will be continuations of my Risch Algorithm series of blog posts (see parts 0, 1, 2, and [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1306388523.9656";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1306388523</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Update for this week</title>
  <link>http://asmeurersympy.wordpress.com/2010/06/04/update-for-this-week/</link>
  <pubDate>Fri, 04 Jun 2010 18:45:26 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=395</guid>
  <description/>
  <content:encoded><![CDATA[So I started writing up a blog post on how rational function integration works, but Ondrej <a href="http://groups.google.com/group/sympy/browse_thread/thread/7d7dceb34db45302">wants a blog post</a> every week by the end of I don't think I would do it justice by rushing to finish it now (read: I'm to lazy to do it).  So instead, I'll just give a short post (if that's possible for me) on what I have been doing this week.  

I finished up writing doctests for the polynomials module for now (see <a href="http://code.google.com/p/sympy/issues/detail?id=1949">issue 1949</a>), so now this week I started looking at the integrator.  In particular, I went through each of the 40 issues with the <a href="http://code.google.com/p/sympy/issues/list?q=label:Integration">Integration label</a> and added them to a test file that I can monitor throughout the summer to see my progress.  It is the test_failing_integrals.py file in my <a href="http://github.com/asmeurer/sympy/tree/integration">Integration branch</a>, where all my work will be going for the foreseeable future.  So if you want to follow my work, follow that branch.  Here are some observations from those issues:

- integrate() can't handle almost all algebraic integrals (functions with square roots, etc.).  It can handle the derivative of arcsin and arcsinh because of special code in heurisch.py, but that's about it.  Before I can do any work on the Algebraic Risch Algorithm, I will need to implement the transcendental algorithm, so I think my temporary solution for this may be to add pattern matching heuristics for some of the more common algebraic integrals (anyone know a good integral table?).  

- I figured out why integrate hangs forever with some integrals, such as the one in <a href="http://code.google.com/p/sympy/issues/detail?id=1441">issue 1441</a>.  Here is, in a nutshell, how the Heuristic Risch algorithm works:  Take the integrand and split it into components.  For example, the components of x*cos(x)*sin(x)**2 are [x, cos(x), sin(x)].  Replace each of these components with a dummy variable, so if x = x0, cos(x) = x1, and sin(x) = x2, then the integrand is x0*x1*x2**2.  Also, compute the derivative of each component in terms of the dummy variables.  So the derivatives of [x0, x1, x2] are [1, -x2, 2*x1*x2].  Then, using these, perform some magic to create some rational functions out of the component dummy variables.  Then, create a candidate integral with a bunch of unknowns [A1, A2, …], which will be rational numbers, and a multinomial of the An's and the xn's that should equal 0 if the candidate integral is correct.  Then, because the xn's are not 0, and there is also some algebraic independence, you have the the An coefficients of each term must equal 0.  So you get a system of linear equations in the An's.  You then solve these equations, and plug the values of the An's into the candidate integral to give you the solution, or, if the system is inconsistent, then if cannot find a solution, possibly because there is no elementary one.  

Well, that over simplifies a lot of things, but the point I want to make is that the integral from issue 1441 creates a system of ~600 linear equations in ~450 variables, and solving that equation is what causes the integration to hang.  Also, as Mateusz, my mentor and the one who wrote the current integration implementation, pointed out, quite a bit of time is spent in the heurisch algorithm doing expansion on large Basic polynomials.  When I say Basic polynomials, I mean that they are SymPy expressions, instead of Poly instances.  Using Poly should speed things up quite a bit, so my next move will be to convert heurisch() into using Poly wherever applicable.  

- There were a few bugs in the rational integration, which I fixed in my branch.  The problem was in rational integrals with symbolic coefficients.  Because the new polys are able to create polynomials using any expression as a generator, not just symbols, things like Poly(sin(y)*x, x) creates Poly(sin(y)*x, x, domain='ZZ[sin(y)]').  But using the polynomial ring or fraction field creates problems with some things like division, whereas we really only want the domain to be EX (expression domain) in this case.  So this was not too difficult to fix, and you can see the fix in my integration branch.  

- Some integrals will require some good implementation of special functions such as the hypergeometric function to work.  Sometimes, you don't want to know what the non-elementary integral looks like, but you just want to calculate a definite integral.  The solution here is to use Meijer-G functions, which are on the list of things to possibly do at the end of the summer if I have time.

- Another bug that I plan on fixing (I haven't done it yet, but I know how to do it and it will be trivial), is this (<a href="http://code.google.com/p/sympy/issues/detail?id=1888">issue 1888</a>):

In [18]: print integrate(f(x).diff(x)**2, x)

2*D(f(x), x)*f(x)/3 - 2*x*D(f(x), x, x)*f(x)/3 + x*D(f(x), x)**2/3

The problem is in the step where it computes the derivative of the components, it tries to compute the derivative of f(x).diff(x) in terms of a dummy variable, but it reduces to 0 because diff(x2, x) == 0.  Thus, it treats f(x).diff(x) like something that has a 0 third derivative, i.e., x**2.  

Well that's it.  I knew I couldn't make a short blog post :).  If you want to help, I have three branches that need review (<a href="http://code.google.com/p/sympy/issues/detail?id=1883">1</a>, <a href="http://code.google.com/p/sympy/issues/detail?id=1949">2</a>, <a href="http://code.google.com/p/sympy/issues/detail?id=1843">3</a>), and except for the last one, my work is based on top of the other two, so none of my integration work can be pushed in until those two reviewed positively.  ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>395</wp:post_id>
  <wp:post_date>2010-06-04 18:45:26</wp:post_date>
  <wp:post_date_gmt>2010-06-04 18:45:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>update-for-this-week</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>PuDB, a better Python debugger</title>
  <link>http://asmeurersympy.wordpress.com/2010/06/04/pudb-a-better-python-debugger/</link>
  <pubDate>Fri, 04 Jun 2010 20:59:17 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=400</guid>
  <description/>
  <content:encoded><![CDATA[So <a href="http://haz-tech.blogspot.com/">Christian Muise</a> unwittingly just reminded me on IRC that I forgot to mention the main method that I used to learn how the heurisch function works in my last blog post.  I usually only use a debugger when I have a really hard bug I need to figure out, when the print statements aren't enough.  The reason for this is that the debugger that I had been using, winpdb, is, well, a pain to use.  There are so many little bugs, at least in Mac OS X, that it is almost not worth while to use it unless I need to.  For example, restarting a script from the debugger doesn't work.  If I pass a point that I wanted to see, I have to completely close the winpdb window and restart it from the command line, which takes about half a minute.  Also, winpdb uses it's own variant of pdb, which seems to cause more problems than it creates (like bugging me about sympy importing pdb somewhere <em>every time</em> I start debugging.)

But I really wanted to be able to step through the heurisch code to see exactly how it works, because many of the implementation details, such as gathering the components of an expression, will be similar if not exactly the same in the full algorithm.  So I started my quest for a better debugger.  For me, the ideal debugger is the C debugger in XCode.  That debugger has saved me in most of my programming assignments in C.  But it is only for C based languages (C, Objective-C, probably C++, …), not Python.  So I did a Google search, and it turns out that there is a list of Python debuggers <a href="http://wiki.python.org/moin/PythonDebuggers">here</a>.  So I went through them, and I didn't have to go far.  The very first one, <a href="http://pypi.python.org/pypi/pudb">pudb</a>, turns out to be awesome!

You can watch this <a href="http://vimeo.com/5255125">screencast</a> to get a better idea of the features, or even better install it and check them out.  The debugger runs in the console, not in some half-hacked GUI (half-hacked is what any non-Cocoa GUI looks like in Mac OS X).  The only down side to this is that you have to use the keyboard to do everything, but it ends up not being too bad.  And you can press '?' at any time to see the possible commands.  

To install it, just do <code>easy_install pudb</code>.  To run it, just create a script of what you want to debug, and do <code>python -m pudb.run my-script.py </code> and it just works! I have a line that says <code>alias pudb='python -m pudb.run'</code> in my <code>.profile</code>, which makes it even easier to run.  If you want to set a break point in the code, you can either navigate there from within pudb by pressing 'm', or you add a line that says <code>from pudb import set_trace; set_trace()</code> to the code (if you add the line to your code, you don't even need to create a script.  Just execute the code in IPython and when it hits that line, it will load the debugger).  

Some cool features:

- IPython console.  Just press '!' to go to a console, where you can manipulate variables from the executed namespace, and you can choose an IPython console.  

- Very easy to navigate.  You just need to know the keys 's', 'n', and 't'.  

- View the code from elsewhere than what is being run.  Pressing 'm' lets you view all imported modules.  You can easily view points on the stack by choosing them.  

- If an exception is thrown, it <em>catches it</em>!  This may sound obvious for a debugger, but it is one of things that didn't work very well in winpdb.  You can view the traceback of the exception, and choose to restart <em>without having to close and reopen the debugger</em>.  Actually, it asks you if you want to restart every time the script finishes too, which is also a great improvement over winpdb.  

This is what it looks like.  Click for a bigger picture:
[caption id="attachment_401" align="alignnone" width="450" caption="This is where the heurisch algorithm hangs."]<a href="http://asmeurersympy.files.wordpress.com/2010/06/pudb.png"><img src="http://asmeurersympy.files.wordpress.com/2010/06/pudb.png" alt="" title="PuDB" width="450" height="298" class="size-full wp-image-401" /></a>[/caption]

Some annoyances (in case Andreas Kloeckner reads this):

- The default display for variables is type, which is completely useless. I have to manually go through and change each to str so I can see what the variable is.  Is there a way to change this default?

- It asks me every time if I want to use IPython.  I always want to use IPython.

- This is might be a Mac OS X Terminal bug, but when I execute a statement that takes a while to run, it doesn't redraw the pudb window until it finishes.  This means that stepping through a program "flashes" black from what is above pudb in the window, and if I run a statement that takes forever, I loose the ability to see where it is unless I keyboard interrupt. Fortunately, it catches keyboard interrupts, so I can still see the traceback.

- There is no way to resize the variables window, or to scroll sideways in it.  If I want to see what a long variable expression is, I have to go to the IPython console and type it there. 

Some of these might be fixable and I just don't know it yet.  But even with them, this is still an order of magnitude improvement over winpdb.  Now I can actually use the debugger all the time in my coding, instead of just when I have a really tough bug and no other choice.  

UPDATE:

The first two were trivial to fix in a fork of the repository (isn't open source awesome?).  So if those are bothering you too, check out my branches at <a href="http://github.com/asmeurer/PuDB">http://github.com/asmeurer/PuDB</a>.  Maybe if I have some time I will make them global options using environment variables or something and  see if Andreas wants to merge them back into the main repo.  

As for the second one, I realized that it might be a good thing, because you can see anything that is printed.  Still, I would prefer seeing both, if possible (and the black flashes are annoying).  

UPDATE 2:

You can resize the side view by pushing +/-, though there doesn't seem to be a way to, say, make the variables view bigger and the breakpoints view smaller. 

UPDATE 3:

A while back Ondrej modified the code to have a different color theme, and I followed suit.  See <a href="https://github.com/certik/PuDB/commit/38fed5024d022c5d6d1961c917026e021a833a9e#comments">this conversation at GitHub</a>.  So now, instead of looking like a DOS terminal, in PuDB for me looks like this:
[caption id="attachment_682" align="alignnone" width="450" caption="PuDB XCode Midnight Theme Colors"]<a href="http://asmeurersympy.files.wordpress.com/2010/07/screen-shot-2010-07-28-at-12-51-36-pm.png"><img src="http://asmeurersympy.files.wordpress.com/2010/07/screen-shot-2010-07-28-at-12-51-36-pm.png" alt="PuDB XCode Midnight Theme Colors" title="PuDB XCode Midnight Theme Colors" width="450" height="360" class="size-full wp-image-682" /></a>[/caption]  This is exactly the same colors as my code in XCode, the editor I use, with the Midnight Theme.  It's pretty easy to change the colors to whatever you want.  Right now, you have to edit the source, but Ondrej or I might someday make it so you can have themes.  

Also, having used this all summer (and it was a life-saver having it in multiple occasions, and I am sure made my development speed at least twice as fast in others), I have one additional gripe.  It is too difficult to arrow up to the variable that you want to access in the variables view.  It would be nice to have a page up/page down feature there.  

UPDATE 4: PuDB has since improved a lot, include many fixes by myself. It now supports themes, saved settings, variable name wrapping, and more. See <a href="http://asmeurersympy.wordpress.com/2011/08/08/hacking-pudb-now-an-even-better-python-debugger/">this followup post</a>. ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>400</wp:post_id>
  <wp:post_date>2010-06-04 20:59:17</wp:post_date>
  <wp:post_date_gmt>2010-06-04 20:59:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>pudb-a-better-python-debugger</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c7556f65a1e5568d6f6574a0810262e3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>101</wp:comment_id>
    <wp:comment_author><![CDATA[Ted Horst]]></wp:comment_author>
    <wp:comment_author_email>ted.horst@earthlink.net</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>184.78.95.191</wp:comment_author_IP>
    <wp:comment_date>2010-06-06 17:14:00</wp:comment_date>
    <wp:comment_date_gmt>2010-06-06 17:14:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Aaron,

Thanks for the tip about pudb.  It looks nice, but I can't figure out the most basic thing, how do I get back to the source view after I have navigated to another view?

Sorry to ask you about this, but I can't find it in the docs and there doesn't seem to be a mailing list.

Thanks,
Ted]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1275844442</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>102</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>68.42.37.143</wp:comment_author_IP>
    <wp:comment_date>2010-06-06 19:58:44</wp:comment_date>
    <wp:comment_date_gmt>2010-06-06 19:58:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Ted.  

It tells you, at least for IPython.  Just press Control-D! :)

Aaron Meurer

EDIT:
Or are you talking about navigating the stack and variables?  Just use the arrow keys (press ? to see more).  ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>101</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1275854326</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>103</wp:comment_id>
    <wp:comment_author><![CDATA[Ted Horst]]></wp:comment_author>
    <wp:comment_author_email>ted.horst@earthlink.net</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>184.78.95.191</wp:comment_author_IP>
    <wp:comment_date>2010-06-06 20:36:39</wp:comment_date>
    <wp:comment_date_gmt>2010-06-06 20:36:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Arrow keys it is.  Still don't see that in the help, but seems obvious now as I was already using up/down arrows.

Thanks!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>102</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1275856599</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>104</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>68.42.37.143</wp:comment_author_IP>
    <wp:comment_date>2010-06-06 21:38:13</wp:comment_date>
    <wp:comment_date_gmt>2010-06-06 21:38:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Ah, I guess it isn't.  I think there isn't a mailing list because it is just the one developer who made it.  The source isn't too hard to modify (<code>git clone http://git.tiker.net/trees/pudb.git</code>), so you could probably go in and add a shortcut to go back to the source view.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>103</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1275860295</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>220</wp:comment_id>
    <wp:comment_author><![CDATA[thomas]]></wp:comment_author>
    <wp:comment_author_email>thomasballinger@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>134.174.54.133</wp:comment_author_IP>
    <wp:comment_date>2010-10-21 22:09:16</wp:comment_date>
    <wp:comment_date_gmt>2010-10-21 22:09:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Many thanks, also didn't occur to be to use horiz. arrow keys.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>103</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1287698956</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>398</wp:comment_id>
    <wp:comment_author><![CDATA[Hacking PuDB: Now an even better Python debugger &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2011/08/08/hacking-pudb-now-an-even-better-python-debugger/</wp:comment_author_url>
    <wp:comment_author_IP>72.233.96.180</wp:comment_author_IP>
    <wp:comment_date>2011-08-08 03:16:14</wp:comment_date>
    <wp:comment_date_gmt>2011-08-08 03:16:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] of this blog may remember last year when I wrote about this awesome visual console Python debugger called PuDB. I suggest you read that post if you [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1312773375</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1312773376.4865";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>362</wp:comment_id>
    <wp:comment_author><![CDATA[Anders Hovmöller]]></wp:comment_author>
    <wp:comment_author_email>boxed@killingar.net</wp:comment_author_email>
    <wp:comment_author_url>http://kodare.net</wp:comment_author_url>
    <wp:comment_author_IP>83.233.37.141</wp:comment_author_IP>
    <wp:comment_date>2011-02-19 23:52:52</wp:comment_date>
    <wp:comment_date_gmt>2011-02-19 23:52:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[PuDB is quite nice and all, but I find it a bit too jarring to jump from TextMate all the way to a text mode program (and is it only for me it blinks every time you step?).

So I got a little carried away and thought I'd code a basic debugger for TextMate. I present to you PythonMate: https://github.com/boxed/PythonMate

It has some rather sharp edges in the current state but I'll continue polishing it up as I need to use it. I would of course appreciate any help a lot! (For example, it could need stop/restart/etc functionality :P )]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1298159573</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1298159573.6338";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>363</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron Meurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>129.138.31.230</wp:comment_author_IP>
    <wp:comment_date>2011-02-20 23:39:22</wp:comment_date>
    <wp:comment_date_gmt>2011-02-20 23:39:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[No, it blinks for me too.  See the third annoyance above.

I don't use TextMate to edit code (I use XCode), and I am always using the terminal to test the code, so having a terminal debugger like PuDB isn't that bad for me.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>362</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1298245164</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1298245164.9275";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>498</wp:comment_id>
    <wp:comment_author><![CDATA[Victor Eijkhout]]></wp:comment_author>
    <wp:comment_author_email>eijkhout@tacc.utexas.edu</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>129.116.126.193</wp:comment_author_IP>
    <wp:comment_date>2012-02-28 17:53:11</wp:comment_date>
    <wp:comment_date_gmt>2012-02-28 17:53:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[How do I invoke these themes? I have whatever pudb install I got from macports and that's about all I know. It works great but it's ugly.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1330451592</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1330451592.5179";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>499</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>129.138.36.166</wp:comment_author_IP>
    <wp:comment_date>2012-02-28 21:20:45</wp:comment_date>
    <wp:comment_date_gmt>2012-02-28 21:20:45</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I think the macports version may be out of date.  Try doing a "pip install pudb", or you can just do "git clone https://github.com/inducer/pudb.git; ./setup.py develop" to run the development version.  Once you've upgraded, it should show you the prefs dialog on the first run, which has the themes.    Or you can press Ctrl-p to bring it up at any time.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>498</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1330464048</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1330464049.3685";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>775</wp:comment_id>
    <wp:comment_author><![CDATA[Tip for debugging SymPy with PuDB &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2013/01/28/tip-for-debugging-sympy-with-pudb/</wp:comment_author_url>
    <wp:comment_author_IP>72.232.112.17</wp:comment_author_IP>
    <wp:comment_date>2013-01-28 00:43:54</wp:comment_date>
    <wp:comment_date_gmt>2013-01-28 00:43:54</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] when I debug SymPy code with PuDB, I create a script that calls the code, then I put [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1359333834</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1359333834.721580028533935546875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>A Weeklog</title>
  <link>http://asmeurersympy.wordpress.com/2010/06/15/a-weeklog/</link>
  <pubDate>Tue, 15 Jun 2010 21:45:22 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=463</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://ondrejcertik.blogspot.com/2010/06/week-may-30-june-4.html">These</a> <a href="http://ondrejcertik.blogspot.com/2010/06/week-june-5-june-11.html">seem</a> <a href="http://haz-tech.blogspot.com/2010/06/plowing-forward.html">to</a> <a href="http://ojensen.wordpress.com/2010/06/15/array-arguments/">be</a> all the rave these days, so I figured, why not jump on the bandwagon:

<code>
Aaron-Meurer:doc aaronmeurer20100615153531(integration$)$git weekreport 
Aaron Meurer (20):
      Fix some bugs in Poly
      Make Poly(sin(x)/x*t, t, domain='EX').clear_denoms() work
      Fix integrate to work correctly with heurisch.py
      Use more efficient gcdexdiophantine() algorithm
      Add support for taking the derivation over the coefficient domain in risch.py
      Add (but do not yet use) splitfactor_sqf() in risch.py
      Add polynomial_reduce() to risch.py
      Add tests for algorithms in risch.py in a new test_risch.py file
      Only allow coercion to larger domains
      Allow coercion from ZZ(a) to ZZ(a, b)
      Fix doctest in new heurisch.py file
      Add residue_reduce()
      Formatting fixes in docstrings in sympy/polys/algebratools.py
      Add includePRS option to resultant functions
      Add permute method to DMP
      Add a test for the includePRS option of resultant()
      Have residue_reduce() make S_i monic
      Rewrite polynomial_reduce() non-recursively
      Add integrate_hypertangent_polynomial()
      Add integrate_nonlinear_no_specials()
</code>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>463</wp:post_id>
  <wp:post_date>2010-06-15 21:45:22</wp:post_date>
  <wp:post_date_gmt>2010-06-15 21:45:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>a-weeklog</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Strange Python Behavior (can someone please explain to me what is going on here?)</title>
  <link>http://asmeurersympy.wordpress.com/2010/06/16/strange-python-behavior-can-someone-please-explain-to-me-what-is-going-on-here/</link>
  <pubDate>Wed, 16 Jun 2010 04:49:06 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=470</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://asmeurersympy.wordpress.com/2009/07/20/modifying-a-list-while-looping-through-it-in-python/">Every once in a while</a>, seemingly really simple Python code does something completely unexpected for me. Look at the following snippet of Python code.  This is run straight from the 2.6.5 interpreter, with no other commands executed.  Do you notice anything strange?

[code language="py"]
$python
Python 2.6.5 (r265:79359, Mar 24 2010, 01:32:55) 
[GCC 4.0.1 (Apple Inc. build 5493)] on darwin
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt;; l = lambda i: a[i]
&gt;&gt;&gt; l
&lt;function at=&quot;&quot; 0x39e7f0=&quot;&quot;&gt;
&gt;&gt;&gt; H = [(1, 2), (3, 4)]
&gt;&gt;&gt; [l(0) + l(1) for a in H]
[3, 7]
[/code]

Did you spot it?  Here is a hint. Running a different but similar session:

[code language="py"]
$python
Python 2.6.5 (r265:79359, Mar 24 2010, 01:32:55) 
[GCC 4.0.1 (Apple Inc. build 5493)] on darwin
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt; l = lambda i: a[i]
&gt;&gt;&gt; l
&lt;function at=&quot;&quot; 0x39e7f0=&quot;&quot;&gt;
&gt;&gt;&gt; l(0)
Traceback (most recent call last):
  File &quot;&quot;, line 1, in 
  File &quot;&quot;, line 1, in 
NameError: global name 'a' is not defined
[/code]

Do you see it now?  I defined the lambda function <code>l</code> in terms of <code>a</code> without defining first defining <code>a</code>!  And furthermore, it just works when <code>a</code> is defined.  This is actually independent of the fact that we are working in a list comprehension, as this continuation of the previous session shows:

[code language="py"]
&gt;&gt;&gt; a = [3, 4, 5]
&gt;&gt;&gt; l(0)
3
[/code]

But I want to expand on the list comprehension example, because there even more bizzare things going on here.  Restarting a new session again:

[code language="py"]
$python
Python 2.6.5 (r265:79359, Mar 24 2010, 01:32:55) 
[GCC 4.0.1 (Apple Inc. build 5493)] on darwin
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt; l = lambda i: a[i]
&gt;&gt;&gt; H = [(1, 2), (3, 4)]
&gt;&gt;&gt; [l(0) + l(1) for a in H]
[3, 7]
&gt;&gt;&gt; (l(0) + l(1) for a in H)
&lt;generator object=&quot;&quot; at=&quot;&quot; 0x3a4350=&quot;&quot;&gt;
&gt;&gt;&gt; list((l(0) + l(1) for a in H))
[7, 7]
[/code]

So, if you are astute and have been using Python for long enough, you should be able to catch what is going on here.  If you don't know, here is a hint (continuation of previous session):

[code language="py"]
&gt;&gt;&gt; a
(3, 4)
[/code]

So, as you may know, in Python 2.6 and earlier, list comprehension index variables "leek" into the local namespace.  The strange thing here is that although the list comprehension would reset it, the generator version does not.  Well, normally, it does do this:

[code language="py"]
&gt;&gt;&gt; x = 1
&gt;&gt;&gt; [x for x in range(10)]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; x
9
&gt;&gt;&gt; del x
&gt;&gt;&gt; list((x for x in range(10)))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; x
Traceback (most recent call last):
  File &quot;&quot;, line 1, in 
NameError: name 'x' is not defined
&gt;&gt;&gt; x = 1
&gt;&gt;&gt; list((x for x in range(10)))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; x
1
[/code]

So the above bit has something to do with the way the <code>lambda</code> function was defined with the <code>a</code>.  By the way, here is what happens with the generator comprehension (is that what these are called?) if <code>a</code> is not defined:

[code language="py"]
&gt;&gt;&gt; del a
&gt;&gt;&gt; list((l(0) + l(1) for a in H))
Traceback (most recent call last):
  File &quot;&quot;, line 1, in 
  File &quot;&quot;, line 1, in 
  File &quot;&quot;, line 1, in 
NameError: global name 'a' is not defined
[/code]

This is how I discovered this.  I had defined a lambda function using an variable that was then passed to a list comprehension that used this variable as the index without realizing it. But then I tried converting this into a generator comprehension to see if it would be faster, and got the above error.  

Finally, since the "feature" of leaking list comprehension loop variables into the local namespace is <a href="http://docs.python.org/release/3.0.1/whatsnew/3.0.html#changed-syntax">going away</a> in Python 3, I expected things to behave at least a little differently in Python 3.  I tried the above in a Python 3.1.2 interpreter and got the following:

[code language="py"]
$python3
Python 3.1.2 (r312:79147, Mar 23 2010, 22:02:05) 
[GCC 4.2.1 (Apple Inc. build 5646) (dot 1)] on darwin
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt; l = lambda i: a[i]
&gt;&gt;&gt; l
&lt;function at=&quot;&quot; 0x100585a68=&quot;&quot;&gt;
&gt;&gt;&gt; H = [(1, 2), (3, 4)]
&gt;&gt;&gt; [l(0) + l(1) for a in H]
Traceback (most recent call last):
  File &quot;&quot;, line 1, in 
  File &quot;&quot;, line 1, in 
  File &quot;&quot;, line 1, in 
NameError: global name 'a' is not defined
&gt;&gt;&gt; list((l(0) + l(1) for a in H))
Traceback (most recent call last):
  File &quot;&quot;, line 1, in 
  File &quot;&quot;, line 1, in 
  File &quot;&quot;, line 1, in 
NameError: global name 'a' is not defined
[/code]

So in Python 3, both the list comprehension and the generator comprehensions act the same, which is not too surprising.  I guess I should recode that piece of code to make it future proof, although this doesn't seem easy at the moment, and it may require converting a one-liner into a six-liner.  If you are interested, the piece of code is <a href="http://github.com/asmeurer/sympy/blob/15c3675ff67be854c12c349ed9034f12bb2f5247/sympy/integrals/risch.py#L297">here</a>.

So can anyone provide any insight into what is going on with that lambda function?  Running it with the <code>-3</code> switch to <code>python2.6</code> didn't give any warnings related to it.  

<strong>Update:</strong> As I noted in a <a href="http://asmeurersympy.wordpress.com/2010/06/16/strange-python-behavior-can-someone-please-explain-to-me-what-is-going-on-here/#comment-121">comment</a>, I figured out how to make this future-proof.  I need to convert it from 

[code language="py"]
def residue_reduce_derivation(H, D, x, t, z):
    lambdafunc = lambda i: i*derivation(a[1], D, x, t).as_basic().subs(z, i)/ \
         a[1].as_basic().subs(z, i)
    return S(sum([RootSum(a[0].as_poly(z), lambdafunc) for a in H]))
[/code]
to
[code language="py"]
def residue_reduce_derivation(H, D, x, t, z):
    return S(sum((RootSum(a[0].as_poly(z), lambda i: i*derivation(a[1], D, x, t).as_basic().subs(z, i)/ \
        a[1].as_basic().subs(z, i)) for a in H)))
[/code]

Thanks to all the commenters for the explanations.  

Also, you may have noticed that I discovered that if you use <tt>&#091;code&#093;</tt> instead of <tt>&#060;code&#062;</tt>, you get these nicer code blocks that <em>actually respect indentation!</em>  Now I just need to figure out how to make them syntax highlight Python code.

<strong>Update 2:</strong> <tt>&#091;code='py'&#093;</tt> colors it!  Sweet!

<strong>Update 3:</strong> I just discovered that SymPy has a <code>Lambda()</code> object that handles this better.  In particular, it pretty prints the code, and is what is already being used for <code>RootSum()</code> in the rational function integrator, at least in Mateusz's polys9.  

[code language="py"]
&gt;&gt;&gt; integrate(1/(x**5 + 1), x)
log(1 + x)/5 + RootSum(625*_t**4 + 125*_t**3 + 25*_t**2 + 5*_t + 1, Lambda(_t, _t*log(x + 5*_t)))                                                   
[/code]

Still, this has been a very good learning experience.  ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>470</wp:post_id>
  <wp:post_date>2010-06-16 04:49:06</wp:post_date>
  <wp:post_date_gmt>2010-06-16 04:49:06</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>strange-python-behavior-can-someone-please-explain-to-me-what-is-going-on-here</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>123</wp:comment_id>
    <wp:comment_author><![CDATA[Stepan]]></wp:comment_author>
    <wp:comment_author_email>stepan@roucka.eu</wp:comment_author_email>
    <wp:comment_author_url>http://www.roucka.eu</wp:comment_author_url>
    <wp:comment_author_IP>195.113.10.83</wp:comment_author_IP>
    <wp:comment_date>2010-06-17 08:07:45</wp:comment_date>
    <wp:comment_date_gmt>2010-06-17 08:07:45</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Oh, now I see what you meant. I think you could still split it in two lines, if you dont mind using lambda twice (untested):

[code language="py"]
def residue_reduce_derivation(H, D, x, t, z):
    lfunc = lambda a, i: i*derivation(a[1], D, x, t).as_basic().subs(z, i)/ \
         a[1].as_basic().subs(z, i)
    return S(sum([RootSum(a[0].as_poly(z), lambda i: lfunc(a, i)) for a in H]))
[/code]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>121</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1276762066</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>116</wp:comment_id>
    <wp:comment_author><![CDATA[willem]]></wp:comment_author>
    <wp:comment_author_email>metawilm@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>92.229.49.150</wp:comment_author_IP>
    <wp:comment_date>2010-06-16 08:08:12</wp:comment_date>
    <wp:comment_date_gmt>2010-06-16 08:08:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The lambda always refers to the value of A in the global (module) scope.

A list comprehension iteration variable used to influence the current (here: module) scope, i.e. [.. for a in ..] would introduce/override variable A. Later on this was fixed, 

But with generator expressions, iteration variables are in a separate scope. Now using dots to ensure the indentation shows up correctly, think of:

.. x = (l(0) + l(1) for a in H)

as:

.. def _generator(_H):
.... for a in _H:
...... yield a
.. x = _generator(H)

and you see the iteration variable A is local to the (hidden) function, and does not influence the global variable.

It seems in Python 3, list comprehensions are implemented similar to generator expressions (so without leaking) except they collect all values in a list instead of yielding them.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1276675693</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>117</wp:comment_id>
    <wp:comment_author><![CDATA[EOL]]></wp:comment_author>
    <wp:comment_author_email>eric.lebigot@normalesup.org</wp:comment_author_email>
    <wp:comment_author_url>http://lebigot.pip.verisignlabs.com/</wp:comment_author_url>
    <wp:comment_author_IP>134.157.7.136</wp:comment_author_IP>
    <wp:comment_date>2010-06-16 09:43:22</wp:comment_date>
    <wp:comment_date_gmt>2010-06-16 09:43:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thank you for sharing!  I found your discussion to be very interesting.  I'm glad that Python 3.1 treats the list comprehension and the "list from generator" in a similar way, with respect to dummy variables.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1276681403</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>118</wp:comment_id>
    <wp:comment_author><![CDATA[Ted Horst]]></wp:comment_author>
    <wp:comment_author_email>ted.horst@earthlink.net</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>184.78.95.191</wp:comment_author_IP>
    <wp:comment_date>2010-06-16 13:45:28</wp:comment_date>
    <wp:comment_date_gmt>2010-06-16 13:45:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA["I defined the lambda function l in terms of a without defining first defining a"

Did you mean to do that, or were you just surprised that it behaved differently in different contexts?  I think its considered bad form to define lambdas that operate on global variables especially if they haven't been defined yet.

Ted]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1276695929</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>119</wp:comment_id>
    <wp:comment_author><![CDATA[Stepan]]></wp:comment_author>
    <wp:comment_author_email>stepan@roucka.eu</wp:comment_author_email>
    <wp:comment_author_url>http://www.roucka.eu</wp:comment_author_url>
    <wp:comment_author_IP>195.113.10.83</wp:comment_author_IP>
    <wp:comment_date>2010-06-16 14:43:44</wp:comment_date>
    <wp:comment_date_gmt>2010-06-16 14:43:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Couldn't you make it "future proof" by adding a parameter to the lambda function?


In [2]: H = [(1, 2), (3, 4)]

In [5]: l = lambda a, i: a[i]

In [6]: [l(a, 0) + l(a, 1) for a in H]
Out[6]: [3, 7]

In [7]: list((l(a, 0) + l(a, 1) for a in H))
Out[7]: [3, 7]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1276699424</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>120</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>68.42.37.143</wp:comment_author_IP>
    <wp:comment_date>2010-06-16 17:12:23</wp:comment_date>
    <wp:comment_date_gmt>2010-06-16 17:12:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[No, it was a complete accident.  I only realized what I had done after the error had popped up and I had looked at it for a bit.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>118</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1276708344</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>121</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>68.42.37.143</wp:comment_author_IP>
    <wp:comment_date>2010-06-16 17:20:46</wp:comment_date>
    <wp:comment_date_gmt>2010-06-16 17:20:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[No.  The problem is that RootSum takes a function of 1 argument (see the link to the actual problem code in the blog post).  

Actually, I just figured out that the way to future proof it is to redue it from a two-liner to a one-liner.  So, for example, this works:

[code language="py"]
&gt;&gt;&gt; list(((lambda i: a[i])(0) + (lambda i:a[i])(1) for a in H))
[3, 7]
[/code]

I had pulled out the lambda function because it made the code a little easier to read, but I guess future compatibility and the ability to use a generator comprehension instead of a list comprehension outweigh that in this case.  

I will update the blog post pretty soon with this.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>119</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1276708848</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>122</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>68.42.37.143</wp:comment_author_IP>
    <wp:comment_date>2010-06-16 17:44:23</wp:comment_date>
    <wp:comment_date_gmt>2010-06-16 17:44:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Ah, of course, that's the reason.  If Python lets you define a function as 

[code language="py"]
def f(x):
    return a*x
[/code]

and just use the <code>a</code> from the outer scope, then <code>lambda i: a*i</code> should work too.  I guess I need to learn a bit more about how Python treats scoping.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>116</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1276710263</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>127</wp:comment_id>
    <wp:comment_author><![CDATA[Matt Curry]]></wp:comment_author>
    <wp:comment_author_email>mattjcurry@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.digitconvert.com</wp:comment_author_url>
    <wp:comment_author_IP>75.140.156.69</wp:comment_author_IP>
    <wp:comment_date>2010-06-20 19:11:58</wp:comment_date>
    <wp:comment_date_gmt>2010-06-20 19:11:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hey I just discovered yours and others' comments on my blog (they were just kind of hidden to me at first...). Anyway, thanks! I'll check into the whitespace errors. Keep on making these epic blog posts of yours.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1277061118</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>365</wp:comment_id>
    <wp:comment_author><![CDATA[True is True is False is True is False &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2011/03/15/true-is-true-is-false-is-true-is-false/</wp:comment_author_url>
    <wp:comment_author_IP>74.200.244.75</wp:comment_author_IP>
    <wp:comment_date>2011-03-15 22:29:23</wp:comment_date>
    <wp:comment_date_gmt>2011-03-15 22:29:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] for another one of my WTF Python blog posts. Yesterday, I randomly typed this in a Python session (it was late at [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1300228165</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1300228166.1508";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>665</wp:comment_id>
    <wp:comment_author><![CDATA[Infinitely nested lists in Python &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2012/09/19/infinitely-nested-lists-in-python/</wp:comment_author_url>
    <wp:comment_author_IP>72.232.113.13</wp:comment_author_IP>
    <wp:comment_date>2012-09-19 04:21:15</wp:comment_date>
    <wp:comment_date_gmt>2012-09-19 04:21:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] of this blog know that I sometimes like to write about some strange, unexpected, and unusual things in Python that I stumble across. This post is another one of [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1348028476.1107399463653564453125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1348028475</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Quick Update</title>
  <link>http://asmeurersympy.wordpress.com/2010/06/26/quick-update/</link>
  <pubDate>Sat, 26 Jun 2010 03:16:52 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=480</guid>
  <description/>
  <content:encoded><![CDATA[I've spend most of this week sitting in a car, so while I have been able to do some work, I haven't had much time to write up a blog post.  So, to comply with <a href="http://groups.google.com/group/sympy/browse_thread/thread/7d7dceb34db45302">Ondrej's rule</a>, here is a quick update.

I have been working my way through Bronstein's book.  I finished the outer algorithmic layer of the implantation.  Basically, the algorithm does polynomials manipulation on the integrand.  It first reduces the integrand into smaller integrals, until it gets to an integral where a subproblem must be solved to solve it.  The subproblem that must be solved differs depending on the type of the integral.  The first one that comes up in Bronstein's text is the Risch Differential Equation, which arises from the integration of exponential functions.  (I will explain all of these thing in more detail in a future blog post).  At this point, the algorithms begin to recursively depend on each other, requiring me to implement more and more algorithms at a time in order for each to work.  To make things worse, a very fundamental set of algorithms are only described in the text, not given in pseudo-code, so I have had to figure those things out.   These are algorithms to determine if a differential extension is a derivative or logarithmic derivative of elements that have already been extended.  Again, I will explain better in a future post, but the idea is that you replace elements in an integrand with dummy variables, but each element has to be transcendental over the previous elements.  So if you have $latex \int (e^x + e^{x^2} + e^{x + x*^2})dx$, and you set $latex t_1 = e^x$ and $latex t_2 = e^{x^2}$ ($latex Dt_1 = t_1$ and $latex Dt_2 = 2xt_2$), then you cannot make $latex t_3 = e^{x + x^2}$ because $latex e^{x + x^2} = t_1t_2$.  The ability to determine if an element is a derivative or a logarithmic derivative of an element of the already build differential extension is important not only for building up the extension for the integrand (basically the preparsing), but also for solving some of the cases of the subproblems such as the Risch Differential Equation problem.

So I am still figuring out some of the details on that one.  The description in the book is pretty good (this is probably the best written math textbook I have ever seen), but I still have had to figure out some of the mathematical details on paper (which is something I enjoy anyway, but it can be more stressful).  Hopefully by the next time I can have some code that is working enough to actually demonstrate solving some complex integrals, (with manual preparsing), and even more excitingly, prove that some non-elementary integrals, such as the classic $latex \int e^{-x^2}dx$, are indeed so.   And I also hope to have some more explanations on how the Risch algorithm works in future posts.  ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>480</wp:post_id>
  <wp:post_date>2010-06-26 03:16:52</wp:post_date>
  <wp:post_date_gmt>2010-06-26 03:16:52</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-update</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>131</wp:comment_id>
    <wp:comment_author><![CDATA[The Risch Algorithm Part 1 &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2010/06/30/the-risch-algorithm-part-1/</wp:comment_author_url>
    <wp:comment_author_IP>76.74.254.65</wp:comment_author_IP>
    <wp:comment_date>2010-06-30 03:43:08</wp:comment_date>
    <wp:comment_date_gmt>2010-06-30 03:43:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] is the preparsing that I alluded to in an earlier post that I have not implemented yet. The reason that I haven&#8217;t implemented it yet is not just [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1277869388</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>The Risch Algorithm: Part 1</title>
  <link>http://asmeurersympy.wordpress.com/2010/06/30/the-risch-algorithm-part-1/</link>
  <pubDate>Wed, 30 Jun 2010 03:43:00 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=494</guid>
  <description/>
  <content:encoded><![CDATA[My work this week isn't very interesting, even insomuch as my work any week is interesting, so this week I have elected to start a series of blog posts about the Risch Algorithm in general.  I will start out with the basics in this post.

Anyone who has taken Calculus knows a handful of heuristics to calculate integrals.  u-substitution, partial fractions, integration by parts, trigonometric substitution, and table integration are a few of the more popular ones.  These are general enough to work for most integrals that are encountered in problems in Physics, Engineering, and so on, as well as most of those generated by solving differential equations from the same fields.  But these fall short in a couple of ways.  First off, they are just heuristics.  If they fail, it does not mean that no integral exists.  This means that they are useless for proving that certain functions, such as $latex e^{-x^2}$ do not have integrals, no matter how hard you try to find them.  Second, they work for only relatively simple functions.  For example, suppose you have a rational function in $latex \log{x}$ and $latex x$.  An example would be $latex \frac{(\log{x})^2 + 2\log{x} + x^2 + 1}{x\log{x} + 2x^3}$.  We are not interested in integrating this function, but rather in finding it back given its derivative, $latex - \frac{1 + 7 x^{2} \log{x} + \log{x} + (\log{x})^2 + 3 x^{2} + 6 x^{2} (\log{x})^2 + (\log{x})^3 + 2 x^{4}}{4 x^{4} \log{x} + x^{2} (\log{x})^2 + 4 x^{6}}$.  The only method I named above that would come even close to being applicable to this integrand is partial fractions.  This requires multivariate partial fraction decomposition (with respect to $latex x$ and $latex \log{x}$), and gives $latex -{\frac {2\,{x}^{2}+1+\log{x} }{{x}^{2}}}+{\frac {-1+8\,{x}^{4}-16\,{x}^{6}-{x}^{2}}{ \left( \log{x} +2\,{x}^{2} \right) ^{2}{x}^{2}}}+{\frac {-3\,{x}^{2}+12\,{x}^{4}-1}{ \left( \log{x} +2\,{x}^{2} \right) {x}^{2}}}$, which brings us no closer to a solution. 

The reason that I started with a function and then computed its derivative was to show how easy it is to come up with a very complicated function that has an elementary anti-derivative.  Therefore, we see that the methods from calculus are not the ones to use if we want an integration algorithm that is complete.  The Risch Integration Algorithm is based on a completely different approach.  At its core lies Liouville's Theorem, which gives us the form of any elementary anti-derivative.   (I wish to point out at this point that heuristics like this are still useful in a computer algebra system such as SymPy as fast preprocessors to the full integration algorithm).


The Risch Algorithm works by doing polynomial manipulations on the integrand, which is entirely deterministic (non-heuristic), and gives us the power of all the theorems of algebra, allowing us to actually prove that anti-derivatives cannot exist when they don't.  To start off, we have to look at derivations.  As I said, everything with the Risch Algorithm is looked at algebraically (as opposed to analytically).  The first thing to look at is the derivative itself.  We define a derivation as any function $latex D$ on a ring $latex R$ that satisfies two properties:

1. $latex D(a + b) = Da + Db$ (Sum Rule),
2. $latex D(ab) = aDb + bDa$ (Product Rule)

for any $latex a, b \in R$.  Furthermore, define the set of constant elements as $latex Const_D(R) = \{a \in R\textrm{ such that }Da = 0\}$.  From just these two rules, you can prove all the rules from calculus such as the power rule and the quotient rule.  Defining things algebraically lets us avoid analytic problems, such as discontinuities and the need to prove convergence all the time.  Another problem from analysis is the multivalue nature of certain functions, namely the natural logarithm.  We get around this by defining $latex \log{a}$ as the unique function satisfying $latex D\log{a} = \frac{Da}{a}$, for $latex a \neq 0$.   From this definition we can prove the famous logarithmic identities $latex \log{ab} = \log{a} + \log{b}$ and $latex \log{a^n} = n\log{a}$ for logarithmic derivatives, again using only the two rules for a derivation given above.  For example, $latex D\log{ab}=\frac{Dab}{ab}=\frac{aDb + bDa}{ab} = \frac{bDa}{ab} + \frac{aDb}{ab} = $$latex \frac{Da}{a} + \frac{Db}{b}=D\log{a} + D\log{b}=D(\log{a} + \log{b})$.  

The above definition for the natural logarithm gives the first insight into how the integration algorithm works.  We define transcendental functions in terms of their derivatives.  So if $latex t = e^x$, then $latex Dt/t = 1$.  We can define all of the trigonometric functions in terms of $latex e^x$ and $latex \log{x}$ if we use $latex \sqrt{-1}$, but we can also avoid this.  For example, if $latex t = \tan{x}$, then $latex Dt = 1 + t^2$ because $latex \frac{d}{dx}\tan{x} = \sec^2{x} = 1 + \tan^2{x}$.  

We say that $latex t\in K$ is a <em>monomial</em> over the field $latex k$ with respect to a derivation $latex D$ if it satisfies

1. $latex t$ is transcendental over $latex k$,
2. $latex D[t]\in k[t]$.

The first condition is necessary because the we are only going to deal with the trancenental version of the Risch Algorithm (the algebraic case is solved too, but the solution method is quite different, and I am not implementing it this summer).  The second condition just says that the derivative of t is a polynomial in t and a rational function in x.  The functions I mentioned above all satisfy these properties for $latex K = \mathbb{Q}$.  Theorems in analysis show that $latex \log{x}$, $latex e^x$, and $latex \tan{x}$ are all transcendental over $latex \mathbb{Q}[x]$.  This is actually the only use of analysis that we make in the integration algorithm.  Also, we see that if $latex t_1=\log{x}$, $latex t_2=e^x$, and $latex t_3=\tan{x}$, then $latex Dt_1=\frac{1}{x}$, $latex Dt_2=t_2$, and $latex Dt_3=1 + t_3^2$, which are all polynomials in their respective $latex t_i$ and rational functions in $latex x$.  In the algorithm, $latex K$ is actually a tower of monomial extensions of $latex \mathbb{Q}$, so $latex t_n$ is a monomial over $latex \mathbb{Q}(x, t_1, \dots, t_{n-1})$.   This allows us to work with functions like $latex e^{\tan{x}}$.  We can't make $latex t=e^{\tan{x}}$ directly because $latex \frac{d}{dx}e^{\tan{x}} = (1 + \tan^2{x})e^{\tan{x}}$ is not a polynomial in $latex t$ (it also contains $latex \tan{x}$) .  But if we let $latex t_1$ be such that $latex Dt_1=1 + t_1^2$, i.e., $latex t_1=\tan{x}$, then we can let $latex t_2$ be such that $latex Dt_2=(1 + t_1^2)t_2$, i.e., $latex t_2=e^{\tan{x}}$.  Remember that the $latex t_i$ are all "functions" of x, but there is no need to write $latex t=t(x)$ as long as we remember that $latex Dt\neq 0$, i.e., $latex t\not \in Const_D(K)$.  This is another advantage of using algebraic over analytic methods; it allows us to reduce an integral down to a rational function in the "symbols" $latex x$ and $latex t_1, t_2, \dots, t_n$.  By convention, we make the first extension $latex t_0$ such that $latex Dt_0=1$, i.e., $latex t_0=x$.  I will just call it $latex x$ here instead of $latex t_0$, to avoid confusion.  

This is the preparsing that I alluded to in an <a href="http://asmeurersympy.wordpress.com/2010/06/26/quick-update/">earlier post</a> that I have not implemented yet.  The reason that I haven't implemented it yet is not just because I haven't gotten around to it.  We have to be careful when we build up the extension that each element is indeed transcendental over the already built-up field $latex k$.  For example, although it appears transcendental, the function $latex e^{\frac{1}{2}\log{(1 + x^2)}}$ is really algebraic because it equals $latex \sqrt{1 + x^2}$.  There are additional requirements, such that each extension is not the derivative of logarithmic derivative of an element of $latex k$ (see also the example I gave in the previous post).  This is the part that I was talking about in my <a href="http://asmeurersympy.wordpress.com/2010/06/26/quick-update/">previous post</a> that is not written out as much as the other algorithms in Bronstein's book.  So this is algorithmically solved, just like the rest of the Algorithm, but it is non-trivial and may end up being the hardest part of the algorithm for me to implement, just because it will probably require the most figuring out on my part.  

So we can see that we can convert a transcendental integral, such as the one above, into a rational function in x and monomial extensions $latex t_1, t_2, \dots, t_n$.  For example, the above integrand would become $latex - \frac{1 + t + t^{2} + 3 x^{2} + 6 t^{2} x^{2} + 7 t x^{2} + t^{3} + 2 x^{4}}{t^{2} x^{2} + 4 t x^{4} + 4 x^{6}}$.  We then perform certain polynomial manipulations on this integrand, using the fact that $latex Dx=1$ and $latex Dt=\frac{1}{x}$.  For the transcendental case of the Risch Algorithm, this is similar to the rational function integration that I outlined in <a href="http://asmeurersympy.wordpress.com/2010/06/11/integration-of-rational-functions/">this post</a>, and has Liouville's Theorem at its core.  This is where I will start off next time.  ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>494</wp:post_id>
  <wp:post_date>2010-06-30 03:43:00</wp:post_date>
  <wp:post_date_gmt>2010-06-30 03:43:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>the-risch-algorithm-part-1</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>141</wp:comment_id>
    <wp:comment_author><![CDATA[Integration of exponential functions &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2010/07/12/integration-of-exponential-functions/</wp:comment_author_url>
    <wp:comment_author_IP>76.74.255.64</wp:comment_author_IP>
    <wp:comment_date>2010-07-12 06:22:16</wp:comment_date>
    <wp:comment_date_gmt>2010-07-12 06:22:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] driving home. But that&#8217;s not my excuse. I was on vacation the week before, when I wrote up my lengthy blog post on the Risch Algorithm. My excuse is that I wanted to finish up my integrate_hyperexponential() function before I posted, [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1278915737</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>150</wp:comment_id>
    <wp:comment_author><![CDATA[The Risch Algorithm: Part 2, Elementary Functions &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2010/07/24/the-risch-algorithm-part-2-elementary-functions/</wp:comment_author_url>
    <wp:comment_author_IP>72.233.96.151</wp:comment_author_IP>
    <wp:comment_date>2010-07-24 03:33:01</wp:comment_date>
    <wp:comment_date_gmt>2010-07-24 03:33:01</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Risch Algorithm: Part 2, Elementary&nbsp;Functions  In Part 1 of this series of blog posts, I gave what I believed to be the prerequisites to understanding the [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1279942382</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>186</wp:comment_id>
    <wp:comment_author><![CDATA[The Risch Algorithm: Part 3, Liouville&#8217;s Theorem &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2010/08/14/the-risch-algorithm-part-3-liouvilles-theorem/</wp:comment_author_url>
    <wp:comment_author_IP>76.74.254.66</wp:comment_author_IP>
    <wp:comment_date>2010-08-14 02:55:28</wp:comment_date>
    <wp:comment_date_gmt>2010-08-14 02:55:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] I would produce another one of my Risch Algorithm blog posts. It is recommended that you read parts 1 and 2 first, as well as my post on rational function integration, which could be considered part [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1281754529</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>245</wp:comment_id>
    <wp:comment_author><![CDATA[2010 in review &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2011/01/02/2010-in-review/</wp:comment_author_url>
    <wp:comment_author_IP>72.233.69.84</wp:comment_author_IP>
    <wp:comment_date>2011-01-02 23:07:11</wp:comment_date>
    <wp:comment_date_gmt>2011-01-02 23:07:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] The busiest day of the year was July 4th with 103 views. The most popular post that day was The Risch Algorithm: Part 1. [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1294009631</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1294009631.5329";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>378</wp:comment_id>
    <wp:comment_author><![CDATA[Update for the Beginning of the Summer &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2011/05/26/update-for-the-beginning-of-the-summer/</wp:comment_author_url>
    <wp:comment_author_IP>76.74.254.93</wp:comment_author_IP>
    <wp:comment_date>2011-05-26 05:42:05</wp:comment_date>
    <wp:comment_date_gmt>2011-05-26 05:42:05</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] that week. Others will be continuations of my Risch Algorithm series of blog posts (see parts 0, 1, 2, and [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1306388526</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1306388526.7165";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Integration of exponential functions</title>
  <link>http://asmeurersympy.wordpress.com/2010/07/12/integration-of-exponential-functions/</link>
  <pubDate>Mon, 12 Jul 2010 06:22:06 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=540</guid>
  <description/>
  <content:encoded><![CDATA[So for the first time this summer, I missed my blogging deadline.  I have been on vacation for the past few weeks, and have spent a good bit of the last week in the car, driving home. But that's not my excuse.  I was on vacation the week before, when I wrote up my <a href="http://asmeurersympy.wordpress.com/2010/06/30/the-risch-algorithm-part-1/">lengthy blog post on the Risch Algorithm</a>.  My excuse is that I wanted to finish up my <code>integrate_hyperexponential()</code> function before I posted, so I could write about it.  Well, I finished it on Thursday (today is Sunday, the post was due Friday), but I ran into unexpected bugs (imagine that) that has postponed it actually working until now. I also ended up doing API changes 3 different times (they are basically incrementally all one change, from supporting only one extension to properly supporting multiple extensions.  Look for long commits in my recent commit history in my branch if you are interested).  

So here is the function.  It integrates exponential functions.  You still have to manually create the differential extension, as before.  Here are some examples.  You can try them in my <a href="http://github.com/asmeurer/sympy/tree/integration2">integration2</a> branch (I have rebased over Mateusz's latest polys9update.  The latest branch is always integration<code>n</code>, where <code>n</code> is the largest integer available).  

<strong>Hover over the code and click on the left-most, "view source" icon (a paper icon with <tt>&#060; &#062;</tt> over it) to view without breaks.  Opens in a new window.</strong>
[code language="py"]
In [1]: from sympy.integrals.risch import *

In [2]: var('t1, t')
Out[2]: (t₁, t)

In [3]: r = exp(2*tan(x))*tan(x) + tan(x) + exp(tan(x))

In [4]: r
Out[4]: 
 2⋅tan(x)                    tan(x)
ℯ        ⋅tan(x) + tan(x) + ℯ      

In [5]: rd = r.diff(x)

In [6]: rd
Out[6]: 
    ⎛         2   ⎞  2⋅tan(x)             2      ⎛       2   ⎞  2⋅tan(x)   ⎛       2   ⎞  tan(x)
1 + ⎝2 + 2⋅tan (x)⎠⋅ℯ        ⋅tan(x) + tan (x) + ⎝1 + tan (x)⎠⋅ℯ         + ⎝1 + tan (x)⎠⋅ℯ      

In [7]: a, d = map(lambda i: Poly(i, t), rd.subs(tan(x), t1).subs(exp(t1), t).as_numer_denom()) # Manually create the extension

In [8]: a
Out[8]: Poly((1 + 2*t1 + t1**2 + 2*t1**3)*t**2 + (1 + t1**2)*t + 1 + t1**2, t, domain='ZZ[t1]')

In [9]: d
Out[9]: Poly(1, t, domain='ZZ')

In [10]: integrate_hyperexponential(a, d, [Poly(1, x), Poly(1 + t1**2, t1), Poly((1 + t1**2)*t, t)], [x, t1, t], [lambda x: exp(tan(x)), tan])

Out[10]: 
⎛                   ⌠                                 ⎞
⎜ 2⋅tan(x)          ⎮ ⎛       2   ⎞       tan(x)      ⎟
⎜ℯ        ⋅tan(x) + ⎮ ⎝1 + tan (x)⎠ dx + ℯ      , True⎟
⎝                   ⌡                                 ⎠
[/code]

We have to manually build up the differential extension (<code>[7]</code>).  The first element is $latex x$, which is already there.  Next, we add $latex t_1 = \tan{x}$, and finally $latex t = e^{\tan{x}} = e^{t_1}$.  The third argument of <code>integrate_hyperexponential()</code> is what gives these variables their identities: their derivatives.  The fourth argument is the list of the extension symbols, and the last argument is a list of the functions for which the symbols stand for, in reverse order (because we have to back substitute in the solution in reverse order).  

The unevaluated Integral in the solution is due to the recursive nature of the Risch algorithm.  Eventually, an outer function in the algorithm will recursively integrate until it reaches the ground field, $latex \mathbb{Q}$.  It will also do the proper preparsing automatically as well.  The second element of the solution, <code>True</code>, indicates that the integral is elementary, and thus the given solution is the complete integral of the original integrand, which we can see ($latex \int (1 + \tan^2{x})dx=\tan{x}$).  

Another example:

[code language="py"]

In [1]: from sympy.integrals.risch import *

In [2]: var('t')
Out[2]: (t,)

In [3]: rd = exp(-x**2)

In [4]: rd
Out[4]: 
   2
 -x 
ℯ   

In [5]: a, d = map(lambda i: Poly(i, t), rd.subs(exp(x**2), t).as_numer_denom())

In [6]: a
Out[6]: Poly(1, t, domain='ZZ')

In [7]: d
Out[7]: Poly(t, t, domain='ZZ')

In [8]: integrate_hyperexponential(a, d, [Poly(1, x), Poly(2*x*t, t)], [x, t], [lambda x: exp(x**2)])

Out[8]: (0, False)

[/code]

Here the second argument of the solution is <code>False</code>, which indicates that the algorithm has proven that the integral of $latex e^{-x^2}$ is not elementary!   The first argument 0 indicates that actually it is the integral of $latex e^{-x^2} - \frac{d}{dx}(0)$ that is not elementary, i.e., the Risch algorithm will reduce an integrand into an integrated function part and non-elementary part.  For example:

[code language="py"]
In [1]: from sympy.integrals.risch import *

In [2]: var('t1, t')
Out[2]: (t₁, t)

In [3]: rd = exp(x)/tan(x) + exp(x)/(1 + exp(x))

In [4]: rd
Out[4]: 
   x        x  
  ℯ        ℯ   
────── + ──────
     x   tan(x)
1 + ℯ          

In [5]: a, d = map(lambda i: Poly(i, t), rd.subs(exp(x), t).subs(tan(x), t1).as_numer_denom())

In [6]: a
Out[6]: Poly(t**2 + (1 + t1)*t, t, domain='ZZ[t1]')

In [7]: d
Out[7]: Poly(t1*t + t1, t, domain='ZZ[t1]')

In [8]: integrate_hyperexponential(a, d, [Poly(1, x), Poly(1 + t1**2, t1), Poly(t, t)], [x, t1, t], [exp, tan])
Out[8]: 
⎛   ⎛     x⎞       ⎞
⎝log⎝1 + ℯ ⎠, False⎠

[/code]

This indicates that the integral of $latex (\frac{e^x}{\tan{x}} + \frac{e^x}{1 + e^x}) - \frac{d}{dx}(\log{(1 + e^x)}) = \frac{e^x}{\tan{x}}$ is not elementary.  That is one advantage that the new algorithm will have over the present one.  Currently, the present algorithm just returns an unevaluated Integral for the above <code>rd</code>, but the new one will be able to return $latex \log{(1 + e^x)} + \int{\frac{e^x}{\tan{x}}dx}$.  It will be able to do this even if rd were rewritten as $latex \frac{e^x \tan{x} + e^x + e^{2x}}{e^x \tan{x} + \tan{x}}$ (notice that this is exactly what <code>.as_numer_denom()</code> is doing anyway in <code>[5]</code>, as you can see in <code>[6]</code> and <code>[7]</code>).  Furthermore, it will have actually <em>proven</em> that the remaining $latex \int{\frac{e^x}{\tan{x}}dx}$ is non-elementary.  I plan on having some kind of marker in the pretty printed unevaluated <code>Integral</code> to indicate this.  Suggestions on what this should be are welcome.  

Finally, the full algorithm appears to be faster (probably asymptotically faster) than the current implementation:

[code language="py"]
In [1]: from sympy.integrals.risch import *

In [2]: var('t1, t')
Out[2]: (t₁, t)

In [3]: rd = exp(x)*x**4

In [4]: a, d = map(lambda i: Poly(i, t), rd.subs(exp(x), t).as_numer_denom())

In [5]: integrate_hyperexponential(a, d, [Poly(1, x), Poly(t, t)], [x, t], [lambda x: exp(x)])
Out[5]: 
⎛    x    4  x         x      3  x       2  x      ⎞
⎝24⋅ℯ  + x ⋅ℯ  - 24⋅x⋅ℯ  - 4⋅x ⋅ℯ  + 12⋅x ⋅ℯ , True⎠

In [6]: %timeit integrate_hyperexponential(a, d, [Poly(1, x), Poly(t, t)], [x, t], [exp])
10 loops, best of 3: 28 ms per loop

In [7]: integrate(rd, x)
Out[7]: 
    x    4  x         x      3  x       2  x
24⋅ℯ  + x ⋅ℯ  - 24⋅x⋅ℯ  - 4⋅x ⋅ℯ  + 12⋅x ⋅ℯ 

In [8]: %timeit integrate(rd, x)
1 loops, best of 3: 218 ms per loop

[/code]

Of course, keep in mind that I am timing what will be an internal function against a full function.  But if you increase the exponent on x, you find that there is no way the addition of preparsing time (which shouldn't be affected by such a change) will cause it to become as slow as the current <code>integrate()</code>.  Like I said, I am pretty sure that it is asymptotic.  For example:

[code language="py"]
In [1]: from sympy.integrals.risch import *

In [2]: var('t1, t')
Out[2]: (t₁, t)

In [3]: rd = exp(x)*x**10

In [4]: a, d = map(lambda i: Poly(i, t), rd.subs(exp(x), t).as_numer_denom())

In [5]: integrate_hyperexponential(a, d, [Poly(1, x), Poly(t, t)], [x, t], [lambda x: exp(x)])
Out[5]: 
⎛         x    10  x              x           3  x          5  x        7  x       9  x       8  x         6  x           4  x            2  x      ⎞
⎝3628800⋅ℯ  + x  ⋅ℯ  - 3628800⋅x⋅ℯ  - 604800⋅x ⋅ℯ  - 30240⋅x ⋅ℯ  - 720⋅x ⋅ℯ  - 10⋅x ⋅ℯ  + 90⋅x ⋅ℯ  + 5040⋅x ⋅ℯ  + 151200⋅x ⋅ℯ  + 1814400⋅x ⋅ℯ , True⎠

In [6]: %timeit integrate_hyperexponential(a, d, [Poly(1, x), Poly(t, t)], [x, t], [exp])
10 loops, best of 3: 42 ms per loop

In [7]: integrate(rd, x)
Out[7]: 
         x    10  x              x           3  x          5  x        7  x       9  x       8  x         6  x           4  x            2  x
3628800⋅ℯ  + x  ⋅ℯ  - 3628800⋅x⋅ℯ  - 604800⋅x ⋅ℯ  - 30240⋅x ⋅ℯ  - 720⋅x ⋅ℯ  - 10⋅x ⋅ℯ  + 90⋅x ⋅ℯ  + 5040⋅x ⋅ℯ  + 151200⋅x ⋅ℯ  + 1814400⋅x ⋅ℯ 

In [8]: %timeit integrate(rd, x)
1 loops, best of 3: 2.78 s per loop
[/code]

There is one thing I should mention.  I haven't implemented all the cases in <code>rischDE()</code>, which is the subproblem for exponential functions (more on this in a future "The Risch Algorithm" post).  So some integrals will fail with a <code>NotImplementedError</code>, indicating that there is a function that I still need to implement to solve the integral:

[code language="py"]
In [1]: from sympy.integrals.risch import *

In [2]: var('t1, t')
Out[2]: (t₁, t)

In [3]: rd = (exp(x) - x*exp(2*x)*tan(x))/tan(x)

In [4]: a, d = map(lambda i: Poly(i, t), rd.subs(exp(x), t).subs(tan(x), t1).as_numer_denom())

In [5]: a
Out[5]: Poly(-t1*x*t**2 + t, t, domain='ZZ[x,t1]')

In [6]: d
Out[6]: Poly(t1, t, domain='ZZ[t1]')

In [7]: integrate_hyperexponential(a, d, [Poly(1, x), Poly(1 + t1**2, t1), Poly(t, t)], [x, t1, t], [exp, tan])
---------------------------------------------------------------------------
...
NotImplementedError: The ability to solve the parametric logarithmic derivative problem is required to solve this RDE
[/code]

So feel free to give this a try and let me know what you think.  You will have to do the preparsing as I have done above, which means that you also have to be careful that any extension that you make is not the derivative or logarithmic derivative of an element of the field you have already built up.  You also cannot use algebraic functions, as I mentioned before, including things like $latex e^\frac{\log{x}}{2}$ (functions like these are called the logarithmic derivatives of k(t)-radicals, which I will also discuss in a future "The Risch Algorithm" post).  If you just use simple extensions like <code>t1 = tan(x);t=exp(x)</code> like I have above, you won't need to worry about this.  Each derivative Poly should be in the variable that it is the derivative of (e.g., start with <code>Poly(1, x)</code>, then add <code>Poly(1 + t1**2, t1)</code>, <code>Poly(t2*(1 + t1**2), t2)</code>, etc.).  Everything else should be a Poly in <code>t</code>, the last element of the extension.  And in cause you didn't get it, the last extension must be an exponential function.  

Also, I didn't have to do it in any of the above examples, but the first and second arguments to <code>integrate_hyperexponential()</code> <em>must</em> be canceled (<code>a, d = a.cancel(d, include=True)</code> will do this for you), or you will get a wrong result!  I spent a good day of debugging until I figured this out.  The existence of other bugs didn't help.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>540</wp:post_id>
  <wp:post_date>2010-07-12 06:22:06</wp:post_date>
  <wp:post_date_gmt>2010-07-12 06:22:06</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>integration-of-exponential-functions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>161</wp:comment_id>
    <wp:comment_author><![CDATA[Integration of primitive functions &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2010/07/31/integration-of-primitive-functions/</wp:comment_author_url>
    <wp:comment_author_IP>76.74.248.141</wp:comment_author_IP>
    <wp:comment_date>2010-07-31 06:44:39</wp:comment_date>
    <wp:comment_date_gmt>2010-07-31 06:44:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] this past week, I had another break through in my project. The first break through, as you may recall, was the completion of the integrate_hyperexponential() function, which allowed [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1280558680</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>143</wp:comment_id>
    <wp:comment_author><![CDATA[A hard week &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2010/07/17/a-hard-week/</wp:comment_author_url>
    <wp:comment_author_IP>72.233.96.150</wp:comment_author_IP>
    <wp:comment_date>2010-07-17 04:38:26</wp:comment_date>
    <wp:comment_date_gmt>2010-07-17 04:38:26</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] hard&nbsp;week  After last week&#8217;s breakthrough, work this week has been very slow. I started working on the Parametric Risch Differential Equation [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1279341506</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>173</wp:comment_id>
    <wp:comment_author><![CDATA[Prototype risch_integrate() function ready for testing! &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2010/08/05/prototype-risch_integrate-function-ready-for-testing/</wp:comment_author_url>
    <wp:comment_author_IP>66.135.48.163</wp:comment_author_IP>
    <wp:comment_date>2010-08-05 22:30:23</wp:comment_date>
    <wp:comment_date_gmt>2010-08-05 22:30:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] available at my integration3 branch. Unlike the inner level functions I have showcased in previous blog posts, this function does not require you to do substitution for dummy variables and manually create a [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1281047426</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>248</wp:comment_id>
    <wp:comment_author><![CDATA[2010 in review &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2011/01/02/2010-in-review/</wp:comment_author_url>
    <wp:comment_author_IP>72.233.69.84</wp:comment_author_IP>
    <wp:comment_date>2011-01-02 23:07:20</wp:comment_date>
    <wp:comment_date_gmt>2011-01-02 23:07:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Integration of exponential functions July 20103 comments  5 [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1294009640</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1294009640.5347";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>A hard week</title>
  <link>http://asmeurersympy.wordpress.com/2010/07/17/a-hard-week/</link>
  <pubDate>Sat, 17 Jul 2010 04:38:22 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=592</guid>
  <description/>
  <content:encoded><![CDATA[After last week's <a href="http://asmeurersympy.wordpress.com/2010/07/12/integration-of-exponential-functions/">breakthrough</a>, work this week has been very slow.  I started working on the Parametric Risch Differential Equation Problem, which is almost identical to the Risch Differential Equation Problem in how it is solved, except there are a few extra steps.  Unfortunately, because it is so similar, Bronstein breezes through the description.  This is fine for the parts that are the same, but he is a little unclear on how some of the new parts fit in.  Also, his pseudocode has a line more or less saying 

[code]
if r1 = … = rn = 0 then
    N = -1
else
    N = max(deg(r1), …, deg(rn))

for i from 0 to N
    for j from 1 to m
        Mij = coefficient(rj, t^i)

[/code]

where M is a matrix.  It is not very clear what this is supposed to mean in the case where N = -1.  Obviously, you can't have a a matrix with negative dimensions.  Clearly, this means that this particular function doesn't apply somehow in this case, but I am not really even sure where it fits in to the whole algorithm at this point in reading.  After reading a few more pages in, it gives a few hints here and there on how it is to be used, but never is it explicitly shown, in pseudocode or otherwise.  So for now, I think my best bet is to read ahead and get a fuller understanding of the complete function before I try implementing anything (this is what I had been doing before, but I caught up to myself).  

Also, on an unrelated note, I just found out today that I passed my <a href="http://socghop.appspot.com/document/show/gsoc_program/google/gsoc2010/faqs#evaluations">Google Summer of Code midterm evaluation</a>.  This means that I will receive half of my stipend for the program (the other half comes after passing the final evaluation at the end of the summer), and that I can continue working on my project in the program.  

EDIT:

Later in the text, it runs through an example and says "… $latex dc = -1$, hence M and A are 0 by 0 matrices."  So obviously, that is what was meant.  ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>592</wp:post_id>
  <wp:post_date>2010-07-17 04:38:22</wp:post_date>
  <wp:post_date_gmt>2010-07-17 04:38:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>a-hard-week</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>The Risch Algorithm: Part 2, Elementary Functions</title>
  <link>http://asmeurersympy.wordpress.com/2010/07/24/the-risch-algorithm-part-2-elementary-functions/</link>
  <pubDate>Sat, 24 Jul 2010 03:32:57 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=600</guid>
  <description/>
  <content:encoded><![CDATA[In <a href="http://asmeurersympy.wordpress.com/2010/06/30/the-risch-algorithm-part-1/">Part 1</a> of this series of blog posts, I gave what I believed to be the prerequisites to understanding the mathematics behind the Risch Algorithm (aside from a basic understanding of derivatives and integrals from calculus).  In this post, I will elaborate on what is meant by "elementary function," a term that is thrown around a lot when talking about Risch integration.

The usual definition of elementary function given in calculus is any function that is a constant, a polynomial, an exponential ($latex e^x$, $latex 2^x$), a logarithm ($latex \ln({x})$, $latex \log_{10}({x})$), one of the standard trig functions or their inverses (sin, cos, tan, arcsin, arccos, arctan, etc.), and any combination of these functions via addition, subtraction, multiplication, division, taking powers, and composition.  Thus, even a function as crazy as <a href="http://asmeurersympy.files.wordpress.com/2010/07/crazy-function.png"><img src="http://asmeurersympy.files.wordpress.com/2010/07/crazy-function.png" alt="" title="crazy function" width="193" height="41" class="alignnone size-full wp-image-632" /></a> is elementary, by this definition.  

But for the rigorous definition of an elementary function, we must take into consideration what field we are working over.  Before I get into that, I need some definitions.  Suppose that $latex k$ is the field we are working over.  You can imagine that $latex k=\mathbb{Q}(x)$, the field of rational functions in x with rational number coefficients.  As with the previous post, imagine $latex t$ as a function, for example, $latex t = f(x)$.  Let $latex K$ be a differential extension of $latex k$.  We have not defined this, but it basically means that our derivation $latex D$ works the same in $latex K$ as it does in $latex k$.  You can imagine here that $latex K=k[t]$.  

We say that $latex t \in K$ is a <strong>primitive</strong> over $latex k$ if $latex Dt \in k$.  In other words, the derivative of $latex t$ is does not contain $latex t$, only elements of $latex k$.  Obviously, by the definition of a derivation (see the <a href="http://asmeurersympy.wordpress.com/2010/06/30/the-risch-algorithm-part-1/">last post</a> in the series), any element of $latex k$ is a primitive over $latex K$, because the derivative of any element of a field is again an element of that field (you can see this by the definition of a derivation, also given in the last post).  But also if $latex t=log(a)$ for some $latex a \in k$, then $latex t$ is a primitive over $latex k$, because $latex Dt=\frac{Da}{a}\in k$.  

We say that $latex t \in K^*$ is a <strong>hyperexponential</strong> over $latex k$ if $latex \frac{Dt}{t}\in k$.  Written another way, $latex Dt=at$ for some $latex a\in k$.  We know from calculus that the functions that satisfy differential equations of the type $latex \frac{dy}{dx}=ay$ are exactly the exponential functions, i.e., $latex y=e^{\int{a\ dx}}$.  

The last class of functions that needs to be considered is <strong><a href="http://en.wikipedia.org/wiki/Algebraic_function">algebraic functions</a></strong>.  I will not go into depth on algebraic functions, because my work this summer is only on integrating purely transcendental functions.  Therefore, the only concern we shall have with algebraic functions in relation to the integration algorithm is to make sure that whatever function we are integrating is <em>not</em> algebraic, because the transcendental algorithms will not be valid if they are.  Hopefully in a future post I will be able to discuss the Risch Structure Theorems, which give necessary and sufficient conditions for determing if a Liouvillian function (see next paragraph) is algebraic.  

Now, we say that a function $latex t \in K$ is <strong>Liouvillian</strong> over $latex k$ if $latex t$ is algebraic, a primitive, or a hyperexponential over $latex k$.  For $latex t\in K$ to be a <strong>Liouvillian monomial</strong> over $latex k$, we have the additional condition that $latex \mathrm{Const}(k) = \mathrm{Const}(k(t))$. This just means that we cannot consider something like $latex \log({2})$ over $latex \mathbb{Q}$ as a Liouvillian monomial.  Otherwise (I believe) we could run into undecidability problems.  

We call $latex t \in K$ a <strong>logarithm</strong> over $latex k$ if $latex Dt=\frac{Db}{b}$ for some $latex b \in k^*$, i.e., $latex t=\log({b})$.  We call $latex t \in K^*$ an <strong>exponential</strong> over $latex k$ if $latex \frac{Dt}{t}=Db$ (or $latex Dt=tDb$) for some $latex b \in k$, i.e., $latex t=e^b$.  Note the difference between an <em>exponential</em> monomial and a <em>hyperexponential</em> monomial.  

We can finally give the rigorous definition of an elementary extension.  $latex K$ is an <strong>elementary extension</strong> of $latex k$ if there are $latex t_1, \dots, t_n \in K$ such that $latex K=k(t_1,\dots,t_n)$ and $latex t_i$ is elementary over $latex k(t_1, \dots, t_{i-1})$ for all $latex i \in \{1,\dots,n\}$.  An <strong>elementary function </strong> is any element of an elementary extension of $latex \mathbb{C}(x)$ with the derivation $latex D=\frac{d}{dx}$.  A function $latex f\in k$ has an <strong>elementary integral</strong> over $latex k$ if there exists an elementary extension $latex K$ of $latex k$ and $latex g\in K$ such that $latex Dg=f$, i.e., $latex f=\int{g}$.  

Usually, we start with $latex \mathbb{Q}(x)$, the field of rational functions in x with rational number coefficients. We then build up an elementary extension one function at a time, with each function either being a logarithm or exponential of what we have already built up, or algebraic over it.  As I noted above, we will ignore algebraic functions here.  We generally start with $latex \mathbb{Q}$ because it is computable (important problems such as the zero equivalence problem or the problem of determining certain field isomorphisms are decidable), but the above definition lets us start with any subfield of $latex \mathbb{C}$.  

Now you may be wondering: we've covered algebraic functions, exponentials and logarithms, and obviously rational functions are elements of $latex \mathbb{Q}(x)$, but what about trigonometric functions?  Well, from a theoretical stand point, we can make our lives easier by noticing that all the common trigonometric functions can be represented as exponentials and logarithms over $latex \mathbb{Q}(i)$.  For example, $latex \cos{x} = \frac{e^{ix} + e^{-ix}}{2}$.  You can see <a href="http://en.wikipedia.org/wiki/Trig_identities#Exponential_definitions">here</a> that all the common trig functions can be represented as complex exponentials or logarithms like this.  However, from an algorithmic standpoint, we don't want do convert all trig expressions into complex exponentials and logarithms in order to integrate them.  For one thing, our final result will be in terms of complex exponentials and logarithms, not the original functions we started with, and converting them back may or may not be an easy thing to do.  Also, aside from the fact that we have different functions than we were expecting, we also will end up with an answer containing $latex \sqrt{-1}$, even if our original integrand did not.  

Fortunately, the integrating tangents directly is a solved problem, just like integrating algebraic, exponential, or logarithmic functions is solved.  We can't integrate functions like $latex \sin{x}$ or $latex \cos{x}$ directly as monomials like we can with $latex \tan{x}$ or $latex e^x$, because the derivatives of sin and cos are not polynomials in their respective selves with coefficients in $latex \mathbb{C}(x)$.  However, we can use a trick or two to integrate them.  One way is to rewrite $latex \cos{x}=\frac{1 - \tan^2{\frac{x}{2}}}{1 + \tan^2{\frac{x}{2}}}$ and proceed to integrate it as a tangent.  Another alternative is to write $latex \cos{x}=\frac{1}{\sec{x}}=\sqrt{\frac{1}{\sec^2{x}}}=\sqrt{\frac{1}{\tan^2{x} + 1}}$.  This function is algebraic over $latex \mathbb{Q}(x, \tan{(x)})$, but if we do not already have $latex \tan{x}$ in our differential extension, it is transcendental, and we can rewrite it as $latex e^{-\frac{\log{(1 + \tan^2{x})}}{2}}$ (this is used in Bronstein's text, so I believe what I just said is correct, though I haven't verified it with the structure theorems just yet).   These both work using the relevant identities for sin too.  Of course, there is still the problem of rewriting the final integrand back in terms of sin or cos.  Otherwise, you will get something like $latex \frac{2e^x\tan({\frac{x}{2}}) - \tan^2({\frac{x}{2}})e^x + e^x}{2 + 2\tan^2({\frac{x}{2}})}$ instead of $latex \frac{e^x(\sin{(x)} + \cos{(x)})}{2}$ for $latex \int{\cos{(x)}e^xdx}$.  Bronstein doesn't elaborate on this too much in his book, so it is something that I will have to figure out on my own.

The second option I gave above leads nicely into the main point I wanted to make here about elementary functions.  Notice that everywhere in the definitions above, things depend on the field we are working in.  Therefore, $latex e^{\tan{x}}$ cannot be an elementary extension over $latex \mathbb{Q}(x)$, but it can be over $latex \mathbb{Q}(x, \tan{x})$.  Also, the <a href="http://en.wikipedia.org/wiki/Error_function">error function</a>, defined as $latex \mathrm{erf}{(x)} = \frac{2}{\sqrt{\pi}}\int{e^{-x^2}dx}$ cannot be an elementary extension over $latex \mathbb{Q}(x)$, but it can over $latex \mathbb{Q}(x, e^{-x^2})$. In fact this is how we can integrate in terms of some special functions, including the error function: by manually adding $latex e^{-x^2}$ (or whatever) to our differential extension.   Therefore, the usual definition of an elementary anti-derivaitve and the above Risch Algorithm definition of an elementary integral coincide only when the extension consists only of elementary functions of the form of the usual definition (note that above, our final fields are $latex \mathbb{Q}(x, \tan{x}, e^{\tan{x}})$ and $latex \mathbb{Q}(x, e^{-x^2}, \mathrm{erf}{(x)})$, respectively).  

Originally, I was also going to talk about Liouville's Theorem in this blog post, but I think it has already gotten long enough (read "I'm getting tired"), so I'll put that off until next time.  ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>600</wp:post_id>
  <wp:post_date>2010-07-24 03:32:57</wp:post_date>
  <wp:post_date_gmt>2010-07-24 03:32:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>the-risch-algorithm-part-2-elementary-functions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>162</wp:comment_id>
    <wp:comment_author><![CDATA[Integration of primitive functions &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2010/07/31/integration-of-primitive-functions/</wp:comment_author_url>
    <wp:comment_author_IP>76.74.248.141</wp:comment_author_IP>
    <wp:comment_date>2010-07-31 06:44:46</wp:comment_date>
    <wp:comment_date_gmt>2010-07-31 06:44:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] time, I can refer you to my previous blog post for definitions. The chief thing here is that there is not a function in my integration3 branch [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1280558687</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>198</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>129.138.31.230</wp:comment_author_IP>
    <wp:comment_date>2010-08-24 21:06:20</wp:comment_date>
    <wp:comment_date_gmt>2010-08-24 21:06:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hey.  

I never knew that it was called Weierstrass substitution.  Actually, you just have to do <code>result.subs(tan(x/2), sin(x)/(1 + cos(x)))</code> (or <code>(1 - cos(x))/sin(x)</code> if you like), and then it's just a matter of doing $latex \sin^2{(x)} + \cos^2{(x)} = 1$ simplification on the result (SymPy's <code>trigsimp()</code> is going to have to get a little smarter whenever I implement this, actually).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>197</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1282683980</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>197</wp:comment_id>
    <wp:comment_author><![CDATA[Nimish Telang]]></wp:comment_author>
    <wp:comment_author_email>ntelang@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>24.154.112.244</wp:comment_author_IP>
    <wp:comment_date>2010-08-24 15:16:13</wp:comment_date>
    <wp:comment_date_gmt>2010-08-24 15:16:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hey, awesome series on integration. It's amazing how few people know about how CAS's implement their algorithms, and you're amazing for implementing them.

Anyway, the tan(t/2) trick is well known (Weierstrass substitution) and can convert any nasty combination of trig functions into a rational function. Converting back is a pattern matching exercise.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1282662976</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>187</wp:comment_id>
    <wp:comment_author><![CDATA[The Risch Algorithm: Part 3, Liouville&#8217;s Theorem &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2010/08/14/the-risch-algorithm-part-3-liouvilles-theorem/</wp:comment_author_url>
    <wp:comment_author_IP>76.74.254.66</wp:comment_author_IP>
    <wp:comment_date>2010-08-14 02:55:36</wp:comment_date>
    <wp:comment_date_gmt>2010-08-14 02:55:36</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] produce another one of my Risch Algorithm blog posts. It is recommended that you read parts 1 and 2 first, as well as my post on rational function integration, which could be considered part [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1281754537</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>379</wp:comment_id>
    <wp:comment_author><![CDATA[Update for the Beginning of the Summer &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2011/05/26/update-for-the-beginning-of-the-summer/</wp:comment_author_url>
    <wp:comment_author_IP>76.74.254.93</wp:comment_author_IP>
    <wp:comment_date>2011-05-26 05:42:08</wp:comment_date>
    <wp:comment_date_gmt>2011-05-26 05:42:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] that week. Others will be continuations of my Risch Algorithm series of blog posts (see parts 0, 1, 2, and [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1306388529</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1306388530.0699";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Integration of primitive functions</title>
  <link>http://asmeurersympy.wordpress.com/2010/07/31/integration-of-primitive-functions/</link>
  <pubDate>Sat, 31 Jul 2010 06:44:31 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=683</guid>
  <description/>
  <content:encoded><![CDATA[<strong>Integration of Primitive Functions</strong>

So this past week, I had another break through in my project.  The <a href="http://asmeurersympy.wordpress.com/2010/07/12/integration-of-exponential-functions/">first break through</a>, as you may recall, was the completion of the <code>integrate_hyperexponential()</code> function, which allowed for the integration in hyperexponential extensions, including proving the nonexistence of elementary integrals.  Now I have worked my way up to this level on the other major half of the integration algorithm (actually, major third; more on that later): integration of primitive elements.  

This time, I can refer you to my <a href="http://asmeurersympy.wordpress.com/2010/07/24/the-risch-algorithm-part-2-elementary-functions/">previous blog post</a> for definitions.  The chief thing here is that there is now a function in my <tt>integration3</tt> branch called <code>integrate_primitive()</code>, and it is used primarily for integrating functions with logarithms.

So, how about some examples?  The first one comes from <a href="http://">Algorithms for computer algebra By Keith O. Geddes, Stephen R. Czapor, George Labahn</a> (example 12.8).  I like it because it contains both exponentials and logarithms, in a way that they do not depend on each other, so it can be integrated with either <code>integrate_primitive()</code> or <code>integrate_hyperexponential()</code>.  In either case, the polynomial part is $latex \frac{x}{x + 1}$, so recursively calling the other function is not required.  (for those of you who have been following my <tt>integration3</tt> branch, you may notice that this is blatantly taken from the commit history).

<strong>Hover over the code and click on the left-most, "view source" icon (a paper icon with <tt>&#060; &#062;</tt> over it) to view without breaks.  Opens in a new window.</strong>
[code language="py"]
In [1]: from sympy.integrals.risch import integrate_primitive,
integrate_hyperexponential

In [2]: f = (x*(x + 1)*((x**2*exp(2*x**2) - log(x + 1)**2)**2 +
2*x*exp(3*x**2)*(x - (2*x**3 + 2*x**2 + x + 1)*log(x + 1))))/((x +
1)*log(x + 1)**2 - (x**3 + x**2)*exp(2*x**2))**2

In [3]: f
Out[3]:
          ⎛                          2                                                   ⎞
          ⎜⎛                       2⎞                                                   2⎟
          ⎜⎜     2           2  2⋅x ⎟        ⎛    ⎛           2      3⎞           ⎞  3⋅x ⎟
x⋅(1 + x)⋅⎝⎝- log (1 + x) + x ⋅ℯ    ⎠  + 2⋅x⋅⎝x - ⎝1 + x + 2⋅x  + 2⋅x ⎠⋅log(1 + x)⎠⋅ℯ    ⎠
──────────────────────────────────────────────────────────────────────────────────────────
                                                                2
                         ⎛                                    2⎞
                         ⎜   2                  ⎛ 2    3⎞  2⋅x ⎟
                         ⎝log (1 + x)⋅(1 + x) - ⎝x  + x ⎠⋅ℯ    ⎠

In [4]: var('t0, t1')
Out[4]: (t₀, t₁)

In [5]: a, d = map(lambda i: Poly(i, t1), f.subs(exp(x**2),
t0).subs(log(x + 1), t1).as_numer_denom())

In [6]: a
Out[6]:
Poly((x + x**2)*t1**4 + (-2*t0**2*x**3 - 2*t0**2*x**4)*t1**2 +
(-2*t0**3*x**2 - 4*t0**3*x**3 - 6*t0**3*x**4 - 8*t0**3*x**5 -
4*t0**3*x**6)*t1 + 2*t0**3*x**3 + 2*t0**3*x**4 + t0* *4*x**5 +
t0**4*x**6, t1, domain='ZZ[x,t0]')

In [7]: d
Out[7]: Poly((1 + 2*x + x**2)*t1**4 + (-2*t0**2*x**2 - 4*t0**2*x**3 -
2*t0**2*x**4)*t1**2 + t0**4*x**4 + 2*t0**4*x**5 + t0**4*x**6, t1,
domain='ZZ[x,t0]')

In [8]: D = [Poly(1, x), Poly(2*x*t0, t0), Poly(1/(x + 1), t1)]

In [9]: r = integrate_primitive(a, d, D, [x, t0, t1], [lambda x: log(x +
1), lambda x: exp(x**2)])

In [10]: r
Out[10]:
⎛   ⎛                ⎛ 2⎞⎞      ⎛                ⎛ 2⎞⎞        ⎛ 2⎞                                ⎞
⎜   ⎜                ⎝x ⎠⎟      ⎜                ⎝x ⎠⎟        ⎝x ⎠                ⌠               ⎟
⎜log⎝log(1 + x) + x⋅ℯ    ⎠   log⎝log(1 + x) - x⋅ℯ    ⎠     x⋅ℯ    ⋅log(1 + x)     ⎮   x           ⎟
⎜───────────────────────── - ───────────────────────── - ────────────────────── + ⎮ ───── dx, True⎟
⎜            2                           2                                    2   ⎮ 1 + x         ⎟
⎜                                                           2           2  2⋅x    ⌡               ⎟
⎝                                                        log (1 + x) - x ⋅ℯ                       ⎠
[/code]
An explanation:  <code>f</code> is the function we are integrating.  Preparsing is not implemented yet, so we have to do it manually in <tt>[5]</tt>.  <tt>[8]</tt> is the list of derivations of the monomials we are working with, <code>[x, t0, t1]</code>, which represent $latex x$, $latex e^{x^2}$, and $latex \log{(x + 1)}$, respectively. Because the outermost monomial is a logarithm (primitive), we call <code>integrate_primitive()</code> on it.  The last argument of the function is the back substitution list, in reverse order because that is the order we have to back substitute in.  We can see the result contains an unevaluated Integral.  This is because the recursive calls to integrate over the smaller extensions have not yet been implemented.  In the final version, <code>integrate()</code> will automatically call <code>ratint()</code> in this case on it to give the complete answer.  The second argument of the result, True, indicates that the integral was elementary and that this is the complete integral.

Because the extensions did not depend on each other, we could have also integrated in $latex \mathbb{Q}(x, \log{(x + 1)}, e^{x^2})$ instead of $latex \mathbb{Q}(x, e^{x^2}, \log{(x + 1)})$:

[code language="py"]
In [11]: a1, d1 = map(lambda i: Poly(i, t0), f.subs(exp(x**2), t0).subs(log(x + 1), t1).as_numer_denom())

In [12]: D1 = [Poly(1, x), Poly(1/(x + 1), t1), Poly(2*x*t0, t0)]

In [13]: r1 = integrate_hyperexponential(a1, d1, D1, [x, t1, t0], [lambda x: exp(x**2), lambda x: log(x + 1)])

In [14]: r1
Out[14]:
⎛   ⎛              ⎛ 2⎞⎞      ⎛                ⎛ 2⎞⎞                                                ⎞
⎜   ⎜log(1 + x)    ⎝x ⎠⎟      ⎜  log(1 + x)    ⎝x ⎠⎟          ⎛ 2⎞                                  ⎟
⎜log⎜────────── + ℯ    ⎟   log⎜- ────────── + ℯ    ⎟       2  ⎝x ⎠                  ⌠               ⎟
⎜   ⎝    x             ⎠      ⎝      x             ⎠      x ⋅ℯ    ⋅log(1 + x)       ⎮   x           ⎟
⎜─────────────────────── - ───────────────────────── + ────────────────────────── + ⎮ ───── dx, True⎟
⎜           2                          2                                        2   ⎮ 1 + x         ⎟
⎜                                                             2           3  2⋅x    ⌡               ⎟
⎝                                                      - x⋅log (1 + x) + x ⋅ℯ                       ⎠
[/code]
We can verify by taking the derivative that the results in each case are antiderivatives of the original function, <code>f</code>, even though they appear different.

[code language="py"]
In [15]: cancel(r[0].diff(x) - f)
Out[15]: 0

In [16]: cancel(r1[0].diff(x) - f)
Out[16]: 0
[/code]

We can see in each case, the remaining unevaluated <code>Integral</code> was in $latex \mathbb{Q}(x)$ only, meaning that the recursive call to <code>integrate_hyperexponential()</code> or <code>integrate_primitive()</code>, respectively, would not have been necessary. Finally, we can see that choosing the correct extension to integrate over can make a difference, time wise:

[code language="py"]
In [17]: %timeit integrate_primitive(a, d, D, [x, t0, t1], [lambda x: log(x + 1), lambda x: exp(x**2)])
1 loops, best of 3: 1.91 s per loop

In [18]: %timeit integrate_hyperexponential(a1, d1, D1, [x, t1, t0], [lambda x: exp(x**2), lambda x: log(x + 1)])
1 loops, best of 3: 2.63 s per loop
[/code]

Just as with the exponential case, the function can prove the integrals are non-elementary. This is the so-called <a href="http://en.wikipedia.org/wiki/Logarithmic_integral">logarithmic integral</a>:

[code language="py"]
In [19]: f1 = 1/log(x)

In [20]: a, d = map(lambda i: Poly(i, t1), f1.subs(log(x), t1).as_numer_denom())

In [21]: a
Out[21]: Poly(1, t1, domain='ZZ')

In [22]: d
Out[22]: Poly(t1, t1, domain='ZZ')

In [23]: integrate_primitive(a, d, [Poly(1, x), Poly(1/x, t1)], [x, t1], [log])
Out[23]: (0, False)
[/code]

The second argument, <code>False</code>, indicates that the integral was non-elementary.  Namely, the function has proven that the function $latex f - D(0) = \frac{1}{\log{(x)}}$ does not have an elementary anti-derivative over $latex \mathbb{Q}(x, \log{(x)})$ (see the <a href="http://asmeurersympy.wordpress.com/2010/07/12/integration-of-exponential-functions/">previous post</a> for more information).

Finally, be aware that, just as with <code>integrate_hyperexponential()</code> many integrals will  raise <code>NotImplementedError</code>, because the subroutines necessary to solve them have not yet been finished.

[code language="py"]
In [25]: f = log(log(x))**2

In [26]: f.diff(x)
Out[26]:
2⋅log(log(x))
─────────────
   x⋅log(x)

In [27]: a, d = map(lambda i: Poly(i, t1),
cancel(f.diff(x)).subs(log(x), t0).subs(log(t0), t1).as_numer_denom())

In [28]: a
Out[28]: Poly(2*t1, t1, domain='ZZ')

In [29]: d
Out[29]: Poly(t0*x, t1, domain='ZZ[x,t0]')

In [30]: D = [Poly(1, x), Poly(1/x, t0), Poly(1/(x*t0), t1)]

In [31]: integrate_primitive(a, d, D, [x, t0, t1], [lambda x: log(log(x)), log])
---------------------------------------------------------------------------
NotImplementedError: Remaining cases for Poly RDE not yet implemented.
[/code]

Now one thing that I want to add from the above examples taken from the commit message is that logarithms are not the only function that are primitive.  The Li function (the logarithmic integral, as above), considered as an elementary extension of $latex \mathbb{Q}(x, \log{(x)})$ is also primitive.  But even among the commonly defined elementary functions, there is one other, acrtangents.  

[code language="py"]
In [32]: diff(atan(x)**2, x)
Out[32]: 
2⋅atan(x)
─────────
       2 
  1 + x  

In [33]: integrate_primitive(Poly(2*t, t), Poly(1 + x**2, t), [Poly(1, x), Poly(1/(1 + x**2), t)], [x, t], [atan])

Out[33]: 
⎛    2         ⎞
⎝atan (x), True⎠

In [34]: integrate_primitive(Poly(t, t), Poly(x, t), [Poly(1, x), Poly(1/(1 + x**2), t)], [x, t], [atan])

Out[34]: 
⎛⌠                  ⎞
⎜⎮ atan(x)          ⎟
⎜⎮ ─────── dx, False⎟
⎜⎮    x             ⎟
⎝⌡                  ⎠
[/code]

Due to a bug in the code right now, the final version returns the non-elementary integral in the final result.  Suffice it to say that it has proven that $latex \int {\frac{\arctan{(x)}}{x} dx}$ is non-elementary. As far as I know, this isn't any special function.  Actually, it's just a random function containing arctan that looked non-elementary to me that I plugged in and found out that I was correct.  It's very similar in form to the <a href="http://en.wikipedia.org/wiki/Exponential_integral">exponential integral</a> (Ei) or the <a href="http://en.wikipedia.org/wiki/Sine_integral#Sine_integral">Sine/Cosine Integral</a> (Si/Ci), which is how I guessed that it would be non-elementary.  Maybe it should be called ATi().

<strong>Status Update</strong>

So it has come to my attention that the suggested "pencils down" date is one week from Monday, and the hard "pencils down" date is two weeks from Monday (see the <a href="http://socghop.appspot.com/document/show/gsoc_program/google/gsoc2010/timeline">Google Summer of Code Timeline</a>).  Now, no matter how fast I work, my work cannot be pushed in until Mateusz's latest polys branch gets pushed in, because my work is based on top of it.  I plan on continuing work on the integration algorithm beyond the summer until I finish the transcendental part of the algorithm, and even after that, I want to look into implementing other integration related things, like definite integration using <a href="http://en.wikipedia.org/wiki/Meijer-G">Meijer G-functions,</a> and the algebraic part of the algorithm.  But for now, these are the things that I need to do for the transcendental part, which is this summer's work:

<em>1. Implement the preparsing algorithms. </em> This part is two-fold.  First, I need to implement algorithms based on the Risch Structure Theorems, which allow me to determine if an extension is algebraic or not (if it is algebraic, we cannot integrate it because only the transcendental part is implemented).  The other part will be the function that actually goes through an expression and tries to build up a differential extension from it so it can be integrated.  This can be a tricky part. For example, if we want to integrate $latex f = e^x + e^{\frac{x}{2}}$, we want to first choose $latex t_1=e^{\frac{x}{2}}$ so that $latex f = t_1^2 + t_1$, because if we choose $latex t_1=e^x$, then $latex t_2=e^{\frac{x}{2}}=\sqrt{t_1}$ will be algebraic over $latex \mathbb{Q}(x, t_1)$.  This is one case where we might try adding an algebraic extensions but where it can be avoided.  The solution will have to be to go through and find the common denominators of the exponentials.  I'm also considering that this might happen in more advanced ways, so it could be necessary for the function to backtrack in the extension tree to see if it can do it in an entirely transcendental way.  Fortunately, the Risch Structure Theorems give us a decision procedure for determining if an extension can be written in terms of the previous extensions (is algebraic over it), but this will still be a very hard function to get right.

<em>2. Finish the remaining cases for <code>integrate_hyperexponential()</code> and <code>integrate_primitive()</code>.</em> As you could see in this post, as well as in the <a href="http://asmeurersympy.wordpress.com/2010/07/12/integration-of-exponential-functions/">previous one</a>, there are many integrals that cannot yet be integrated because the special cases for them have not been implemented yet.  Most of these actually rely on implementing the structure theorem algorithms from <strong>1</strong>, and implementing them once that is finished will not take long, because they will just be straight copying of the pseudocode from Bronstein's book.  But some of them, particularly ones from the primitive case, are not spelt out so well in Bronstein's book, and will require more thinking (and thus time) on my part.  I should note that the Structure Theorem algorithms are also this way.

<em> 3. Implement the hypertangent case. </em> The ability to integrate in tangent extensions is the other <em>third</em> I mentioned above.  Since tangents require more special casing, I plan on doing this only after I have finished <strong>1</strong> and <strong>2</strong>.  This is actually not much work, because most of the algorithms for solving the particular subproblem for tangents (called the <em>Coupled Risch Differential Equation</em>) are exactly the same as those for solving the subproblem for hyperexponentials (the <em>Risch Differential Equation</em>), which are already (mostly) implemented in the hyperexponential part.  There are only a few extra functions that need to be written for it.  Also, you will still be able to integrate functions that contain tangents, such as $latex e^{\tan{(x)}}$ (recall <a href="http://asmeurersympy.wordpress.com/2010/07/12/integration-of-exponential-functions/">last time</a> that we showed that <code>integrate_hyperexponential()</code> can prove that this does not have an elementary integral).  It just won't be able to integrate when the top-most extension is a tangent.

So here is what I plan on doing.  Right now, I am going to focus my work on <strong>1</strong>, since most of <strong>2</strong> can't be done until it is anyway.  But more importantly, I want to have a prototype user-level function for the Risch Algorithm.  The reason I want this is so that people can try it out, without having to do the preparsing like I did above, but rather they can just call <code>risch_integrate(f, x)</code>, and it will return the integral of <code>f</code>, prove that it is non-elementary and reduce it into the elementary and non-elementary parts, or explain why it cannot do it (either because the function is not transcendental or because something is not implemented yet).  My chief desire for doing this is so that people can try out my code and find the bugs in it for me.  I have already found many critical errors in the code (returns a wrong result), and I want to iron these out before anything goes in.  The best way to do this will be to release a working user-level function and hope that people try it out for me.  

Also, even if <strong>2</strong> and <strong>3</strong> are not finished, if I have <strong>1</strong>, I can integrate it with <code>integrate()</code> (no pun intended) and just have it bail if it raises <code>NotImplementedError</code> I will need to come up with a way to differentiate between this and the case where it returns an unevaluated <code>Integral</code> because it has proven that an elementary antiderivative does not exist.  Any suggestions?

I plan on continuing work after the summer until I finish <strong>1</strong> through <strong>3</strong>, though I won't pretend that my work won't slow down considerably when I start classes in August.  I also promise to finish the <a href="http://asmeurersympy.wordpress.com/2010/07/12/integration-of-exponential-functions/">Risch Algorithm posts</a> that I promised.

And for what it's worth, I plan on working my ass off this next two weeks.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>683</wp:post_id>
  <wp:post_date>2010-07-31 06:44:31</wp:post_date>
  <wp:post_date_gmt>2010-07-31 06:44:31</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>integration-of-primitive-functions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>170</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>68.42.37.143</wp:comment_author_IP>
    <wp:comment_date>2010-08-04 17:47:06</wp:comment_date>
    <wp:comment_date_gmt>2010-08-04 17:47:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi xavier.

Yes, this is why I want to release a prototype function for testing before it gets merged into the main SymPy.  I've found that perhaps more than 50% of the bugs I have found so far in my code have lead to wrong results (as opposed to raising an exception).  I'm very close to finishing the preparser code, so look out for a blog post about it either today or tomorrow.

Do you know of any good references on definite integration with the Meijer G-functions?  So far, the best I have found are some papers by Kelly Roach.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>169</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1280944028</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>169</wp:comment_id>
    <wp:comment_author><![CDATA[xavier]]></wp:comment_author>
    <wp:comment_author_email>xavier.gnata@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>88.167.240.41</wp:comment_author_IP>
    <wp:comment_date>2010-08-04 10:32:54</wp:comment_date>
    <wp:comment_date_gmt>2010-08-04 10:32:54</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Great job!!

Symbolic integration algorithms is chanlenging....
IIRC, a large fraction of mathematica open bugs is in "Integrate".

Definite integrate using Meijer G-functions is another story:
You have to deal with branch points.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1280917975</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>172</wp:comment_id>
    <wp:comment_author><![CDATA[Prototype risch_integrate() function ready for testing! &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2010/08/05/prototype-risch_integrate-function-ready-for-testing/</wp:comment_author_url>
    <wp:comment_author_IP>66.135.48.163</wp:comment_author_IP>
    <wp:comment_date>2010-08-05 22:30:12</wp:comment_date>
    <wp:comment_date_gmt>2010-08-05 22:30:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] ready for&nbsp;testing!  So today I finally finished up the prototype function I talked about last time. The function is called risch_integrate() and is available at my integration3 branch. Unlike the [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1281047414</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Prototype risch_integrate() function ready for testing!</title>
  <link>http://asmeurersympy.wordpress.com/2010/08/05/prototype-risch_integrate-function-ready-for-testing/</link>
  <pubDate>Thu, 05 Aug 2010 22:30:00 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=710</guid>
  <description/>
  <content:encoded><![CDATA[So today I finally finished up the prototype function I talked about <a href="http://asmeurersympy.wordpress.com/2010/07/31/integration-of-primitive-functions/">last week</a>.  The function is called <code>risch_integrate()</code> and is available at my <a href="http://github.com/asmeurer/sympy/tree/integration3">integration3</a> branch.  Unlike the inner level functions I have showcased in <a href="http://asmeurersympy.wordpress.com/2010/07/31/integration-of-primitive-functions/">previous</a> <a href="http://asmeurersympy.wordpress.com/2010/07/12/integration-of-exponential-functions/">blog posts</a>, this function does not require you to do substitution for dummy variables and manually create a list of derivatives, etc.  All you have to do is pass it a function and the integration variable, and it will return the result, just like normal <code>integrate()</code>. I have spent the past few days working on a monster of a function called <code>build_extension()</code> that does this preparsing work for you.  The reason that the function was so hard to write is that the transcendental Risch Algorithm is very picky.  <em>Every</em> differential extension has to be transcendental over the previous extensions.  This means that if you have a function like $latex e^x + e^{\frac{x}{2}}$, you cannot write this as $latex t_0 + t_1$ with $latex t_0=e^x$ and $latex t_1=e^{\frac{x}{2}}$ because $latex t_0$ and $latex t_1$ will each be algebraic over the other ($latex t_0=t_1^2$).  You also cannot let $latex t_0=e^{x}$ and rewrite the whole integral in terms of $latex t_0$ because you will get $latex t_0 + \sqrt{t_0}$, which is an algebraic function.  The only way that you can do it is to let $latex t_0=e^{\frac{x}{2}}$, and then your function will be $latex t_0^2 + t_0$.  

Now, fortunately, there is an algorithm that provides necessary and sufficient conditions for determining if an extension is algebraic over the previous ones.  It's called the Risch Structure Theorems.  My first order of business this week was to finish implementing these.  This is actually the reason that I we had to wait until now to get this prototype function.  The Structure Theorems are at the very end of Bronstein's book, and the integration algorithm is not correct without them (namely, it is not correct if you add an algebraic extension).  I just recently got to them in my reading.  Actually, I skipped some work on tangent integration so I could get to them first.  I hope to talk a little about them in a future "Risch Integration" blog post, though be aware that they require some extremely intense algebraic machinery to prove, so I won't be giving any proofs.

Even though these algorithms can tell me, for example, that I shouldn't have added $latex t_0=e^x$ above because it makes $latex e^{\frac{x}{2}}=\sqrt{t_0}$, that means that I have to go back and restart my search for an extension so that I can try to get $latex t_0=e^{\frac{x}{2}}$ instead.  So I wrote a simple function that takes the arguments of the exponentials and determines the lowest common factor.  This heuristic saves a lot of time.  

I also noticed (actually, Chris Smith inadvertently pointed it out to me; super thanks to him), that the Structure Theorem algorithms only tell you if the terms are the same as monomials.  It would tell you that $latex e^x = e^{x + 1}$ because both satisfy $latex Dt=t$.  Therefore, I had to also modify the structure theorem algorithms to pull out any constant term.  

It can still be necessary to restart building the extension even with the above heuristic.  For example, if you have $latex e^x + e^{x^2} + e^{\frac{x}{2} + x^2}$, and start with $latex t_0=e^x$ and $latex t_1=e^{x^2}$, then the structure theorems will tell you that $latex e^{x/2 + x^2} = \sqrt{t_0}t_1$, which we cannot use because of the radical.  The solution it uses is to split it up as $latex e^x + e^{x^2} + e^{\frac{x}{2}}e^{x^2}$ (the structure theorems tell you exactly how to do this so you are splitting in terms of the other exponentials) and then restart the extension building entirely.  This can be an expensive operation, because you have to rebuild $latex t_0$ and $latex t_1$, but this time, the heuristic function I wrote from above handles the $latex e^{\frac{x}{2}}$ correctly, making $latex t_0=e^{\frac{x}{2}}$, with the final answer $latex t_0^2 + t_1 + t_0t_1$.  I could have probably made it smarter by only going back to before the conflicting extensions, but this was quite a bit more work, and adds more difficulties such as non-trivial relationships, so I just took the lazy way and restarted completely.  It doesn't take <em>that</em> much time.  

Of course, sometimes, you cannot add a new exponential, no matter how you add the extensions.  The classic example is $latex e^{\frac{\log{(x)}}{2}}$, which you can see is actually equal to $latex \sqrt{x}$, an algebraic function.  Therefore, I had to implement some tricky logic to keep the <code>build_extension()</code> function from trying again infinitely.  I hope I did it right, so that it never infinite loops, and never fails when it really can be done.  Only time and testing will tell.

It is exactly the same for logarithms, except in that case, when a new logarithm is algebraic in terms of old ones, it can be written as a linear combination of them.  This means that there are never any radicals to worry about, though you do also have to worry about constants.  For example, $latex \log{(x)}$ looks the same as $latex \log{(2x)}$ because they both satisfy $latex Dt=\frac{1}{x}$.  An example of a logarithm that is algebraic over old ones is $latex \log{(x^2 - 1)}$ over $latex \log{(x + 1)}$ and $latex \log{(x - 1)}$, because $latex \log{(x^2 - 1)}=\log{((x + 1)(x - 1))}=\log{(x + 1)} + \log{(x - 1)}$.  

The parallels between exponentials and logarithms are amazing.  For the structure theorems, the exponential case is exactly the same as the logarithmic case except replacing addition with multiplication and multiplication with exponentiation.  For the exponential case, you need the arguments of the already added logarithms to find the algebraic dependence, and the arguments of the already added exponentials to find the constant term.  For the logarithmic case, you need the arguments of the already added exponentials to find the algebraic dependence, and the arguments of the already added logarithms to find the content term. Everything else is exactly the same, except for the shift in operators.  Of course, I realize why these things are, mathematically, but the symmetry still amazing to me.  I will hopefully explain in more detail in my future Structure Theorems post.  

So onto the <code>risch_integrate()</code> function.  Here is the text that I have basically put in my <a href="http://github.com/asmeurer/sympy/commit/e3cd5f18f86fd6377836f33f726182c8bd4dc1a0">commit message</a>, the <a href="http://code.google.com/p/sympy/issues/detail?q=2010">aptly numbered issue</a> that I have created for it, and the <a href="http://groups.google.com/group/sympy/browse_thread/thread/2464fa764f6f47aa">post to the mailing list</a> (it's not so much that I am lazy as that I was really excited to get this out there).


<blockquote>
I have ready in my integration3 branch a prototype risch_integrate() function that is a user-level function for the full Risch Algorithm I have been implementing this summer.  Pull from h<a href="//github.com/asmeurer/sympy/tree/integration3">ttp://github.com/asmeurer/sympy/tree/integration3</a>.

This is NOT ready to go in.  It is a prototype function that I am making available so people can try out the new algorithm and hopefully help me to find the bugs in it.  Please pass it your favorite non-elementary integrals and see if it can determine that they are not elementary.  If you try to pass it a very crazy function at random, the chances are pretty high that it will not be elementary.  So a better way to test it is to come up with a crazy function, then differentiate it. Then pass the derivative and see if it can give you your original function back.  Note that it will probably not look exactly the same as your original function, and may differ by a constant.  You should verify by differentiating the result you get and calling cancel() (or simplify(), but usually cancel() is enough) on the difference.

So you can review the code too, if you like, but just know that things are not stable yet, and this isn't strictly a branch for review.  

So far, this function only supports exponentials and logarithms.
Support for trigonometric functions is planned.  Algebraic functions are
not supported. If the function returns an unevaluated Integral, it means
that it has proven the integral to be non-elementary.  Note that several
cases are still not implemented, so you may get NotImplementedError
instead. Eventually, these will all be eliminated, and the only
NotImplementedError you should see from this function is
NotImplementedError("Algebraic extensions are not supported.")

This function has not been integrated in any way with the already
existing integrate() yet, and you can use it to compare.

Examples:
[code language="py"]
In [1]: risch_integrate(exp(x**2), x)
Out[1]:
⌠
⎮  ⎛ 2⎞
⎮  ⎝x ⎠
⎮ ℯ     dx
⌡

In [2]: risch_integrate(x**100*exp(x), x).diff(x)
Out[2]:
 100  x
x   ⋅ℯ

In [3]: %timeit risch_integrate(x**100*exp(x), x).diff(x)
1 loops, best of 3: 270 ms per loop

In [4]: integrate(x**100*exp(x), x)
... hangs ...

In [5]: risch_integrate(x/log(x), x)
Out[5]:
⌠
⎮   x
⎮ ────── dx
⎮ log(x)
⌡

In [6]: risch_integrate(log(x)**10, x).diff(x)
Out[6]:
   10
log  (x)

In [7]: integrate(log(x)**10, x).diff(x)
Out[7]:
   10
log  (x)

In [8]: %timeit risch_integrate(log(x)**10, x).diff(x)
10 loops, best of 3: 159 ms per loop

In [9]: %timeit integrate(log(x)**10, x).diff(x)
1 loops, best of 3: 2.35 s per loop
[/code]

Be warned that things are still very buggy and you should always verify
results by differentiating.  Usually, cancel(diff(result, x) - result)
should be enough.  This should go to 0.

So please, please, PLEASE, try out this function and report any bugs that you find.  It is not necessary to report NotImplementedError bugs, because I already know about those (I put them in there), and as I mentioned above, they are all planned to disappear.  Also, I am continually updating my branch with fixes, so you should do a "git pull" and try again before you report anything.

Also, I am aware that there are test failures.  This is because I had to hack exp._eval_subs() to only do exact substitution (no algebraic substitution).  It's just a quick hack workaround, and I should eventually get a real fix.  

Finally, I'm thinking there needs to be a way to differentiate between an unevaluated Integral because the integrator failed and an unevaluated Integral because it has proven the integral to be non-elementary.  Any ideas?
</blockquote>

Also, looking at the integral from the previous blog post, you can get the different results by using the <code>handle_log</code> argument to <code>risch_integrate()</code>:

If <code>handle_first == 'log'</code> (the default right now), then it will gather all logarithms first, and then exponentials (insomuch as it can do it in that order).  If <code>handle_first='exp'</code>, it gathers exponentials first.  The difference is that the Risch Algorithm integrates recursively, one extension at a time, starting with the outer-most one. So if you have an expression with both logarithms and exponentials, such that they do not depend on each other, <code>handle_first == 'log'</code> will integrate the exponentials first, because they will be gathered last (be at the top of the tower of extensions), and <code>handle_first == 'exp'</code> will integrate the logarithms first.  Right now, I have defaulted to 'log' because the exponential integration algorithm is slightly more complete.  If you get <code>NotImplementedError</code> with one, it is possible (though I don't know for sure yet) that you might get an answer with the other.  

Also, they can give different looking results, and at different speeds.  For example:

<strong>Hover over the code and click on the left-most, "view source" icon (a paper icon with <tt>&#060; &#062;</tt> over it) to view without breaks.  Opens in a new window.</strong>
[code language="py"]
In [1]: f = (x*(x + 1)*((x**2*exp(2*x**2) - log(x + 1)**2)**2 +
   ...: 2*x*exp(3*x**2)*(x - (2*x**3 + 2*x**2 + x + 1)*log(x + 1))))/((x +
   ...: 1)*log(x + 1)**2 - (x**3 + x**2)*exp(2*x**2))**2

In [2]: f
Out[2]: 
          ⎛                          2                                                   ⎞
          ⎜⎛                       2⎞                                                   2⎟
          ⎜⎜     2           2  2⋅x ⎟        ⎛    ⎛           2      3⎞           ⎞  3⋅x ⎟
x⋅(1 + x)⋅⎝⎝- log (1 + x) + x ⋅ℯ    ⎠  + 2⋅x⋅⎝x - ⎝1 + x + 2⋅x  + 2⋅x ⎠⋅log(1 + x)⎠⋅ℯ    ⎠
──────────────────────────────────────────────────────────────────────────────────────────
                                                                2                         
                         ⎛                                    2⎞                          
                         ⎜   2                  ⎛ 2    3⎞  2⋅x ⎟                          
                         ⎝log (1 + x)⋅(1 + x) - ⎝x  + x ⎠⋅ℯ    ⎠                          

In [3]: risch_integrate(f, x, handle_first='log')
Out[3]: 
       ⎛              ⎛ 2⎞⎞                   ⎛                ⎛ 2⎞⎞                             
       ⎜log(1 + x)    ⎝x ⎠⎟                   ⎜  log(1 + x)    ⎝x ⎠⎟          ⎛ 2⎞               
    log⎜────────── + ℯ    ⎟                log⎜- ────────── + ℯ    ⎟       2  ⎝x ⎠               
       ⎝    x             ⎠                   ⎝      x             ⎠      x ⋅ℯ    ⋅log(1 + x)    
x + ─────────────────────── - log(1 + x) - ───────────────────────── + ──────────────────────────
               2                                       2                                        2
                                                                              2           3  2⋅x 
                                                                       - x⋅log (1 + x) + x ⋅ℯ    

In [4]: risch_integrate(f, x, handle_first='exp')
Out[4]: 
       ⎛                ⎛ 2⎞⎞                   ⎛                ⎛ 2⎞⎞        ⎛ 2⎞             
       ⎜                ⎝x ⎠⎟                   ⎜                ⎝x ⎠⎟        ⎝x ⎠             
    log⎝log(1 + x) + x⋅ℯ    ⎠                log⎝log(1 + x) - x⋅ℯ    ⎠     x⋅ℯ    ⋅log(1 + x)  
x + ───────────────────────── - log(1 + x) - ───────────────────────── - ──────────────────────
                2                                        2                                    2
                                                                            2           2  2⋅x 
                                                                         log (1 + x) - x ⋅ℯ    

In [5]: %timeit risch_integrate(f, x, handle_first='log')
1 loops, best of 3: 1.49 s per loop

In [6]: %timeit risch_integrate(f, x, handle_first='exp')
1 loops, best of 3: 1.21 s per loop

In [7]: cancel(risch_integrate(f, x, handle_first='log').diff(x) - f)
Out[7]: 0

In [8]: cancel(risch_integrate(f, x, handle_first='exp').diff(x) - f)
Out[8]: 0
[/code]

So go now, and pull my <a href="//github.com/asmeurer/sympy/tree/integration3">branch</a>, and try this function out.  And report any problems that you have back to me, either through the mailing list, IRC, issue 2010, or as a comment to this blog post (I don't really care how).]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>710</wp:post_id>
  <wp:post_date>2010-08-05 22:30:00</wp:post_date>
  <wp:post_date_gmt>2010-08-05 22:30:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>prototype-risch_integrate-function-ready-for-testing</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>229</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron Meurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>129.138.31.230</wp:comment_author_IP>
    <wp:comment_date>2010-11-28 21:45:57</wp:comment_date>
    <wp:comment_date_gmt>2010-11-28 21:45:57</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Well, a second Bronstein book would have been very nice, as his first is the most clear and well-written math textbook I have ever read.  For the algebraic case, I am going to have to rely on the book by Davenport and Trager's PhD thesis.  

But before I even think of implementing the algebraic case, I need to do two things, first, finish the transcendental case, and second, learn some more algebra (I need to learn some more about the theory of algebraic curves to fully understand the algebraic algorithm).  

And yes, as far as I know, it is true that no CAS has completely implemented the algebraic case.  You see, there are actually three cases, the transcendental case, which deals with purely transcendental functions, the algebraic case, which deals with purely algebraic functions, and the mixed case, which deals with a mix of both (like $latex \sqrt{\sin{(x)} + 1}$).  I believe it is this third case which is the hardest to implement, and is likely what not even Axiom has completely done (though I could be wrong, I haven't looked into it too deeply yet).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>228</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1290980757</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>228</wp:comment_id>
    <wp:comment_author><![CDATA[Anton]]></wp:comment_author>
    <wp:comment_author_email>Soukhinov@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://iproc.ru</wp:comment_author_url>
    <wp:comment_author_IP>109.165.69.153</wp:comment_author_IP>
    <wp:comment_date>2010-11-28 12:33:21</wp:comment_date>
    <wp:comment_date_gmt>2010-11-28 12:33:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[It is a pity that Manuel Bronstein is dead before he managed to finish his second book on symbolic integration.

Can you do without the second book? I have read at Wolfram MathWorld that «The case of algebraic extensions is quite complicated and is therefore not completely implemented in any computer algebra system.» Is that true?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1290947601</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>231</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron Meurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>129.138.31.230</wp:comment_author_IP>
    <wp:comment_date>2010-11-29 16:44:21</wp:comment_date>
    <wp:comment_date_gmt>2010-11-29 16:44:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Well, I haven't studied the non-transcendental parts to know what really gives a full overview yet, but here's a try:

If you just want a basic overview (not all the subalgorithms detailed like in Bronstein's book) see Bronstein's "Symbolic Integration Tutorial."  You can download it for free at http://www-sop.inria.fr/cafe/Manuel.Bronstein/publications/issac98.ps.gz.  

Like I have said, for the transcendental part of the algorithm, all you need is Bronstein's book.  

If you download the front and back matter from Bronstein's book <a href="http://www.springerlink.com/content/978-3-540-21493-9" rel="nofollow">here</a>, you will see in the preface that he has cited [8, 9, 11, 14, 29, 73, 74, 76, 91] for the algebraic algorithm.  29 and 91 are the Davenport and Trager (respectively) that I mentioned above.  I would go with the most recently published things first, as I think that there have been some advancements in the algebraic part of the algorithm since Risch's original paper.  

Beyond that, my only recommendation would be to follow the sources in Bronstein's "Tutorial" that I linked to above.  Sorry if I can't be super specific, but I really have only studied in depth the transcendental algorithm so far.  One thing I can tell you is that aside from Bronstein (and perhaps Davenport) there aren't really any books that describe the algorithm in detail (books in computer algebra may detail an outline, like Bronstein's "Tutorial").  So if you wanted to learn the whole thing in enough detail to implement it, you will have to use other literature, like journal articles and PhD theses.  If you don't care about enough detail to implement the algorithm, I think Bronstein's "Tutorial" should be sufficient to give a basic overview (assuming you have the algebraic background to understand what he is talking about).  

By the way, what is your reason for wanting such a list?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>230</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1291056377</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>194</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>68.42.37.143</wp:comment_author_IP>
    <wp:comment_date>2010-08-20 15:29:40</wp:comment_date>
    <wp:comment_date_gmt>2010-08-20 15:29:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[It works on my computer:

[code language="py"]
In [1]: risch_integrate(ln(x+S(1)/2),x)
Out[1]: 
log(2 + 4⋅x)                     
──────────── - x + x⋅log(1/2 + x)
     2                           
[/code]
Which means that one of my uncommitted changes fixes it.  As for the 1/2 one, that's just a general problem that you're liable to encounter with floating point numbers, because of limitations in the Polys (which hopefully Mateusz will be fixing eventually).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>193</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1282318181</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>199</wp:comment_id>
    <wp:comment_author><![CDATA[Miha]]></wp:comment_author>
    <wp:comment_author_email>tloramus@siol.net</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>213.143.78.85</wp:comment_author_IP>
    <wp:comment_date>2010-08-26 18:31:08</wp:comment_date>
    <wp:comment_date_gmt>2010-08-26 18:31:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Fifth command should be 

git checkout -b integration3 asmeurer/integration3, 

not 

git checkout -b asmeurer/integration3 integration3,

right?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>179</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1282847471</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>200</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron Meurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>129.138.31.230</wp:comment_author_IP>
    <wp:comment_date>2010-08-26 20:41:16</wp:comment_date>
    <wp:comment_date_gmt>2010-08-26 20:41:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Oh, sorry.  You are right.  I always use the 
[code language="bash"]
git checkout asmeurer/integration3
git checkout -b integration3
[/code]
variant, so I get that confused sometimes.  I will fix the original reply.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>199</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1282855277</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>230</wp:comment_id>
    <wp:comment_author><![CDATA[Anton]]></wp:comment_author>
    <wp:comment_author_email>Soukhinov@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://iproc.ru</wp:comment_author_url>
    <wp:comment_author_IP>109.165.108.166</wp:comment_author_IP>
    <wp:comment_date>2010-11-29 16:22:21</wp:comment_date>
    <wp:comment_date_gmt>2010-11-29 16:22:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Can you provide references to the books that you think together are completely describing symbolic integration process?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>229</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1291047741</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>178</wp:comment_id>
    <wp:comment_author><![CDATA[xavier]]></wp:comment_author>
    <wp:comment_author_email>xavier.gnata@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>88.167.240.41</wp:comment_author_IP>
    <wp:comment_date>2010-08-08 11:48:39</wp:comment_date>
    <wp:comment_date_gmt>2010-08-08 11:48:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi,

Hum I'm not a git expert...how should I get your branch?
(I'm a linux user...just tell me how to get your git branch :))]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1281268122</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>179</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>68.42.37.143</wp:comment_author_IP>
    <wp:comment_date>2010-08-08 17:42:22</wp:comment_date>
    <wp:comment_date_gmt>2010-08-08 17:42:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi.

Don't worry, git is super easy if you are just using it to download someone's branch. So first (obviously), you need to install git.  It should be available in your Linux package manager.  Then, just cd into whatever directory you want SymPy, and run the following commands:

[code]
git clone git://github.com/sympy/sympy.git
cd sympy
git remote add asmeurer git://github.com/asmeurer/sympy.git
git fetch asmeurer
git checkout -b integration3 asmeurer/integration3
[/code]

And you are done.  Then you can just run <code>./bin/isympy</code>, and there should be a <code>risch_integrate()</code> function there for you to work with.  If you want to update the branch (which you should do often, because I'm always pushing up fixes/improvements, just do

[code]
git pull
[/code]

and it will do it.

You can run <code>git help command_name</code> to see what each command does.  I also created a <a href="http://code.google.com/p/sympy/wiki/GettingTheBleedingEdge" rel="nofollow">page</a> on the SymPy wiki about how to do this.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>178</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1281289345</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>180</wp:comment_id>
    <wp:comment_author><![CDATA[xavier]]></wp:comment_author>
    <wp:comment_author_email>xavier@gnata.eu</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>88.167.240.41</wp:comment_author_IP>
    <wp:comment_date>2010-08-08 20:56:08</wp:comment_date>
    <wp:comment_date_gmt>2010-08-08 20:56:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Ok so far I haven't found a bug... :)

Ho maybe one : 
In [44]: risch_integrate((1/3)*x, x)
Out[44]: 
                   2
0.166666666666667⋅x 

Why do we get a float? 

I can imagine that there is no symbolic fraction in sympy...is that right?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1281300971</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>181</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>68.42.37.143</wp:comment_author_IP>
    <wp:comment_date>2010-08-08 21:26:54</wp:comment_date>
    <wp:comment_date_gmt>2010-08-08 21:26:54</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[This is one of the disadvantages of using Python.  Python evaluates 1/3 to 0.333333… before SymPy gets a chance to even see it.  The solution is to never do number/number, always do number*Symbol/number, or you can do 

[code language="py"]
&gt;&gt;&gt; S(1)/3
1/3
[/code]

See <a href="http://docs.sympy.org/gotchas.html#python-numbers-vs-sympy-numbers" rel="nofollow">this page</a> for more information, and similar tips.

By the way, if you just pass it a rational function in x (no exp or log), it is just using the already existing ratint(), which works great, but it's nothing new.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>180</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1281302815</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>182</wp:comment_id>
    <wp:comment_author><![CDATA[xavier]]></wp:comment_author>
    <wp:comment_author_email>xavier@gnata.eu</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>88.167.240.41</wp:comment_author_IP>
    <wp:comment_date>2010-08-10 12:05:16</wp:comment_date>
    <wp:comment_date_gmt>2010-08-10 12:05:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Ok. It looks like it works just fine even in some corners cases
(Except the expected NotImplementedErrors).

I'm gonna test it with more complex inputs...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1281441919</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>183</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>68.42.37.143</wp:comment_author_IP>
    <wp:comment_date>2010-08-10 16:29:14</wp:comment_date>
    <wp:comment_date_gmt>2010-08-10 16:29:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Great! I am currently in the process of removing those NotImplementedErrors, so don't forget to do <code>git pull</code> every once in a while.  Also, I have fixed a few bugs that I've found on my own, so that's another good reason to do it.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>182</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1281457756</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>184</wp:comment_id>
    <wp:comment_author><![CDATA[schilly]]></wp:comment_author>
    <wp:comment_author_email>harald.schilly@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>131.130.16.104</wp:comment_author_IP>
    <wp:comment_date>2010-08-10 16:53:19</wp:comment_date>
    <wp:comment_date_gmt>2010-08-10 16:53:19</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[About differentiating between "failed" and "proven to be impossible" to integrate: I suggest in both cases you should return a custom exception, returning the unevaluated integral as an included object part of the exception, they are called something like "RischFailure" and "RischNonElementary"...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1281459200</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>185</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>68.42.37.143</wp:comment_author_IP>
    <wp:comment_date>2010-08-10 20:10:10</wp:comment_date>
    <wp:comment_date_gmt>2010-08-10 20:10:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Well, eventually, risch_integrate() will just be an internal function, and all integration will be done through integrate().  In that case, if risch_integrate() fails, it will just pass it on to the next method, or else return an unevaluated Integral().  I think I am going to create a NonElementaryIntegral class, which would be similar to the already existing unevaluated Integral class, except that it would be smart enough to not try to evaluate the integral, and it might pretty print differently, so that you can tell it's unevaluated because it's proven to be non-elementary and not just because it failed. 

The question is, what should 

<code>&gt;&gt;&gt; pprint(NonElementaryIntegral(exp(-x**2), x))</code>

look like?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>184</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1281471010</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>189</wp:comment_id>
    <wp:comment_author><![CDATA[The Risch Algorithm: Part 3, Liouville&#8217;s Theorem &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2010/08/14/the-risch-algorithm-part-3-liouvilles-theorem/</wp:comment_author_url>
    <wp:comment_author_IP>76.74.254.66</wp:comment_author_IP>
    <wp:comment_date>2010-08-14 02:55:47</wp:comment_date>
    <wp:comment_date_gmt>2010-08-14 02:55:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] continue to test my prototype risch_integrate() function in my integration3 branch, and tell me what you think (or if you find a bug). Possibly [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1281754548</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>193</wp:comment_id>
    <wp:comment_author><![CDATA[Benhuard]]></wp:comment_author>
    <wp:comment_author_email>benoit.huard@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>90.38.1.234</wp:comment_author_IP>
    <wp:comment_date>2010-08-20 14:54:46</wp:comment_date>
    <wp:comment_date_gmt>2010-08-20 14:54:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Integrating ln(x+c) doesn't work when the constant is not an integer, for instance

risch_integrate(ln(x+1/2),x)

raises

CoercionFailed: expected an integer, got 0.500000000000000

while
risch_integrate(ln(x+S(1)/2),x)

produces
TypeError: Not an iterable container

However, 
c=Symbol('c')
risch_integrate(ln(x+c),x)
returns the correct answer.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1282316087</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>409</wp:comment_id>
    <wp:comment_author><![CDATA[homework help]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.bayridgemathtutor.com/tutoring/bayridge-math-centers-teaching-kids-mathematics/</wp:comment_author_url>
    <wp:comment_author_IP>72.189.236.86</wp:comment_author_IP>
    <wp:comment_date>2011-11-07 00:07:52</wp:comment_date>
    <wp:comment_date_gmt>2011-11-07 00:07:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[<strong>homework help...</strong>

[...]Prototype risch_integrate() function ready for testing! &laquo; Aaron Meurer&#039;s SymPy Blog[...]...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>trackback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1320624473</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1320624473.5508";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>381</wp:comment_id>
    <wp:comment_author><![CDATA[Nondeterminism &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2011/06/05/nondeterminism/</wp:comment_author_url>
    <wp:comment_author_IP>72.233.61.89</wp:comment_author_IP>
    <wp:comment_date>2011-06-05 06:08:27</wp:comment_date>
    <wp:comment_date_gmt>2011-06-05 06:08:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] it is computed. To take an example from issue 2010, the issue about risch_integrate() (you may also recognize this example if you are a regular reader of this blog), the handle_first keyword argument to [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1307254108</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:14:"1307254108.368";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>The Risch Algorithm: Part 3, Liouville's Theorem</title>
  <link>http://asmeurersympy.wordpress.com/2010/08/14/the-risch-algorithm-part-3-liouvilles-theorem/</link>
  <pubDate>Sat, 14 Aug 2010 02:55:23 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=741</guid>
  <description/>
  <content:encoded><![CDATA[So this is the last official week of the Summer of Code program, and my work is mostly consisting of removing <code>NotImplementedError</code>s (i.e., implementing stuff), and fixing bugs. None of this is particularly interesting, so instead of talking about that, I figured I would produce another one of my Risch Algorithm blog posts.  It is recommended that you read parts <a href="http://asmeurersympy.wordpress.com/2010/06/30/the-risch-algorithm-part-1/">1</a> and <a href="http://asmeurersympy.wordpress.com/2010/07/24/the-risch-algorithm-part-2-elementary-functions/">2</a> first, as well as my post on <a href="http://asmeurersympy.wordpress.com/2010/06/11/integration-of-rational-functions/">rational function integration</a>, which could be considered part 0.

<strong>Liouville's Theorem</strong>
Anyone who's taken calculus intuitively knows that integration is hard, while differentiation is easy.  For differentiation, we can produce the derivative of any elementary function, and we can do so easily, using a simple algorithm consisting of the sum and product rules, the chain rule, and the rules for the derivative of all the various elementary functions.  But for integration, we have to try to work backwards.  

There are two things that make integration difficult.  First is the existence of functions that simply do not have any elementary antiderivative.  $latex e^{-x^2}$ is perhaps the most famous example of such a function, since it arises from the normal distribution in statistics.  But there are many others.  $latex \sin{(x^2)}$, $latex \frac{1}{\log{(x)}}$, and $latex x^x$ are some other examples of famous non-integrable functions.  

The second problem is that no one single simple rule for working backwards will always be applicable.  We know that u-substitution and integration by parts are the reverse of the chain rule and the product rule, respectively.  But those methods will only work if those rules were the ones that were applied originally, and then only if you chose the right $latex u$ and $latex dv$.  

But there is a much simpler example that gets right down to the point with Liouville's theorem.  The power rule, which is that $latex \frac{d}{dx}x^n=nx^{n-1}$ is easily reversed for integration.  Given the power rule for differentiation, it's easy to see that the reverse rule should be $latex \int{x^ndx}=\frac{x^{n+1}}{n+1}$.  This works fine, except that were are dividing something, $latex n+1$.  In mathematics, whenever we do that, we have to ensure that whatever we divide by is not 0. In this case, it means that we must assert $latex n\neq -1$.  This excludes $latex \int{\frac{1}{x}dx}$.  We know from calculus that this integral requires us to introduce a special function, the natural logarithm.  

But we see that $latex n=-1$ is the only exception to the power rule, so that the integral of any (<a href="http://en.wikipedia.org/wiki/Laurent_polynomial">Laurent</a>) polynomial is again a (Laurent) polynomial, plus a logarithm.  Recall from part 0 (<a href="http://asmeurersympy.wordpress.com/2010/06/11/integration-of-rational-functions/">Rational Function Integration</a>) that the same thing is true for any rational function: the integral is again a rational function, plus a logarithm (we can combine multiple logarithms into one using the logarithmic identities, so assume for simplicity that there is just one).  The argument is very similar, too.  Assume that we have split the denominator rational function into linear factors in the <a href="http://en.wikipedia.org/wiki/Algebraic_splitting_field">algebraic splitting field</a> (such as the complex numbers).  Then perform a partial fractions decomposition on the rational function.  Each term in the decomposition will be either a polynomial, or of the form $latex \frac{a}{(x - b)^n}$. The integration of these terms is the same as with the power rule, making the substitution $latex u = x - b$. When $latex n\geq 2$, the integral will be $latex \frac{-1}{n - 1}\frac{a}{(x - b)^{n - 1}}$; when $latex n = 1$, the integral will be $latex a\log{(x - b)}$.  Now computationally, we don't want to work with the algebraic splitting field, but it turns out that we don't need to actually compute it to find the integral.  But theory is what we are dealing with here, so don't worry about that.  

Now the key observation about differentiation, as I have pointed out in the earlier parts of this blog post series,  is that the derivative of an elementary function can be expressed in terms of itself, in particular, as a polynomial in itself.  To put it another way, functions like $latex e^x$, $latex \tan{(x)}$, and $latex \log{(x)}$ all satisfy linear differential equations with rational coefficients (e.g., for these, $latex y'=y$, $latex y'=1 + y^2$, and $latex y'=\frac{1}{x}$).  

Now, the theory gets more complicated, but it turns out that, using a careful analysis of this fact, we can prove a similar result to the one about rational functions to any elementary function. In a nutshell, Liouville's Theorem says this:  if an elementary function has an elementary integral, then that integral is a composed only of functions from the original integrand, plus a finite number of logarithms of functions from the integrand, which can be considered one logarithm, as mentioned above ("functions from" more specifically means a rational function in the terms from our elementary extension).  Here is the formal statement of the theorem.

<strong>Theorem (Liouville's Theorem - Strong version)</strong>
<em>Let $latex K$ be a differential field, $latex C=\mathrm{Const}(K)$, and $latex f\in K$. If there exist an elementary extension $latex E$ of $latex K$ and $latex g \in E$ such that $latex Dg =f$, then there are $latex v \in K$, $latex c_1, \dots, c_n\in \bar{C}$, and $latex u_1, \dots,u_n\in K(c_1,\dots,c_n)^*$ such that 
<h1>
$latex f = Dv + \sum_{i=1}^n c_i\frac{Du_i}{u_i}$.
</h1></em>
Looking closely at the formal statement of the theorem, we can see that it says the same thing as my "in a nutshell" statement.  $latex K$ is the differential extension, say of $latex \mathbb{Q}(x)$, that contains all of our elementary functions (see <a href="http://asmeurersympy.wordpress.com/2010/07/24/the-risch-algorithm-part-2-elementary-functions/">part 2</a>).  $latex E$ is an extension of $latex K$.  The whole statement of the theorem is that $latex E$ need not be extended from $latex K$ by anything more than some logarithms.   $latex f$ is our original function and $latex g=\int f$.  Recall from <a href="http://asmeurersympy.wordpress.com/2010/06/30/the-risch-algorithm-part-1/">part 1</a> that $latex Dg = \frac{Du}{u}$ is just another way of saying that $latex g = \log{(u)}$.  The rest of the formal statement is some specifics dealing with the constant field, which assure us that we do not need to introduce any new constants in the integration. This fact is actually important to the decidability of the Risch Algorithm, because many problems about constants are either unknown or undecidable (such as the transcendence degree of $latex \mathbb{Q}(e, \pi)$).  But this ensures us that as long as we start with a constant field that is computable, our constant field for our antiderivative will also be computable, and will in fact be the same field, except for some possible algebraic extensions (the $latex c_i$).  

At this point, I want to point out that even though my work this summer has been only on the purely transcendental case of the Risch Algorithm, Liouville's Theorem is true for all elementary functions, which includes algebraic functions.  However, if you review the proof of the theorem, the proof of the algebraic part is completely different from the proof of the transcendental part, which is the first clue that the algebraic part of the algorithm is completely different from the transcendental part (and also a clue that it is harder).

Liouville's Theorem is what allows us to prove that a given function does not have an elementary antiderivative, by giving us the form that any antiderivative must have.  We first perform the same Hermite Reduction from the <a href="http://asmeurersympy.wordpress.com/2010/06/11/integration-of-rational-functions/">rational integration case</a>. Then, a generalization of the same Lazard-Rioboo-Trager Algorithm due to Rothstein allows us to find the logarithmic part of any integral (the $latex \sum_{i=1}^n c_i\frac{Du_i}{u_i}$ from Liouville's Theorem).  

Now a difference here is that sometimes, the part of the integrand that corresponds to the $latex \frac{a}{x - b}$ for general functions doesn't always have an elementary integral (these are called <em>simple</em> functions.  I think I will talk about them in more detail in a future post in this series).   An example of this is $latex \frac{1}{\log{(x)}}$.  Suffice it to say that any elementary integral of $latex \frac{1}{\log{(x)}}$ must be part of some log-extension of $latex \mathbb{Q}(x, \log{(x)})$, and that we can prove that no such logarithmic extension exists in the course of trying to compute it with the Lazard-Rioboo-Rothstein-Trager Algorithm.

In the rational function case, after we found the rational part and the logarithmic part, we were practically done, because the only remaining part was a polynomial.  Well, for the general transcendental function case, we are left with an analogue, which are called <em>reduced</em> functions, and we are far from done.  This is the hardest part of the integration algorithm.  This will also be the topic of a future post in this series.  Suffice it to say that this is where most of the proofs of non-integrability come from, including the other integrals than $latex \frac{1}{\log{(x)}}$ that I gave above.  

<strong>Conclusion</strong>
That's it for now.  Originally, I was also going to include a bit on the structure theorems too, but I think I am going to save that for part 4 instead.  I may or may not have another post ready before the official end of coding date for Google Summer of Code, which is Monday (three days from now).  I want to make a post with some nice graphs comparing the timings of the new <code>risch_integrate()</code> and the old <code>heurisch()</code> (what is currently behind SymPy's <code>integrate()</code>).  But as I have said before, I plan on continuing coding the integration algorithm beyond the program until I finish it, and even beyond that (there are lots of cool ways that the algorithm can be extended to work with special functions, there's definite integration with Meijer-G functions, and there's of course the algebraic part of the algorithm, which is a much larger challenge).  And along with it, I plan to continue keeping you updated with blog posts, including at least all the Risch Algorithm series posts that I have promised (I have counted at least three topics that I have explicitly promised but haven't done yet).  And of course, there will be the mandatory GSoC wrap-up blog post, detailing my work for the summer.  

Please continue to test my prototype <a href="http://asmeurersympy.wordpress.com/2010/08/05/prototype-risch_integrate-function-ready-for-testing/"><code>risch_integrate()</code></a> function in my <a href="http://github.com/asmeurer/sympy/tree/integration3">integration3</a> branch, and tell me what you think (or if you find a bug).]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>741</wp:post_id>
  <wp:post_date>2010-08-14 02:55:23</wp:post_date>
  <wp:post_date_gmt>2010-08-14 02:55:23</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>the-risch-algorithm-part-3-liouvilles-theorem</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>380</wp:comment_id>
    <wp:comment_author><![CDATA[Update for the Beginning of the Summer &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2011/05/26/update-for-the-beginning-of-the-summer/</wp:comment_author_url>
    <wp:comment_author_IP>76.74.254.93</wp:comment_author_IP>
    <wp:comment_date>2011-05-26 05:42:11</wp:comment_date>
    <wp:comment_date_gmt>2011-05-26 05:42:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] So the Google Summer of Code coding period officially started on Monday, and in solidarity with the students, I will be blogging once a week about various things. Some of the posts will just be about what I have done that week. Others will be continuations of my Risch Algorithm series of blog posts (see parts 0, 1, 2, and 3). [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1306388532</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1306388532.8283";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Major API Change for the Risch Algorithm Functions</title>
  <link>http://asmeurersympy.wordpress.com/2010/12/27/major-api-change-for-the-risch-algorithm-functions/</link>
  <pubDate>Mon, 27 Dec 2010 07:34:30 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=782</guid>
  <description/>
  <content:encoded><![CDATA[I have been able to get to work again on the Risch Algorithm now that I have a month winter break from classes.  So the first thing I did was commit a bunch of bug fixes that had been sitting there since the end of the summer.  Then, I set out to make a major internal API change to the entire Risch Algorithm.

Let me give some background.  When I first started programming the Risch Algorithm at the beginning of the summer, I didn't have a very good idea of how differential extensions worked yet (remember that I programmed the algorithm as I learned it from Bronstein's book).  Let me use the function <code>derivation()</code> to demonstrate how the API has changed.  <code>derivation()</code> takes the Poly <code>p</code> in <code>t</code> and computes the derivative (<code>t</code> is some transcendental extension, like $latex e^x$).  Also, the integration variable is <code>x</code>.  The first internal API that I used was

<code>derivation(p, D, x, t)</code>

where <code>D</code> is a Poly of the derivative of <code>t</code>, and <code>x</code> and <code>t</code> are Symbols (see <a href="https://github.com/asmeurer/sympy/commit/0f6a3d90f724118fadc5fdaf290a0cb3e3963efd">this commit</a>).   The problem here is that <code>p</code> might not be in just one symbol, <code>t</code>, but in many. This would happen whenever the function had more than one transcendental function, or extension, in it.  So, for example, $latex e^x\log{x}$ would have this problem. Surprisingly, according to the git log, it took me until July 4 to figure this out (that above linked commit, which is the first occurrence of this function and when I started the full algorithm, dates from June 7, so it took me almost a month!), after which I had already written a good portion of the Risch Algorithm.  I changed the API to

<code>derivation(p, D, x, T)</code>

where <code>T</code> is a list of the extension variables and <code>D</code> is a list of the derivations of the respective elements of <code>T</code> with respect to the lower elements and x (see <a href="https://github.com/asmeurer/sympy/commit/20b7a5f8ca8dec579065f85583f11cc0955b96f0">this commit</a>).  Now, the derivation of <code>x</code> is always <code>Poly(1, x)</code>, so I didn't think it was necessary to include it.  But it turns out that it is easier to just always include this in <code>D</code> rather than try to special case it in the code.  Also, the lowest extension variable, <code>x</code>, isn't used very often in the code, so it also doesn't make much sense to keep it separate from the rest of the variables in <code>T</code>.  Now this didn't take me as long to figure out (July 11).  Therefore, I changed the API to just

<code>derivation(p, D, T)</code>

where the first element of <code>T</code> is always <code>x</code> and the first element of <code>D</code> is always <code>Poly(1, x)</code> (see <a href="https://github.com/asmeurer/sympy/commit/bca2b19844ae71aa1ef8e27a9f77eabb70b4aa5f">this commit</a>).

Now this API worked quite well for the remainder of the summer.  However, at the very end, I discovered that a function required to handle some special cases in certain parts of the algorithm needed four more lists (the elements of the extension that are logarithms, the elements of the extension that are exponentials, the arguments of those logarithms, and the arguments of those exponentials).  I had previously thought that these lists would only be needed when creating the extension at the beginning of integration, but it turned out that this was not the case and that they could be needed in several rather deep places in the algorithm.  The only way to get them there would be to pass them through to every single function in the algorithm.    

So I was faced with a dilemma.  I didn't want to pass six arguments through each function just because a few might need them all.  I knew that the answer was to create an object to store all the data for a differential extension and to just pass this object around.  Unfortunately, this happened at the very end of the summer, so I hadn't been able to do that until now.  

This brings us to now.  Over the past couple of weeks, I created an object called <code>DifferentialExtension</code>, and replaced the API in the Risch Algorithm to use it.  See <a href="https://github.com/asmeurer/sympy/commit/d9d9548625513188aaa663621bfe4e097aebf741">this commit</a> and <a href="https://github.com/asmeurer/sympy/commit/1935b6d6e1fdf8eae4deb5a4f56ea53c5d6989fa">this commit</a> and some of the ones in between to see what I did. More or less, the object is like a C struct---it does little more than hold a lot of information as attributes.  However, at the suggestion of Ronan Lamy on the <a href="http://groups.google.com/group/sympy/browse_thread/thread/a051b5ba1fb5cb4d">mailing list</a>, I have moved all the relevant code for building the extension from the <code>build_extension()</code> function into <code>DifferentialExtension.__init__()</code>.  I have also created some "magic" to handle the recursive nature of the algorithm.  A DifferentialExtension object has an attribute <code>level</code>, which represents the level of the extension that the algorithm is working in.  So you can store all the derivations of the extension in <code>DifferentialExtension.D</code>, but only have <code>DifferentialExtension.d</code> point to the "current" outermost derivation.  This replaces things like

<code>D = D[:-1]
T = T[:-1]
</code> 

from the old API to just

<code>DE.decrement_level()
</code>

(and then later on, <code>DE.increment_level()</code>).  The entire API is now just

<code>derivation(p, DE)</code>

where <code>DE</code> is a <code>DifferentialExtension</code> object.  Changing the API of the entire code base at this point was a bit of work, but I have finally finished it, and I must say, this is much cleaner.  True, you now have to use <code>DE.t</code> everywhere instead of <code>t</code> (with <code>t = T[-1]</code> at the top of the function), which is three characters more space for every use, but I think in the end it is cleaner.  For example, the function that used to be

<code>is_log_deriv_k_t_radical(fa, fd, L_K, E_K, L_args, E_args, D, T)</code>

is now just

<code>is_log_deriv_k_t_radical(fa, fd, DE)</code>.

Also, because it is an object, I can do cool things like override <code>DifferentialExtension.__str__()</code> to print out a tuple of the most important attributes of the object, making debugging much easier (now there is just one print statement instead of five).  

Another thing I had to do was to allow the creation of these objects manually, because what is now <code>DifferentialExtension.__init__()</code> cannot yet handle, for example, tangent extensions, but some of the tests involve those.  So I created an <code>extension</code> flag to <code>__init__()</code> to which you could pass a dictionary, and it would create a skeleton extension from that (see <a href="https://github.com/asmeurer/sympy/commit/7121b06eab3f1e0f8464c287438fb7175f07762b">this commit</a>).  I made it smart enough to create some attributes automatically, so I only have to pass the list <code>D</code> in most tests---it creates attributes like <code>T</code> from that automatically.  Thus, this in some ways made the tests a little simpler, because I didn't have to worry about <code>T</code> any more.  

We'll see how things go, but this fourth API change should hopefully be the last.  This should also make it much easier whenever I add trigonometric function support, where I will have to add even more attributes to the object.  I won't have to change the code in any existing function (unless it specifically needs to be able to know about trig extensions), because, to them, the information in <code>DE</code> will not change.

So the good news behind all of this, as I mentioned at the beginning of this post, is that I can now write some algorithm that requires those <code>L_K</code>, <code>E_K</code>, <code>L_args</code>, <code>E_args</code> variables from arbitrary places within the algorithm.  This should allow me to completely finish the exponential case.  So look forward soon to a <code>risch_integrate()</code> that can handle completely any transcendental function of exponentials (either produce an integral or prove that no elementary integral exists).  

And just to be clear, this doesn't change anything with <code>risch_integrate()</code>---this is only an internal change. And at the moment, it doesn't add any features, though that should soon change. So keep on testing it for me!  If you see any errors along the lines of "Variable t not defined," it probably means that I missed that one when I was switching the API due to poor test coverage in that area of the code.  I would love to know about any errors you find, or, indeed, any testing you do with <code>risch_integrate</code>.  Remember that you can obtain my branch at <a href="https://github.com/asmeurer/sympy/tree/integration3">my GitHub account (branch integration3)</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>782</wp:post_id>
  <wp:post_date>2010-12-27 07:34:30</wp:post_date>
  <wp:post_date_gmt>2010-12-27 07:34:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>major-api-change-for-the-risch-algorithm-functions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>2010 in review</title>
  <link>http://asmeurersympy.wordpress.com/2011/01/02/2010-in-review/</link>
  <pubDate>Sun, 02 Jan 2011 23:07:04 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=810</guid>
  <description/>
  <content:encoded><![CDATA[<i>Here's some silly thing that WordPress sent me:</i>
				
						<p>The stats helper monkeys at WordPress.com mulled over how this blog did in 2010, and here's a high level summary of its overall blog health:</p>
		
						<p align="center"><img style="border:1px solid #ddd;background:#f5f5f5;padding:20px;" src="http://s0.wp.com/i/annual-recap/meter-healthy4.gif" width="250" height="183" alt="Healthy blog!" /></p>
				<p align="center">The <em>Blog-Health-o-Meter™</em> reads This blog is on fire!.</p>
				
				<h2>Crunchy numbers</h2>
		
		
					
		
			<a href="http://asmeurersympy.files.wordpress.com/2009/07/code-block-2.png"><img src="http://asmeurersympy.files.wordpress.com/2009/07/code-block-2.png?w=288" alt="Featured image" style="max-height:230px;float:right;border:1px solid #ddd;background:#fff;margin:0 0 1em 1em;padding:6px;" /></a>
			
		
		<p>A Boeing 747-400 passenger jet can hold 416 passengers.  This blog was viewed about <strong>6,800</strong> times in 2010.  That's about 16 full 747s.</p>

		<p></p><p>In 2010, there were <strong>16</strong> new posts, growing the total archive of this blog to 41 posts. There were <strong>7</strong> pictures uploaded, taking up a total of 1mb. </p>
				
				<p>The busiest day of the year was July 4th with <strong>103</strong> views. The most popular post that day was <a style="color:#08c;" href="http://asmeurersympy.wordpress.com/2010/06/30/the-risch-algorithm-part-1/">The Risch Algorithm: Part 1</a>.</p>
				<br />

				<h2>Where did they come from?</h2>
		
							<p>The top referring sites in 2010 were <strong><a href="http://code.google.com">code.google.com</a></strong>, <strong><a href="http://planet.sympy.org">planet.sympy.org</a></strong>, <strong><a href="http://www.facebook.com">facebook.com</a></strong>, <strong><a href="http://www.stackoverflow.com">stackoverflow.com</a></strong>, and <strong><a href="http://socghop.appspot.com">socghop.appspot.com</a></strong>.</p>
								<p>Some visitors came searching, mostly for <strong><a href="http://www.google.com/search?q=risch%20algorithm">risch algorithm</a></strong>, <strong><a href="http://www.google.com/search?q=pudb">pudb</a></strong>, <strong><a href="http://www.google.com/search?q=integrate%20exponential">integrate exponential</a></strong>, <strong><a href="http://www.google.com/search?q=equations%20with%20homogeneous%20coefficients">equations with homogeneous coefficients</a></strong>, and <strong><a href="http://www.google.com/search?q=xcode%20trailing%20whitespace">xcode trailing whitespace</a></strong>.</p>
<em>I have linked the search terms to their respective Google searches, so you can see how far up my blog posts are in the results list.</em>
				
<div style="clear:both;"><br /></div>

					
			<h2>Attractions in 2010</h2>
			<p>These are the posts and pages that got the most views in 2010.</p>

			
								<div style="clear:left;float:left;font-size:24pt;line-height:1em;margin:-5px 10px 20px 0;">1</div>
					<a style="margin-right:10px;" href="http://asmeurersympy.wordpress.com/2010/06/30/the-risch-algorithm-part-1/">The Risch Algorithm: Part 1</a> <span style="color:#999;font-size:8pt;">June 2010</span><br />3 comments											
			
								<div style="clear:left;float:left;font-size:24pt;line-height:1em;margin:-5px 10px 20px 0;">2</div>
					<a style="margin-right:10px;" href="http://asmeurersympy.wordpress.com/2009/11/13/how-to-get-both-32-bit/">How to get both 32-bit and 64-bit Python in Snow Leopard</a> <span style="color:#999;font-size:8pt;">November 2009</span><br />5 comments and 1 Like on WordPress.com,											
			
								<div style="clear:left;float:left;font-size:24pt;line-height:1em;margin:-5px 10px 20px 0;">3</div>
					<a style="margin-right:10px;" href="http://asmeurersympy.wordpress.com/2009/07/20/modifying-a-list-while-looping-through-it-in-python/">Modifying a list while looping through it in Python</a> <span style="color:#999;font-size:8pt;">July 2009</span><br />13 comments											
			
								<div style="clear:left;float:left;font-size:24pt;line-height:1em;margin:-5px 10px 20px 0;">4</div>
					<a style="margin-right:10px;" href="http://asmeurersympy.wordpress.com/2010/07/12/integration-of-exponential-functions/">Integration of exponential functions</a> <span style="color:#999;font-size:8pt;">July 2010</span><br />3 comments											
			
								<div style="clear:left;float:left;font-size:24pt;line-height:1em;margin:-5px 10px 20px 0;">5</div>
					<a style="margin-right:10px;" href="http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients/">First Order Differential Equations with Homogeneous Coefficients</a> <span style="color:#999;font-size:8pt;">May 2009</span><br />2 comments											
			
			
		
<em>I wonder where things are coming from from Facebook.  I do not have an account there, so I can't search it to find out.</em>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>810</wp:post_id>
  <wp:post_date>2011-01-02 23:07:04</wp:post_date>
  <wp:post_date_gmt>2011-01-02 23:07:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>2010-in-review</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>wpcom_recap</wp:meta_key>
    <wp:meta_value><![CDATA[2010]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>I am now the SymPy project leader</title>
  <link>http://asmeurersympy.wordpress.com/2011/01/09/i-am-now-the-sympy-project-leader/</link>
  <pubDate>Sun, 09 Jan 2011 00:29:53 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=820</guid>
  <description/>
  <content:encoded><![CDATA[You can imagine my surprise when I opened my email last Monday and saw this message from Ondrej:

<blockquote>
Hi Aaron,

would you like to become the main maintainer/project leader for sympy?
In the last year, it is clearly you, who does most of the work, and
also your blog has quite some visibility now.
It'd be cool to do some release from time to time. Mateusz is
finishing is poly's branch, so probably his code would go into the
release.
</blockquote>

So I guess now I am the project leader for SymPy.  As to what exactly this means, I am not yet entirely sure, but so far it has meant that I get to do a lot more work than before (yay!).

Actually, the work is because I have spent the last week working nonstop to get things ready to do a release.  I should have a release candidate for SymPy 0.7.0 ready some time next week.  I'll post more here about what's change, but this is going to be a big release.  The biggest change will be the new polys, which makes things much faster and more powerful.  

Also, I will try to post things here relating to SymPy as a whole, not just my work.  

Ondrej, by the way, isn't going anywhere. He plans on doing some work on ways to get SymPy out to more people by writing more/better web and mobile interfaces for it.  A big thanks to Ondrej and the SymPy community for making such an awesome piece of software!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>820</wp:post_id>
  <wp:post_date>2011-01-09 00:29:53</wp:post_date>
  <wp:post_date_gmt>2011-01-09 00:29:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>i-am-now-the-sympy-project-leader</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:comment>
    <wp:comment_id>306</wp:comment_id>
    <wp:comment_author><![CDATA[Jeff Pickhardt]]></wp:comment_author>
    <wp:comment_author_email>pickhardt@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>67.188.234.115</wp:comment_author_IP>
    <wp:comment_date>2011-01-15 23:10:34</wp:comment_date>
    <wp:comment_date_gmt>2011-01-15 23:10:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Congratulations!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1295133035</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1295133036.1614";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>True is True is False is True is False</title>
  <link>http://asmeurersympy.wordpress.com/2011/03/15/true-is-true-is-false-is-true-is-false/</link>
  <pubDate>Tue, 15 Mar 2011 22:29:15 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=828</guid>
  <description/>
  <content:encoded><![CDATA[Time for <a href="http://asmeurersympy.wordpress.com/2009/07/20/modifying-a-list-while-looping-through-it-in-python/">another</a> <a href="http://asmeurersympy.wordpress.com/2010/06/16/strange-python-behavior-can-someone-please-explain-to-me-what-is-going-on-here/">one</a> of my WTF Python blog posts.  Yesterday, I randomly typed this in a Python session (it was late at night):

[code language="py"]
&gt;&gt;&gt; True is True is False is True is False
False
[/code]

First a little background, in case you don't know.  The <code>is</code> operator in Python does exact object comparison in memory. Unlike <code>==</code>, which only compares it two objects are equal, <code>is</code> only returns True if both arguments have the same memory address.  So you can have something like:

[code language="py"]
&gt;&gt;&gt; a = 12345
&gt;&gt;&gt; b = 12345
&gt;&gt;&gt; a == b
True
&gt;&gt;&gt; a is b
False
[/code]

Now, there are a handful of Python built-ins that are always equal one another with the <code>is</code> operator.  <code>True</code> and <code>False</code> are two such constants:

[code language="py"]
&gt;&gt;&gt; a = True
&gt;&gt;&gt; b = True
&gt;&gt;&gt; a == b
True
&gt;&gt;&gt; a is b
True
&gt;&gt;&gt; c = False
&gt;&gt;&gt; d = False
&gt;&gt;&gt; c == d
True
&gt;&gt;&gt; c is d
True
[/code]

Now, going back to the above, we see that each <code>is</code> returns <code>True</code> or <code>False</code>, which is then evaluated with the next one.  Or at least that is what you would think is happening.  But go back and look at it again, and see if you can figure out what it should evaluate to.  You could probably guess that something was amiss from the fact that I was blogging about it.  If you haven't figured it out already, look at the following:

[code language="py"]
&gt;&gt;&gt; True is True is False is True is False
False
&gt;&gt;&gt; (((True is True) is False) is True) is False
True
&gt;&gt;&gt; True is (True is (False is (True is False)))
True
[/code]

So it seems that <code>is</code> does not associate to the left or to the right.  Let's see if we can figure out what is going on.  First off, <code>True is True</code>, etc. do behave as you expect them to:

[code language="py"]
&gt;&gt;&gt; True is True
True
&gt;&gt;&gt; False is False
True
&gt;&gt;&gt; True is False
False
&gt;&gt;&gt; False is True
False
[/code]

It is when we start using multiple <code>is</code>s in the same statement that we start seeing problems:

[code language="py"]
&gt;&gt;&gt; False is False is False
True
&gt;&gt;&gt; (False is False) is False
False
[/code]

So what's going on here?  <code>False is False</code> is True, so maybe it is short-circuiting somehow.  

[code language="py"]
&gt;&gt;&gt; True is False is False
False
&gt;&gt;&gt; False is False is True
False
[/code]

No, that is not it.  Those reduce to <code>False is False</code> and <code>True is True</code> when associating to the left, respectively, and <code>True is True</code> and <code>True is True</code> when associating to the right.  

Finally, at this point, it occurs to me what is really going on.  Have you figured it out too (or maybe you already knew all along)?  Maybe you can guess it from this statement, which uses <code>None</code>, another built-in object that always compares equal to itself with the <code>is</code> operator:

[code language="py"]
&gt;&gt;&gt; None is None is None
True
[/code]

So you see what is happening?  <code>is</code> doesn't associate at all.  Rather, using multiple <code>is</code>s in one statement does multiple comparisons at once.  Any <code>a is b is … x</code> will return <code>True</code> if <code>a</code>, <code>b</code>, …, and <code>x</code> are all equal by the <code>is</code> operator (they share the same identity or memory address), and <code>False</code> otherwise.  Actually, this isn't surprising, since <code>==</code> works the same way:

[code language="py"]
&gt;&gt;&gt; False == False == False
True
&gt;&gt;&gt; (False == False) == False
False
[/code]

This syntax can actually be useful to test equality of three or more items at once efficiently (Python will not evaluate the same operand more than once, and it short circuits).  But it can be confusing when comparing with <code>True</code> or <code>False</code>, since <code>a is b</code> and <code>a == b</code> themselves evaluate to one of those values.  So remember that it is NOT associative in any way.  Rather, it acts as an n-way comparison. 

Finally, as <a href="http://docs.python.org/reference/expressions.html#summary">this table</a> of operator precedence in Python shows, <code>is</code> and <code>==</code> have the same precedence in Python.  Therefore, it should be possible to combine the two in these same statement.  Indeed, you can:

[code language="py"]
&gt;&gt;&gt; a = 12345
&gt;&gt;&gt; b = 12345
&gt;&gt;&gt; c = b
&gt;&gt;&gt; a == b == c
True
&gt;&gt;&gt; a is b is c
False
&gt;&gt;&gt; # Because this is False
... 
&gt;&gt;&gt; a is b
False
&gt;&gt;&gt; # But this is True
... 
&gt;&gt;&gt; b is c
True
&gt;&gt;&gt; # So we get
... 
&gt;&gt;&gt; a == b is c
True
[/code]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>828</wp:post_id>
  <wp:post_date>2011-03-15 22:29:15</wp:post_date>
  <wp:post_date_gmt>2011-03-15 22:29:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>true-is-true-is-false-is-true-is-false</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:comment>
    <wp:comment_id>366</wp:comment_id>
    <wp:comment_author><![CDATA[michwill]]></wp:comment_author>
    <wp:comment_author_email>michwill@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>136.186.19.52</wp:comment_author_IP>
    <wp:comment_date>2011-03-16 00:42:49</wp:comment_date>
    <wp:comment_date_gmt>2011-03-16 00:42:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Awesome. You waked me up)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1300236169</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1300236169.8305";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>369</wp:comment_id>
    <wp:comment_author><![CDATA[Clay]]></wp:comment_author>
    <wp:comment_author_email>clayton.enga@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>207.6.211.226</wp:comment_author_IP>
    <wp:comment_date>2011-04-09 06:47:55</wp:comment_date>
    <wp:comment_date_gmt>2011-04-09 06:47:55</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for the interesting post. Previously I had thought of Python operators the way I think of C operators. In C, the meaning of a multi-operator expression is the composition of the individual operators (with parentheses added according to associativity and precedence). Not so with Python's 'is' and '=='...

I think this is a good language design choice. It makes n-way comparisons concise but readable.

By the way, another operator that does not associate is '='.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1302331676</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1302331676.3524";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>666</wp:comment_id>
    <wp:comment_author><![CDATA[Infinitely nested lists in Python &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2012/09/19/infinitely-nested-lists-in-python/</wp:comment_author_url>
    <wp:comment_author_IP>72.232.113.13</wp:comment_author_IP>
    <wp:comment_date>2012-09-19 04:21:18</wp:comment_date>
    <wp:comment_date_gmt>2012-09-19 04:21:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] of this blog know that I sometimes like to write about some strange, unexpected, and unusual things in Python that I stumble across. This post is another one of [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1348028479.1735019683837890625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1348028479</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>SymPy is a Google Summer of Code 2011 Mentoring Organization</title>
  <link>http://asmeurersympy.wordpress.com/2011/03/18/sympy-is-a-google-summer-of-code-2011-mentoring-organization/</link>
  <pubDate>Fri, 18 Mar 2011 22:50:04 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=834</guid>
  <description/>
  <content:encoded><![CDATA[I am proud to announce that SymPy has been accepted as a mentoring organization for Google Summer of Code 2011.  This is great news for the project.  Although we have participated in the past under the umbrella of the Python Software Foundation and Portland State University mentoring organizations, this is the first time that we have been accepted as a mentoring organization.  Out of 417 organizations that applied to Google, 175 were accepted, 50 of which were new.

In case you don't know, Google Summer of Code is a program run by Google every year where they pay college students all around the world to write code for open source projects. Each student has a mentor assigned to him/her, who helps the student get started with interacting with open source (most students who are accepted have never participated in open source before).  

So now that were are accepted, students are open to applications.  The actual application period opens on March 28, and closes on April 8 (see <a href="http://www.google-melange.com/document/show/gsoc_program/google/gsoc2011/timeline">the program timeline</a>).

To students:

If you are interested in applying, please write the to mailing list and introduce yourself.  The program is open to anyone worldwide who is 18 years of age or older who is enrolled in a higher education institution (this includes undergraduate and graduate).  If you are interested in applying, here is what you should do (if you have not already):

- As I said above, write to the list and introduce yourself.  You might also join our IRC channel, which is #sympy on freenode.

- Start thinking about what you want to apply to do.  See our <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Ideas">ideas page</a>.  However, we are open to ideas that are not on that page. Anything that fits in a computer algebra system would fit in SymPy.  If you have an idea not on that page, please discuss it on our mailing list, so we can see if it has not already be implemented, and if it is fitting for SymPy and for a project.  I recommend you apply to do something that you are interested in personally.

- We require for any student to be accepted that he/she submit at least one patch to SymPy, which gets reviewed and pushed in.  See <a href="http://code.google.com/p/sympy/issues/list?can=2&amp;q=label%3AEasyToFix">issues labeled EasyToFix in our issue tracker</a> for some easy to fix issues that are a good place to start.  Don't worry if you do not know how to send in a patch or use git.  We will help you (that is the whole point of the program).  Just ask on the mailing list, on the issue page, or on IRC.

- You should start thinking about your application.  See our <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application-Template">application template</a> (it will also be at our page on the Google site).  If you like, you can start a page on our wiki to write your proposal.  If you do this, we will help you edit it (though understand that we will not help you write it).  Remember that we want you to get accepted just as much as you do, so you can help improve SymPy!

To SymPy developers:

- We need people who are willing to mentor students.  If you are willing to mentor, please add your name to the bottom of the <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-ideas">ideas page</a>. 

- Please edit the ideas page to improve formatting and add new ideas.

Good luck to all students who plan on applying!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>834</wp:post_id>
  <wp:post_date>2011-03-18 22:50:04</wp:post_date>
  <wp:post_date_gmt>2011-03-18 22:50:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>sympy-is-a-google-summer-of-code-2011-mentoring-organization</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:comment>
    <wp:comment_id>371</wp:comment_id>
    <wp:comment_author><![CDATA[Accepted GSoC Students Announced &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2011/04/27/accepted-gsoc-students-announced/</wp:comment_author_url>
    <wp:comment_author_IP>72.233.104.50</wp:comment_author_IP>
    <wp:comment_date>2011-04-27 19:45:32</wp:comment_date>
    <wp:comment_date_gmt>2011-04-27 19:45:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] see my previous blog post about [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_rechecking</wp:meta_key>
      <wp:meta_value>1</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1303934735.6688";s:7:"message";s:55:"Akismet cleared this comment during an automatic retry.";s:5:"event";s:10:"cron-retry";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1303933532.2333";s:7:"message";s:92:"Akismet was unable to check this comment (response: ), will automatically retry again later.";s:5:"event";s:11:"check-error";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1303934736</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Accepted GSoC Students Announced</title>
  <link>http://asmeurersympy.wordpress.com/2011/04/27/accepted-gsoc-students-announced/</link>
  <pubDate>Wed, 27 Apr 2011 19:45:06 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=838</guid>
  <description/>
  <content:encoded><![CDATA[<em>(Cross posted on the <a href="http://sympy.blogspot.com/2011/04/accepted-gsoc-students-announced.html">Official SymPy Blog</a>)</em>
So Google has announced the results of <a href="http://www.google-melange.com/gsoc/homepage/google/gsoc2011">Google Summer of Code</a>. I am proud to announce that we got nine slots from Google.  The following projects have been accepted: 

<em>(Project, Student, Mentor, Link to proposal on the wiki) 
</em>- Definite Integration using Meijer G-functions, Tom Bachmann, Aaron Meurer, <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application-Tom-Bachmann%3A-Definite-Integration">Proposal</a>
- PyDy, Gilbert Gede, Luke Peterson, <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application-Gilbert-Gede%3A-PyDy">Proposal</a>
- Position and Momentum Bases for Quantum Mechanics, Tomo Lazovich, Brian Granger, <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application-Tomo-Lazovich%3A-Position-and-Momentum-Bases-for-QM">Proposal</a>
- Combinatorics package for Sympy, Saptarshi Mandal, Christian Muise, <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application-Saptarshi-Mandal">Proposal</a>
- Symbolic Linear Algebra, Sherjil Ozair, Vinzent Steinberg, <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application-Sherjil-Ozair:-Symbolic-Linear-Algebra">Proposal</a>
- Porting to Python 3, Vladimir Perić, Ronan Lamy, <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application%3A-Vladimir-Perić%3A-Porting-to-Python-3">Proposal</a>
- SymPy Stats: Random Variables, Matthew Rocklin, Andy Terrel, <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application-Matthew-Rocklin%3A-Random-Variables">Proposal</a>
- Symbolic Clebsch-Gordon coefficients/Wigner symbols and Implementing Addition of Spin Angular Momenta, Sean Vig, Ondřej Čertík, <a href="https://github.com/sympy/sympy/wiki/GSoC%202011%20Application%20Sean%20Vig">Proposal</a>
- Implementing F5, Jeremias Yehdegho, Mateusz Paprocki, <a href="https://github.com/sympy/sympy/wiki/GSoC-2011-Application-Jeremias-Yehdegho%3A-Implementing-F5">Proposal</a>

Join me in congratulating these students on their acceptance.   
In case you don't know for some reason, Google Summer of Code is a program where Google pays students to write code for open source projects.  SymPy was accepted as a mentoring organization this year.  The goal of the summer is to help the students learn new skills, in particular in our case: 
* contributing to open source 
* working with the community 
* learn git, pull requests, reviews 
* teach them how to review other's people patches 
* do useful work for SymPy 
* have fun, and encourage the students to stay around 

Also see my <a href="http://asmeurersympy.wordpress.com/2011/03/18/sympy-is-a-google-summer-of-code-2011-mentoring-organization/">previous blog post</a> about it.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>838</wp:post_id>
  <wp:post_date>2011-04-27 19:45:06</wp:post_date>
  <wp:post_date_gmt>2011-04-27 19:45:06</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>accepted-gsoc-students-announced</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:comment>
    <wp:comment_id>372</wp:comment_id>
    <wp:comment_author><![CDATA[Advice for Future Prospective GSoC Students &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2011/04/27/advice-for-future-prospective-gsoc-students/</wp:comment_author_url>
    <wp:comment_author_IP>72.233.96.194</wp:comment_author_IP>
    <wp:comment_date>2011-04-27 21:15:58</wp:comment_date>
    <wp:comment_date_gmt>2011-04-27 21:15:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] now that Google has announced the results of Google Summer of Code, I want to write down some general things that I noticed when reviewing [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1303938958</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1303938958.9068";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Advice for Future Prospective GSoC Students</title>
  <link>http://asmeurersympy.wordpress.com/2011/04/27/advice-for-future-prospective-gsoc-students/</link>
  <pubDate>Wed, 27 Apr 2011 21:15:54 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=845</guid>
  <description/>
  <content:encoded><![CDATA[So now that Google has <a href="http://asmeurersympy.wordpress.com/2011/04/27/accepted-gsoc-students-announced/">announced the results</a> of Google Summer of Code, I want to write down some general things that I noticed when reviewing applications while they are still fresh in my mind.  

Note that none of these things apply to any specific student who applied to SymPy.  Many of these things are things that I noticed that people did right.  

Most of this should apply to any organization, though some of them might be SymPy specific, since that is the lens that I am viewing this through.  These aren't really in any particular order.  

<ol>
	<li><strong>Fulfill all the requirements.</strong> This is kind of a no brainer, and as it turns out, almost all students who applied to SymPy did indeed do this.  For SymPy, this means that you should submit a patch by the deadline. Other organizations might have other requirements.  If you don't fulfill the requirements, it doesn't matter how good your application is; you won't be eligible and hence won't be accepted.</li>
	<li><strong>Discuss your proposal on the mailing list.</strong> A proposal submitted out of the blue has a poor chance of being accepted.  First, we like to see that you will be involved in the community, and if you don't discuss the proposal at all, it shows badly.  Second, it is very likely that we will not like something about your proposal, or will have questions (see the next point).  If you don't discuss it at all, you are making a shot in the dark.  Even if the proposal is good, it could be rejected simply because it's not something that we feel that we want. And you don't want to accidentally submit a proposal to do something that has already been implemented.  

It's important to discuss it on the public mailing list, not just with a specific mentor.  Even if that mentor is the expert on your project subject and would likely be the person to mentor you if you are accepted, you need to remember that all the mentors review the proposals and decide who to accept.   Also, this year for SymPy, we are trying to put an emphasis on students doing things publicly with the whole community, instead of just with their mentors.</li>
	<li><strong>Ask the mentors for advice on your proposal, and then follow it.</strong> Again, most students who applied to SymPy were good on this one too.  We request that all students put their proposals on the GitHub wiki, so that the mentors can take a look at them and give advice.  If you feel uncomfortable putting your application in a public place, send it to some mentors privately.  

But the most important thing here is to actually follow any advice that the mentors give you.  If they tell you that you should expand your timeline section, you should expand your timeline section.  If they tell you you should discuss the implementation more, you should do that (see the next point).  If you don't follow the advice, it looks to the mentor like you didn't listen to him, which doesn't make you appear like a good candidate for acceptance.  Also, the things that they tell you to improve will tend to be the things that they will look at when reviewing your proposal.  </li>
	<li><strong>Don't just discuss the theory.</strong> I suspect that this may be more of a problem with SymPy than for other organizations, because SymPy is very math based, so many of the proposals to SymPy involve complex mathematics. One of the biggest issues I saw in proposals was that students discussed the theory of what they wanted to implement too much and not enough of the actual implementation. It's easy to do this, but discussing the implementation is actually more important than the theory of what you want to do.  

An easy way to do this is to give a "fake" example session showing how your code might work after it is completed.  For example, if you were writing a proposal for a PDE solver, you might include something like

[code language="py"]
&gt;&gt;&gt; u = Function('u')
&gt;&gt;&gt; # Solve the Heat Equation in one dimension
&gt;&gt;&gt; pdesolve(u(x, t).diff(t) - c**2*u(x, t).diff(x, x), u(x), {u(x, 0):f(x), u(0, t):0, u(0, pi):0}, method='separation of variables') 
2/pi*Sum(Integral(f(x)*sin(n*x), x)*sin(n*x)*exp(-n**2*c**2*t), (n, 1, oo))
&gt;&gt;&gt; # Use Fourier Transforms to get d'Alembert's Solution to the Wave Equation
&gt;&gt;&gt; …
[/code]

in your proposal.  Just saying "I plan to implement solvers for PDEs using separation of variables and Fourier Transforms" tells us only what we already know, which is that you can solve PDEs using separation of variables and Fourier Transforms.  What we don't know is how it will look.  The above example shows how the PDE, initial/boundary conditions, and method are entered by the user, and how the output looks.  

A more advanced thing that you can do is to give actual prototype code. This is not required, but it can show that you are dedicated enough to get a start, and can demonstrate how things will work for more complicated projects.</li>
	<li><strong>But theory is important too.</strong> This might also be a problem more in SymPy, but maybe not.  The mathematical backgrounds of SymPy developers ranges quite a bit.  For example, I know a lot about the complicated Risch Algorithm for symbolic integration that the majority of people (even among SymPy developers) know hardly anything about, but I know basically nothing about quantum mechanics.  So that more mentors can have a chance to even have a clue about what you are talking about when they are reviewing your proposal, you should try to explain things to a general audience, at least in the introduction of your proposal.  It can also help to explain why your project would be useful, so that even if someone doesn't know what it is, they can see why it would be nice to have.  This doesn't mean that you should sacrifice details by dumbing everything down.  There's a pretty good chance that someone will understand what you are talking about in your specifics, but you should also explain things from the other end.

If you are implementing a specific algorithm, maybe you could give a brief overview of the algorithm.  This will not only explain things to the mentors who might not know how it works, but also it shows that you know how it works too.</li>
	<li><strong>Be involved in the community.</strong> We understand that students have classes during the application period, but the more you involve yourself in the community beyond the patch requirement (or whatever requirement some other org might have), the better your chances of being accepted. Every org has to take risks accepting students, because there is always the chance that they will fail.  This is not good for anyone: the student doesn't get paid the full stipend and the organization looses not only the project that would have been implemented, but also the slot that they could have given to someone who wouldn't have failed.  Involving yourself in the community early is the best way to show the community that you are a low risk for failure.</li>
	<li><strong>The proposal is the most important thing.</strong> But don't assume that just because you are involved in the community that you will be accepted.  The most important thing is the proposal.  If you don't have a good proposal, we will not even consider the rest of your activity.  So you should focus most of your energy on writing a high quality proposal.  The quality of the patch and your involvement in the community are secondary considerations after the quality of the proposal.  These might be used to narrow down the list of good proposals to fit the number of slots Google gives us and the number of mentors we have available, but the first phase is always to narrow down the list based on the quality of the proposals.</li>
	<li><strong>Use a consistant nickname, preferably one based on your real name.</strong>  This is something that I think most people do not realize.  If your real name is John Smith, and your IRC nick, GitHub handle, Google Code handle, and GSoC link_id are all jsmith, it makes it very easy for me to associate in my mind: "OK, that person who just submitted that patch is the same person I talked to on IRC last week, and I remember reading his proposal on google-melange.com."  But if your real name is John Smith, your IRC nick is freebird, your GitHub handle is mr.nice, your Google Code handle is smithy, and your link_id on google-melange.com is johnhsmith, I can have a very hard time associating your work in one place with your work in another (my apologies if those are anybodys' real nicknames; I just made them up to make the point here).  Maybe you actually have been very active in the IRC channel, but it is hard for me to realize that based on your nick vs. your real name.  This year for SymPy, we had 25 applications by 25 students.  None of these students were members of the SymPy community a few months ago.  It's very hard for the other mentors and I to keep track of which nicknames associate with which people, and in the end, we may mistakenly believe that you haven't done as much as you really have.  Your best bet is to use one nickname everywhere, and to make it based on your real name, so that we can easily tell who it is even based on the nickname.  If your name is common enough that no one permutation is guaranteed to be available everywhere, at least try to be consistent with your nickname, or just use different permutations of your real name based on what site you are on.</li>
</ol>

That's all I can think of for now.  I kind of wish I had thought of two more, so I could make it "Ten pieces of advice," but whatever.  If any SymPy mentors or mentors from other projects feel that something is missing, I would love to hear about it in the comments.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>845</wp:post_id>
  <wp:post_date>2011-04-27 21:15:54</wp:post_date>
  <wp:post_date_gmt>2011-04-27 21:15:54</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>advice-for-future-prospective-gsoc-students</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Update for the Beginning of the Summer</title>
  <link>http://asmeurersympy.wordpress.com/2011/05/26/update-for-the-beginning-of-the-summer/</link>
  <pubDate>Thu, 26 May 2011 05:41:50 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=878</guid>
  <description/>
  <content:encoded><![CDATA[So the Google Summer of Code coding period officially started on Monday, and in solidarity with the students, I will be blogging once a week about various things.  Some of the posts will just be about what I have done that week.  Others will be continuations of my Risch Algorithm series of blog posts (see parts <a href="http://asmeurersympy.wordpress.com/2010/06/11/integration-of-rational-functions/" target="_blank">0</a>, <a href="http://asmeurersympy.wordpress.com/2010/06/30/the-risch-algorithm-part-1/" target="_blank">1</a>, <a href="http://asmeurersympy.wordpress.com/2010/07/24/the-risch-algorithm-part-2-elementary-functions/" target="_blank">2</a>, and <a href="http://asmeurersympy.wordpress.com/2010/08/14/the-risch-algorithm-part-3-liouvilles-theorem/" target="_blank">3</a>).  

This week, I will do the former.  I have spend the past several weeks preparing for the release.  The main thing right now is to clear out <a href="http://code.google.com/p/sympy/issues/list?can=2&amp;q=Milestone%3DRelease0.7.0+&amp;colspec=ID+Type+Status+Priority+Milestone+Owner+Summary+Stars&amp;cells=tiles" target="_blank">the issues that are blocking the release</a>.  I merged in a branch that included all of my polys related fixes from my integration3 branch. Along with similar branch from earlier that had some non-polys related fixes (like some fixes to the integrals), all of my fixes from integration3 not directly related to my implementation of the Risch Algorithm should no be in master. 

Once those issues are fixed, I should be ready to make a release candidate for the release.  The last release was over a year ago (March 2010), and we've racked up <a href="https://github.com/sympy/sympy/wiki/Release-Notes-for-0.7.0" target="_blank">quite a few changes</a> since then.  A few big ones are:

<ul>
	<li> <strong>The new polys</strong>.  This is (in my opinion) the biggest change.  Because of the new polys, everything is faster, and simplification is far more powerful than it was before.  This is for a few reasons.  The biggest reason is that the new polys allow polynomials in any kind of expression, not just Symbols.  This means that you can do things like factor the expression $latex \cos^2{x} + 2\cos{x} + 1$.  As you can imagine, many simplifications of complex expressions are nothing more than polynomial simplifications, where the polynomial is in some function.  

In addition to this, the new polys have a much faster implementation, and if you have gmpy installed, it will use that and be even faster.  There are also several faster algorithms, like a faster algorithm for multivariate factorization, that have been implemented. These all lead to blazing fast simplification and polynomial minipulation in SymPy.</li>

	<li><strong>The Quantum Module</strong>.  Unfortunatly, I can't say much about this, since I don't know anything about quantum physics.  Furthermore, at the time of the writing of this blog post, that part of the release notes hasn't been written yet.  Suffice it say that thanks to two GSoC projects from last summer (see <a href="http://code.google.com/p/sympy/wiki/SymbolicQMReport" target="_blank">this</a> and <a href="http://code.google.com/p/sympy/wiki/Quantum_Computation_Report" target="_blank">this</a> page), we now have a quantum physics module.  A lot of the stuff in that module, from my understanding, is unique to SymPy, which is very exciting.  (By the way, if you're interested in this, Brian Granger can tell you more about it).</li>

	<li><strong>Various backwards incompatible changes</strong>.  We've taken advantage of the fact that this will be a point release (0.7.0) to clean up some old cruft.  
<ul>
	<li>We've renamed the functions <code>abs()</code> and <code>sum()</code> to <code>Abs()</code> and <code>summation()</code>, respectively, because they conflicted with built-in names (although thanks to <code>__abs__</code> magic, <code>abs(expr)</code> will still work with the built-in <code>abs()</code> function).  </li>


	<li>This will be the last release to support Python 2.4.  This will be a big benefit to not have to support Python 2.4 anymore after this release.  There were <a href="http://docs.python.org/whatsnew/2.5.html" target="_blank">a ton of features</a> added in Python 2.5 that we have had to either manually re-implement (like any() and all()), or have had to do without (like the with statement).    Also, this will make porting to Python 3 much easier (this is one of our GSoC projects).  </li>


	<li>We split the class Basic, which is the base class of all SymPy types, into Basic and a subclass Expr.  Mathematical objects like <code>cos(x)</code> or <code>x*y*z**2</code> are instances of Expr.  Objects that do not make sense in mathematical expressions, but still want to have some of the standard SymPy methods like .args and .subs() are Basic.  For example, a Set object is Basic, but not Expr.</li></ul></li>


	<li><strong>Lots of little bug fixes and new features</strong>.  See the <a href="https://github.com/sympy/sympy/wiki/Release-Notes-for-0.7.0" target="_blank">release notes</a>.</li>

</ul>

Once we have the release out, I plan to go back to work on the Risch Algorithm.  I am very close to finishing the exponential case, which means that once I do, any transcendental elementary function built up of only exponential extensions could be integrated or proven not to have an elementary integral by my algorithm.  I also want to start getting the code ready to merge with the main code base, so that it can go in the next release (0.7.1).  

Finally, I want to announce that I have been selected for a <a href="http://conference.scipy.org/scipy2011/student.php" target="_blank">student sponsorship</a> to the SciPy 2011 conference in Austin, TX in the week of July 11. Mateusz and I will be presenting a tutorial on SymPy.  This will be the first time I have ever attended a conference, and I am very excited.  ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>878</wp:post_id>
  <wp:post_date>2011-05-26 05:41:50</wp:post_date>
  <wp:post_date_gmt>2011-05-26 05:41:50</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>update-for-the-beginning-of-the-summer</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Nondeterminism</title>
  <link>http://asmeurersympy.wordpress.com/2011/06/05/nondeterminism/</link>
  <pubDate>Sun, 05 Jun 2011 06:08:21 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=896</guid>
  <description/>
  <content:encoded><![CDATA[So from Saturday to Wednesday of this week, I was on vacation to the Grand Canyon without my computer.  Therefore, I did not do a whole lot with respect to SymPy this week.  The vacation was very fun, though.  My family and I hiked to the bottom of the Grand Canyon and stayed a day at the bottom in a lodge at Phantom Ranch, then hiked back up.  I would highly recommend it to anyone who does not mind doing a little hiking.  

Regarding what I did do, other than catching up on the email from when I was gone, I did some more work finishing patches for the release.  We are now <em>very</em> close to having a release.  All the remaining <a href="http://code.google.com/p/sympy/issues/list?q=label:Milestone-Release0.7.0">blocking issues</a> either have patches that need to be reviewed, or decisions that need to be made.

I also did some work on the Risch Algorithm, though it wasn't very much.  One of my favorite ways to "do work" on the code is to stress test <code>risch_integrate()</code> and if I find a bug or find that it runs too slow, see what needs to be done to fix it.  This week, I discovered that <code>risch_integrate()</code> has a bit of nondeterminism built into it.  Actually, I already knew this, but I recently found an example that demonstrates it very nicely.  The problem is that when it builds the extension to integrate the function, <code>risch_integrate()</code> uses <code>.atoms()</code> to get the parts of the expression (for example, <code>expr.atoms(log)</code> gets all the logarithms in <code>expr</code>).  But <code>.atoms()</code> returns a set (I believe this is for performance reasons, though I'm not certain).  So we get things like

<strong>Hover over the code and click on the left-most, "view source" icon (a paper icon with <tt>&#060; &#062;</tt> over it) to view without breaks.  Opens in a new window.</strong>
[code language="py"]
In [1]: a = Add(*(log(x**i) for i in range(10)))

In [2]: a
Out[2]: 
            ⎛ 2⎞      ⎛ 3⎞      ⎛ 4⎞      ⎛ 5⎞      ⎛ 6⎞      ⎛ 7⎞      ⎛ 8⎞      ⎛ 9⎞
log(x) + log⎝x ⎠ + log⎝x ⎠ + log⎝x ⎠ + log⎝x ⎠ + log⎝x ⎠ + log⎝x ⎠ + log⎝x ⎠ + log⎝x ⎠

In [3]: b = risch_integrate(a, x)

In [4]: b
Out[4]: 
                ⎛ 4⎞
        45⋅x⋅log⎝x ⎠
-45⋅x + ────────────
             4      
[/code]

This is correct, since we have

[code language="py"]
In [5]: expand(b.diff(x) - a)
Out[5]: 0
[/code]

(remember that $latex \log{(x^n)}=n\log{(x)}$).  The integral can be expressed in terms of any of the logarithms in the expression.  It happens to be expressed in terms of $latex \log{(x^4)}$ because that happened to be the first one that came out of <code>a.atoms(log)</code> during iteration.  This is problematic.  First, it's not exactly what is expected.  The ideal solution would be if the answer was written in terms of $latex \log{(x)}$.  

But it's actually worse than that.  Like I mentioned, this is nondeterministic.  It depends on the order of iteration through a set, which is not guaranteed to be in any particular order.  Indeed, if I run the following in 32-bit Python 2.7 and again in 64-bit Python 2.7), the output is exactly the same except for <code>i</code> = 64 to <code>i</code> = 77.

[code language="py"]
for i in range(100):
    print risch_integrate(Add(*(log(x**j) for j in range(i))), x)
[/code]

The actual output seems to follow a pattern, though it's had to discern exactly what it is.  The output for 32-bit is <a href="https://gist.github.com/1008685" title="32-bit Python risch_integrate(logarithms)" target="_blank">https://gist.github.com/1008685</a> and the output for 64-bit is <a href="https://gist.github.com/1008684" title="64-bit Python risch_integrate(logarithms)" target="_blank">https://gist.github.com/1008684</a> (sorry, I forgot to print <code>i</code>; just subtract 4 from the line number).  

So this has gotten me thinking about how to reduce nondeterminism.  Clearly, I need to sort the result of <code>.atoms()</code>, or else <code>risch_integrate()</code> might return a different (though equivalent) result on different platforms. Actually, I've seen <code>list(set)</code> return a different result in the <em>same</em> Python session.  That means that you could potentially get something like <code>risch_integrate(expr, x) == risch_integrate(expr, x) =&gt; False</code>!

The problem is how to sort the atoms.  We recently added a <code>sort_key()</code> function that can be passed as a key to <code>sorted()</code>, which is completely deterministic and platform independent.  That would solve the determinism problem, but actually, I think this requires more thought.  The order that the differential extension is built in can affect not only the form of the resulting antiderivative (though it will always be equivalent, up to a constant), but also the speed with which it is computed.  To take an example from <a href="http://code.google.com/p/sympy/issues/detail?id=2010#c1">issue 2010</a>, the issue about <code>risch_integrate()</code> (you may also <a href="http://asmeurersympy.wordpress.com/2010/08/05/prototype-risch_integrate-function-ready-for-testing/">recognize</a> this example if you are a regular reader of this blog), the <code>handle_first</code> keyword argument to <code>risch_integrate()</code> affects if it builds the extension tower looking for logarithms first or exponentials first.  Whichever comes last is what is integrated first (the tower is integrated from the top to the bottom).  If the last extension was an exponential, then it uses the exponential algorithm.  If it was a logarithm, then it uses the logarithm algorithm.  These are completely different algorithms, and indeed the results can appear in different forms (and sometimes, one will raise NotImplementedError while the other will work because I have implemented the exponential algorithm more completely than the logarithmic one).  It also affects the speed because the integrand might be of a different "type" in the different extensions.  In the example below, the answers are different because it tries to make the argument of the logarithmic part monic with respect to the exponential or the logarithm, respectively. Also notice the speed difference.  This can be exasperated more for integrands of different forms than this one.

[code language="py"]
In [1]: f = (x*(x + 1)*((x**2*exp(2*x**2) - log(x + 1)**2)**2 +
   ...: 2*x*exp(3*x**2)*(x - (2*x**3 + 2*x**2 + x + 1)*log(x + 1))))/((x +
   ...: 1)*log(x + 1)**2 - (x**3 + x**2)*exp(2*x**2))**2

In [2]: f
Out[2]: 
          ⎛                          2                                                   ⎞
          ⎜⎛                       2⎞                                                   2⎟
          ⎜⎜     2           2  2⋅x ⎟        ⎛    ⎛           2      3⎞           ⎞  3⋅x ⎟
x⋅(1 + x)⋅⎝⎝- log (1 + x) + x ⋅ℯ    ⎠  + 2⋅x⋅⎝x - ⎝1 + x + 2⋅x  + 2⋅x ⎠⋅log(1 + x)⎠⋅ℯ    ⎠
──────────────────────────────────────────────────────────────────────────────────────────
                                                                2                         
                         ⎛                                    2⎞                          
                         ⎜   2                  ⎛ 2    3⎞  2⋅x ⎟                          
                         ⎝log (1 + x)⋅(1 + x) - ⎝x  + x ⎠⋅ℯ    ⎠                          

In [3]: risch_integrate(f, x, handle_first='log')
Out[3]: 
       ⎛              ⎛ 2⎞⎞                   ⎛                ⎛ 2⎞⎞                             
       ⎜log(1 + x)    ⎝x ⎠⎟                   ⎜  log(1 + x)    ⎝x ⎠⎟          ⎛ 2⎞               
    log⎜────────── + ℯ    ⎟                log⎜- ────────── + ℯ    ⎟       2  ⎝x ⎠               
       ⎝    x             ⎠                   ⎝      x             ⎠      x ⋅ℯ    ⋅log(1 + x)    
x + ─────────────────────── - log(1 + x) - ───────────────────────── + ──────────────────────────
               2                                       2                                        2
                                                                              2           3  2⋅x 
                                                                       - x⋅log (1 + x) + x ⋅ℯ    

In [4]: risch_integrate(f, x, handle_first='exp')
Out[4]: 
       ⎛                ⎛ 2⎞⎞                   ⎛                ⎛ 2⎞⎞        ⎛ 2⎞             
       ⎜                ⎝x ⎠⎟                   ⎜                ⎝x ⎠⎟        ⎝x ⎠             
    log⎝log(1 + x) + x⋅ℯ    ⎠                log⎝log(1 + x) - x⋅ℯ    ⎠     x⋅ℯ    ⋅log(1 + x)  
x + ───────────────────────── - log(1 + x) - ───────────────────────── - ──────────────────────
                2                                        2                                    2
                                                                            2           2  2⋅x 
                                                                         log (1 + x) - x ⋅ℯ    

In [5]: %timeit risch_integrate(f, x, handle_first='log')
1 loops, best of 3: 1.49 s per loop

In [6]: %timeit risch_integrate(f, x, handle_first='exp')
1 loops, best of 3: 1.21 s per loop

In [7]: cancel(risch_integrate(f, x, handle_first='log').diff(x) - f)
Out[7]: 0

In [8]: cancel(risch_integrate(f, x, handle_first='exp').diff(x) - f)
Out[8]: 0
[/code]

So what I think I really need to do is to do some research on what order of building the tower makes it the most efficient.  Also, <code>handle_first</code> needs to be modified to be more dynamic than just looking at exponentials or logarithms first, but also considering which exponentials or logarithms to look at first, and the others might be rewritten in terms of those (this needed to be done anyway to make it work for three types of extensions: exponentials, logarithms, and tangents).  

There can also be more heuristics for this.  Currently, there are heuristics for exponentials to prefer rewriting $latex e^{2x}$ as $latex \left({e^{x}}\right)^2$ instead of rewriting $latex e^{x}$ as $latex \sqrt{e^{2x}}$ (this is necessary not only for keeping things in terms of the nicer looking gcds but also because <code>risch_integrate()</code> doesn't know how to handle algebraic extensions like square roots). I didn't realize it at the time, but the corollary heuristic for logarithms should try to rewrite $latex \log{(x^2)}$ in terms of $latex \log{(x)}$ and not the other way around.  We can use the exact same gcd algorithm (called <a href="https://github.com/asmeurer/sympy/blob/integration3/sympy/integrals/risch.py#L44"><code>integer_powers()</code></a> in <code>risch.py</code>, and I now realize that it should actually be called <code>integer_multiples()</code>) as we do for the exponential, only use the powers of the arguments instead of coefficients.  This might require some factorization to do completely correctly, so it certainly requires some thought.  

<strong>Update</strong>
I discovered that there's an easier way to show the nondeterminism of the above than running it on different architectures.  You just have to change the variable of integration:

[code language="py"]
In [1]: a = Add(*(log(x**i) for i in range(10)))

In [2]: risch_integrate(a, x)
Out[2]: 
                ⎛ 4⎞
        45⋅x⋅log⎝x ⎠
-45⋅x + ────────────
             4      

In [3]: b = Add(*(log(y**i) for i in range(10)))

In [4]: risch_integrate(b, y)
Out[4]: -45⋅y + 45⋅y⋅log(y)

In [5]: c = Add(*(log(z**i) for i in range(10)))

In [6]: risch_integrate(c, z)
Out[6]: 
                ⎛ 2⎞
        45⋅z⋅log⎝z ⎠
-45⋅z + ────────────
             2      
[/code]

Clearly the code for this needs to be doing some canonicalization. ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>896</wp:post_id>
  <wp:post_date>2011-06-05 06:08:21</wp:post_date>
  <wp:post_date_gmt>2011-06-05 06:08:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>nondeterminism</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:comment>
    <wp:comment_id>382</wp:comment_id>
    <wp:comment_author><![CDATA[fakbill]]></wp:comment_author>
    <wp:comment_author_email>xavier.gnata@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>95.142.175.143</wp:comment_author_IP>
    <wp:comment_date>2011-06-05 22:16:37</wp:comment_date>
    <wp:comment_date_gmt>2011-06-05 22:16:37</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Very nice implementation job!
The Risch algorithm is known to be tricky...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>17068866</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1307312199</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1307312200.5516";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"fakbill";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>SymPy 0.7.0.rc1 is out!</title>
  <link>http://asmeurersympy.wordpress.com/2011/06/13/sympy-0-7-0-rc1-is-out/</link>
  <pubDate>Mon, 13 Jun 2011 01:15:03 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=929</guid>
  <description/>
  <content:encoded><![CDATA[My blog post is a little late this week because I wanted to be able to announce this.  I have released the first release candidate for SymPy 0.7.0 (see <a href="https://asmeurersympy.wordpress.com/2011/05/26/update-for-the-beginning-of-the-summer/" target="_blank">this previous blog post</a> for a little bit of what's new since the last release).  You can download source (Linux/Mac OS X version) <a href="http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.0.rc1.tar.gz" target="_blank">here</a> and the Windows installer <a href="http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.0.rc1.win32.exe" target="_blank">here</a>.  Please download it at test it.

Unfortunately, I discovered soon after releasing it that the code does not work in Python 2.4 or 2.5.  I will soon release SymPy 0.7.0.rc2 to fix this. Please test it in Python 2.6 and 2.7 until then, or test the <a href="https://github.com/sympy/sympy/tree/0.7.0" target="_blank">0.7.0 branch</a> of the official SymPy repository.

If everything goes smoothly, then the full release should be out in a week or so.  Watch this blog or the <a href="http://sympy.blogspot.com/" target="_blank">official SymPy blog</a> for the announcement.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>929</wp:post_id>
  <wp:post_date>2011-06-13 01:15:03</wp:post_date>
  <wp:post_date_gmt>2011-06-13 01:15:03</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>sympy-0-7-0-rc1-is-out</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:comment>
    <wp:comment_id>384</wp:comment_id>
    <wp:comment_author><![CDATA[Ondrej Certik]]></wp:comment_author>
    <wp:comment_author_email>ondrej@certik.cz</wp:comment_author_email>
    <wp:comment_author_url>http://ondrejcertik.com</wp:comment_author_url>
    <wp:comment_author_IP>108.77.140.230</wp:comment_author_IP>
    <wp:comment_date>2011-06-13 08:34:46</wp:comment_date>
    <wp:comment_date_gmt>2011-06-13 08:34:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Awesome, thanks for all the work that you did!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1307954087</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1307954087.2961";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Fixing bugs in the release candidate</title>
  <link>http://asmeurersympy.wordpress.com/2011/06/17/fixing-bugs-in-the-release-candidate/</link>
  <pubDate>Fri, 17 Jun 2011 04:00:55 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=934</guid>
  <description/>
  <content:encoded><![CDATA[This week, I mostly worked on fixing bugs that people found in the <a href="http://asmeurersympy.wordpress.com/2011/06/13/sympy-0-7-0-rc1-is-out/">release candidate</a> I released last week.  I discovered right after releasing it that it did not work in Python 2.4 or 2.5 because of a syntax error.  So I fixed those and created SymPy 0.7.0.rc2 (<a href="http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.0.rc2.tar.gz" target="_blank">source</a>; <a href="http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.0.rc2.win32.exe" target="_blank">windows installer</a>).  

Things were going pretty smoothly with that, until Renato Coutinho discovered that there were test failures in Python 2.4 on Windows, and that the tests failed if ran twice in the same session (i.e., by using <code>test()</code> in isympy).  I was able to fix the failures resulting from two sessions, which were almost all caused by a test modifying some global value or being written in a way that did not allow it to pass when run twice.  But I do not have a Windows machine, so I couldn't reproduce the Windows failures.

Fortunately, yesterday, Renato, Chris Smith, and I were able to debug the problems over IRC.  The main problem was that sympy/core/evalf.py had code

[code language="py"]
INF = 1e1000
MINUS_INF = -1e1000
[/code]

These were intended to give <code>float('inf')</code> and <code>float('-inf')</code>, respectively (floating point infinity and negative infinity). And they did do this… on all platforms except for Python 2.4 on Windows.  From what I can tell from what Chris told me, on that platform it instead gives 1.0.  Strangely, <code>float('inf')</code> did not give floating point infinity either.  We discovered that <code>float(mpmath_inf)</code> did give floating point infinity, where <code>mpmath_inf</code> is mpmath's infinity.  This of course also works in all other platforms, so changing it made the code work everywhere.

After that, there was only one test failure left in Windows (originally there were dozens of errors, but all but one were caused by the above problem).  It turns out that the <code>subprocess</code> module from the codegen module was causing the test runner to fail entirely.  Our solution was to skip this test completely in Python 2.4 on Windows.

So now we had all tests passing on all platforms with all ground types, even if run twice from within the same session.

But it turned out there was still one more error lurking, found by Renato.  A bunch of mpmath tests failed in Python 2.4 when gmpy was installed.  I had never gotten gmpy to compile, so I have only had it installed on my machine for those Python executables installed by fink (2.5-2.7, 64-bit).  

It turns out that mpmath uses gmpy if it is installed.  There were a few places in the code where it was doing things like line 1947 of mpmath/libmp/gammazeta.py, shown below:

[code language="py"]
return mpf_pos(small_factorial_cache[n-1], prec, rnd)
[/code]

The problem was that <code>n</code> was an <code>mpz</code>, or gmpy integer.  But Python 2.4 and ealier do not support non-int types as the index to lists.  It wasn't until Python 2.5's <a href="http://docs.python.org/reference/datamodel.html?highlight=__index__#object.__index__" target="_blank"><code>__index__</code></a> method that non-int/long types were able to be used as slice indices.  

This idiom was being used in several places throughout the code, so rather than try to patch them all, we decided to just disable the gmpy backend in mpmath for Python 2.4.  This issue had never come up before to my knowledge, so it seems that he was the first person to run the mpmath tests in Python 2.4 with gmpy installed.  

So now tests should be passing everywhere in the <a href="github.com/sympy/sympy/tree/0.7.0" target="_blank">0.7.0 branch</a>.  Please continue to test it, though.  If it will make it easier to test, I will create a 0.7.0.rc3 with all the latest fixes.  Otherwise, barring any further major fixes, I will release 0.7.0 final in about a week.

And a big thanks for Renato Coutinho and Chris Smith for helping me debug and fix these bugs.   ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>934</wp:post_id>
  <wp:post_date>2011-06-17 04:00:55</wp:post_date>
  <wp:post_date_gmt>2011-06-17 04:00:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fixing-bugs-in-the-release-candidate</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>import_module (the (hopefully) last fix for 0.7.0)</title>
  <link>http://asmeurersympy.wordpress.com/2011/06/24/import_module-the-hopefully-last-fix-for-0-7-0/</link>
  <pubDate>Fri, 24 Jun 2011 06:59:22 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=939</guid>
  <description/>
  <content:encoded><![CDATA[So everything seemed to be ready to go for the 0.7.0 release, when someone <a href="https://groups.google.com/d/topic/sympy/9FOPjxC0D6s/discussion" target="_blank">pointed out</a> a test failure in Python 2.5.  

It turned out that there is a bug in numpy (see the <a href="http://projects.scipy.org/numpy/ticket/1872" target="_blank">numpy issue page</a> for more information), that was causing the quantum module to fail entirely when imported in Python 2.5 with numpy installed.

Because there was no easy way around the bug, the solution was to disable numpy completely in Python 2.5 in the quantum module.  But this entailed writing the following code idiom

[code language="python"]
import sys
import warnings

numpy_supported = True
if sys.version_info &lt; (2, 6):
    warnings.warn(&quot;Cannot use numpy in Python 2.4/2.5.&quot;)
    numpy_supported = False
else:
    try:
        import numpy as np
    except ImportError:
        numpy_supported = False
[/code]

in all the half dozen files that import numpy in the quantum module.  

So clearly, SymPy needed a more centralized way to handle importing optional external modules.  Hence, I wrote the <code>import_module()</code> function.  The function attempts to import a module given it's name. It returns the module if it can be imported and None if it cannot.  It supports checking the version of Python or the version of the library and not importing it if either are too old.  It also supports emitting warnings when the module is not available or the version is too old.  Thus, the above idiom reduces to

[code language="python"]
from sympy.external import import_module

np = import_module('numpy', min_python_version=(2, 6))
[/code]

And that's it. The function will automatically warn if numpy cannot be imported because the Python version is too old.

Any kind of <code>numpy_supported</code> variable in the code can be replaced by testing the <code>np</code> variable itself, like

[code language="python"]
if np:
    # Do some numpy stuff
else:
    # np is None
    # Do whatever you do when it is not available
[/code]

This method has an additional advantage, which is that the warnings can be customized by setting variable hooks.  So, for example, the test runner can disable all warnings by doing

[code language="python"]
import sympy.external
sympy.external.importtools.WARN_OLD_VERSION = False
sympy.external.importtools.WARN_NOT_INSTALLED = False
[/code]

I actually did make the test runner do this, and also set both to True when the <code>SYMPY_DEBUG</code> environment variable is set to True (by default, <code>WARN_NOT_INSTALLED</code> is False and <code>WARN_OLD_VERSION</code> is True).

There are some caveats.  First, note that the function does it's magic using the built-in <code>__import__()</code> function.  To import a submodule (like <code>sympy.quantum</code>), you need to pass some stuff to the <code>fromlist</code> argument of <code>__import__()</code>.  It's also a good idea to pass names to this if you plan to replicate <code>from module import stuff</code> (instead of just <code>import module</code>), because some modules use lazy importing and other magic that prevent you from accessing names directly from <code>module.stuff</code> without importing <code>stuff</code> first.

To do this, just pass the arguments to <code>__import__()</code> to <code>import_module()</code> using the <code>__import__kwargs</code> keyword argument, like

[code language="python"]
from sympy.external import import_module
# Do this instead of &quot;from matplotlib import pyplot&quot; or &quot;import matplotlib.pyplot as pyplot&quot;
matplotlib = import_module('matplotlib', __import__kwargs={'fromlist':['pyplot']})
pyplot = matplotlib.pyplot
[/code]

Second, for module version checking it looks at <code>module.__version__</code>.  Some modules use a different method (for example, gmpy).  You can use the other method by passing the proper arguments to <code>import_module()</code>.  For example, versions of gmpy lower than 1.03 have a bug that prevent its use in SymPy (basically, <code>int(large mpz)</code> did not automatically convert the number to a <code>long</code>).  So to import gmpy, but only if it's version 1.03 or newer, you would use

[code language="python"]
from sympy.external import import_module
gmpy = import_module('gmpy', min_module_version='1.03',
    module_version_attr='version', module_version_attr_call_args=())
[/code]

This tells it to check the version of gmpy using <code>gmpy.version()</code>, and to import it only if it's at least 1.03 (note that this works by the fact that Python lexicographically compares strings and tuples, so <code>'1.02' &lt; &#039;1.03&#039;</code> returns True).

The sympy.external module is completely independent of the rest of SymPy (it does not call <code>sympy/__init__.py</code>), so you can use it even outside of sympy without the performance penalty that importing all of sympy might bring.  

So, hopefully this is the last issue to fix for the 0.7.0 release.  You can still test it at <a href="https://github.com/sympy/sympy/tree/0.7.0" target="_blank">https://github.com/sympy/sympy/tree/0.7.0</a>.  If people want, I will create another release candidate.  Otherwise, I will release 0.7.0 final on Monday (barring any further problems).]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>939</wp:post_id>
  <wp:post_date>2011-06-24 06:59:22</wp:post_date>
  <wp:post_date_gmt>2011-06-24 06:59:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>import_module-the-hopefully-last-fix-for-0-7-0</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_oembed_d68b2f68ffc119a68187abc50ee9ba49</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>407</wp:comment_id>
    <wp:comment_author><![CDATA[Tadel]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.Tadel.org</wp:comment_author_url>
    <wp:comment_author_IP>188.215.0.115</wp:comment_author_IP>
    <wp:comment_date>2011-10-30 07:58:21</wp:comment_date>
    <wp:comment_date_gmt>2011-10-30 07:58:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[<strong>{Great|Wonderful|Fantastic|Magnificent|Excellent} goods from you, man. {I've|I have} understand your stuff previous to and {you're|you are} just {too|extremely} {great|wonderful|fantastic|magnificent|excellent}. I {really|actually} like what {you'...</strong>

Pretty nice post. I just stumbled upon your blog and wished to say that I have really enjoyed browsing your blog posts. After all I’ll be subscribing to your rss feed and I hope you write again soon!...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>trackback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1319961502</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1319961502.8254";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>SymPy 0.7.0 released</title>
  <link>http://asmeurersympy.wordpress.com/2011/06/29/sympy-0-7-0-released/</link>
  <pubDate>Wed, 29 Jun 2011 08:00:38 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=950</guid>
  <description/>
  <content:encoded><![CDATA[<em>Cross posted on the <a href="http://sympy.blogspot.com/2011/06/sympy-070-released.html" target="_blank">official SymPy blog</a></em>

SymPy 0.7.0 has been released on June 28, 2011.  <span class="Apple-style-span" style="font-family:'Trebuchet MS', Verdana, Arial, sans-serif;font-size:13px;color:rgb(51,51,51);line-height:18px;">It is available at<br /><a href="http://sympy.org/" style="color:rgb(34,85,136);"><br />http://sympy.org</a><br /><br />The source distribution can be downloaded from:<br /><a href="http://sympy.googlecode.com/files/sympy-0.6.6.tar.gz" style="color:rgb(34,85,136);">http://sympy.googlecode.com/files/sympy-0.6.7.tar.gz</a><br /><br />You can get the Windows installer here:<br /><a href="http://sympy.googlecode.com/files/sympy-0.6.6.win32.exe" style="color:rgb(34,85,136);">http://sympy.googlecode.com/files/sympy-0.6.7.win32.exe</a><br /><br />And the html documentation here:<br /><a href="http://sympy.googlecode.com/files/sympy-0.6.6-docs-html.zip" style="color:rgb(34,85,136);">http://sympy.googlecode.com/files/sympy-0.6.7-docs-html.zip</a></span><div><br /></div><div><span class="Apple-style-span" style="font-family:'Trebuchet MS', Verdana, Arial, sans-serif;font-size:13px;color:rgb(51,51,51);line-height:18px;"><span style="font-weight:bold;font-size:16px;">About SymPy</span><br /><br />SymPy is a Python library for symbolic mathematics. It aims to become a full-featured computer algebra system (CAS) while keeping the code as simple as possible in order to be comprehensible and easily extensible. SymPy is written entirely in Python.<br /><span style="font-size:16px;"><span class="Apple-style-span" style="font-size:13px;"><span style="font-size:16px;"><span style="font-weight:bold;"><br /></span></span></span></span></span></div><div><span class="Apple-style-span" style="font-family:'Trebuchet MS', Verdana, Arial, sans-serif;font-size:13px;color:rgb(51,51,51);line-height:18px;"><span style="font-size:16px;"><span class="Apple-style-span" style="font-size:13px;"><span style="font-size:16px;"><span style="font-weight:bold;">Changes since last stable release</span></span><br /></span></span></span></div><div><span class="Apple-style-span" style="font-family:helvetica, arial, freesans, clean, sans-serif;font-size:6px;"><span class="Apple-style-span" style="font-size:22px;"><b><span class="Apple-style-span" style="font-family:'Trebuchet MS', Verdana, Arial, sans-serif;font-weight:normal;font-size:13px;color:rgb(51,51,51);line-height:18px;"><br /></span></b></span></span></div><div><span class="Apple-style-span" style="font-family:helvetica, arial, freesans, clean, sans-serif;font-size:6px;"><span class="Apple-style-span" style="font-size:22px;"><b><span class="Apple-style-span" style="font-family:'Trebuchet MS', Verdana, Arial, sans-serif;font-weight:normal;font-size:13px;color:rgb(51,51,51);line-height:18px;">(from <a href="https://github.com/sympy/sympy/wiki/Release-Notes-for-0.7.0">https://github.com/sympy/sympy/wiki/Release-Notes-for-0.7.0</a>)</span></b></span></span></div><div><span class="Apple-style-span" style="font-family:'Trebuchet MS', Verdana, Arial, sans-serif;color:rgb(51,51,51);line-height:18px;"><b><span class="Apple-style-span" style="color:rgb(0,0,0);font-family:helvetica, arial, freesans, clean, sans-serif;font-weight:normal;line-height:23px;font-size:14px;"><h2 style="line-height:normal;border-top-width:4px;border-top-style:solid;border-top-color:rgb(204,204,204);font-size:22px;display:inline!important;margin:22px 0 0;padding:7px 0 0;"><br /></h2></span></b></span></div><div><span class="Apple-style-span" style="font-family:'Trebuchet MS', Verdana, Arial, sans-serif;color:rgb(51,51,51);line-height:18px;"><b><span class="Apple-style-span" style="color:rgb(0,0,0);font-family:helvetica, arial, freesans, clean, sans-serif;font-weight:normal;line-height:23px;font-size:14px;"><h2 style="line-height:normal;border-top-width:4px;border-top-style:solid;border-top-color:rgb(204,204,204);font-size:22px;display:inline!important;margin:22px 0 0;padding:7px 0 0;">Backwards compatibility breaks</h2></span></b></span></div><div><span class="Apple-style-span" style="font-family:'Trebuchet MS', Verdana, Arial, sans-serif;color:#333333;"><span class="Apple-style-span" style="line-height:18px;"><b><span class="Apple-style-span" style="color:rgb(0,0,0);font-family:helvetica, arial, freesans, clean, sans-serif;font-weight:normal;line-height:23px;font-size:14px;"><ul style="line-height:1.4em;margin:0 0 0 1.5em;padding:20px 0 0;"><li style="line-height:1.4em;margin:0;padding:0;">This will be the last release of SymPy to support Python 2.4. Dropping support for Python 2.4 will let us move forward with things like supporting Python 3, and will let us use things that were introduced in Python 2.5, like with-statement context managers.</li><li style="line-height:1.4em;margin:0;padding:0;">no longer support creating matrices without brackets (see: issue 930)</li><li style="line-height:1.4em;margin:0;padding:0;">Renamed <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">sum()</code> to <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">summation()</code> (see: 3e763a8, issues 1376, 1727). This was changed so that it no longer overrides the built-in <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">sum()</code>. The unevaluated summation is still called <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">Sum()</code>.</li><li style="line-height:1.4em;margin:0;padding:0;">Renamed <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">abs()</code> to <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">Abs()</code> (see: 64a12a4, issue 1727). This was also changed so that it no longer overrides the built-in <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">abs()</code>. Note that because of <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">__abs__</code> magic, you can still do <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">abs(expr)</code> with the built-in <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">abs()</code>, and it will return <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">Abs(expr)</code>.</li><li style="line-height:1.4em;margin:0;padding:0;">Renamed <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">max_()</code> and <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">min_()</code> to now <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">Max()</code> and <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">Min()</code> (see: 99a271e, issue 2153)</li><li style="line-height:1.4em;margin:0;padding:0;">Changed behaviour of <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">symbols()</code>. <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">symbols('xyz')</code> gives now a single symbol (<code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">'xyz'</code>), not three (<code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">'x'</code>, <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">'y'</code> and <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">'z'</code>) (see: f6452a8). Use<code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">symbols('x,y,z')</code> or <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">symbols('x y z')</code> to get three symbols. The 'each_char' option will still work but is being deprecated.</li><li style="line-height:1.4em;margin:0;padding:0;">Split class <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">Basic</code> into new classes <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">Expr</code>, <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">Boolean</code> (see: a0ab479, 635d89c). Classes that are designed to be part of standard symbolic expressions (like <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">x**2*sin(x)</code>) should subclass from <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">Expr</code>. More generic objects that do not work in symbolic expressions but still want the basic SymPy structure like <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">.args</code> and basic methods like <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">.subs()</code> should only subclass from <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">Basic</code>.</li><li style="line-height:1.4em;margin:0;padding:0;"><code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">as_basic()</code> method was renamed to <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">as_expr()</code> to reflect changes in the core (see: e61819d, 80dfe91)</li><li style="line-height:1.4em;margin:0;padding:0;">Methods <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">as_coeff_terms</code> and <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">as_coeff_factors</code> were renamed to <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">as_coeff_mul</code> and <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">as_coeff_add</code>, respectively.</li><li style="line-height:1.4em;margin:0;padding:0;">Removed the <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">trim()</code> function. The function is redundant with the new polys (see below). Use the <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">cancel()</code> function instead.</li></ul><h2 style="line-height:normal;border-top-width:4px;border-top-style:solid;border-top-color:rgb(204,204,204);font-size:22px;margin:22px 0 0;padding:7px 0 0;">Major Changes</h2><h3 style="line-height:26px;font-size:16px;margin:0;padding:26px 0 0;">Polys</h3><ul style="line-height:1.4em;margin:0 0 0 1.5em;padding:20px 0 0;"><li style="line-height:1.4em;margin:0;padding:0;">New internal representations of dense and sparse polynomials (see: 6aecdb7, 31c9aa4)</li><li style="line-height:1.4em;margin:0;padding:0;">Implemented algorithms for real and complex root isolation and counting (see: 3acac67, 4b75dae, fa1206e, 103b928, 45c9b22, 8870c8b, b348b30)</li><li style="line-height:1.4em;margin:0;padding:0;">Improved Gröbner bases algorithm (see: ff65e9f, 891e4de, 310a585)</li><li style="line-height:1.4em;margin:0;padding:0;">Field isomorphism algorithm (see: b097b01, 08482bf)</li><li style="line-height:1.4em;margin:0;padding:0;">Implemented efficient orthogonal polynomials (see: b8fbd59)</li><li style="line-height:1.4em;margin:0;padding:0;">Added configuration framework for polys (see: 33d8cdb, 7eb81c9)</li><li style="line-height:1.4em;margin:0;padding:0;">Function for computing minimal polynomials (see: 88bf187, f800f95)</li><li style="line-height:1.4em;margin:0;padding:0;">Function for generating Viete's formulas (see: 1027408)</li><li style="line-height:1.4em;margin:0;padding:0;"><code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">roots()</code> supports more classes of polynomials (e.g. cyclotomic) (see: d8c8768, 75c8d2d)</li><li style="line-height:1.4em;margin:0;padding:0;">Added a function for recognizing cyclotomic polynomials (see: b9c2a9a)</li><li style="line-height:1.4em;margin:0;padding:0;">Added a function for computing Horner form of polynomials (see: 8d235c7)</li><li style="line-height:1.4em;margin:0;padding:0;">Added a function for computing symmetric reductions of polynomials (see: 6d560f3)</li><li style="line-height:1.4em;margin:0;padding:0;">Added generators of Swinnerton-Dyer, cyclotomic, symmetric, random and interpolating polynomials (see: dad03dd, 6ccf20c, dc728d6, 2f17684, 3004db8)</li><li style="line-height:1.4em;margin:0;padding:0;">Added a function computing isolation intervals of algebraic numbers (see: 37a58f1)</li><li style="line-height:1.4em;margin:0;padding:0;">Polynomial division (<code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">div()</code>, <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">rem()</code>, <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">quo()</code>) now defaults to a field (see: a72d188)</li><li style="line-height:1.4em;margin:0;padding:0;">Added wrappers for numerical root finding algorithms (see: 0d98945, f638fcf)</li><li style="line-height:1.4em;margin:0;padding:0;">Added symbolic capabilities to <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">factor()</code>, <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">sqf()</code> and related functions (see: d521c7f, 548120b, f6f74e6, b1c49cd, 3527b64)</li><li style="line-height:1.4em;margin:0;padding:0;"><code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">together()</code> was significantly improved (see: dc327fe)</li><li style="line-height:1.4em;margin:0;padding:0;">Added support for iterable containers to <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">gcd()</code> and <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">lcm()</code> (see: e920870)</li><li style="line-height:1.4em;margin:0;padding:0;">Added a function for constructing domains from coefficient containers (see: a8f20e6)</li><li style="line-height:1.4em;margin:0;padding:0;">Implemented greatest factorial factorization (see: d4dbbb5)</li><li style="line-height:1.4em;margin:0;padding:0;">Added partial fraction decomposition algorithm based on undetermined coefficient approach (see: 9769d49, 496f08f)</li><li style="line-height:1.4em;margin:0;padding:0;"><code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">RootOf</code> and <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">RootSum</code> were significantly improved (see: f3e432, 4c88be6, 41502d7)</li><li style="line-height:1.4em;margin:0;padding:0;">Added support for gmpy (GNU Multiple Precision Arithmetic Library) (see: 38e1683)</li><li style="line-height:1.4em;margin:0;padding:0;">Allow to compile <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">sympy.polys</code> with Cython (see: afb3886)</li><li style="line-height:1.4em;margin:0;padding:0;">Improved configuration of variables in <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">Poly</code> (see: 22c4061)</li><li style="line-height:1.4em;margin:0;padding:0;">Added documentation based on Wester's examples (see: 1c23792)</li><li style="line-height:1.4em;margin:0;padding:0;">Irreducibility testing over finite fields (see: 17e8f1f)</li><li style="line-height:1.4em;margin:0;padding:0;">Allow symmetric and non-symmetric representations over finite fields (see: 60fbff4)</li><li style="line-height:1.4em;margin:0;padding:0;">More consistent factorization forms from <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">factor()</code> and <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">sqf()</code> (see: 5df77f5)</li><li style="line-height:1.4em;margin:0;padding:0;">Added support for automatic recognition algebraic extensions (see: 7de602c)</li><li style="line-height:1.4em;margin:0;padding:0;">Implemented Collins' modular algorithm for computing resultants (see: 950969b)</li><li style="line-height:1.4em;margin:0;padding:0;">Implemented Berlekamp's algorithm for factorization over finite fields (see: 70353e9)</li><li style="line-height:1.4em;margin:0;padding:0;">Implemented Trager's algorithm for factorization over algebraic number fields (see: bd0be06)</li><li style="line-height:1.4em;margin:0;padding:0;">Improved Wang's algorithm for efficient factorization of multivariate polynomials (see: 425e225)</li></ul><h3 style="line-height:26px;font-size:16px;margin:0;padding:26px 0 0;">Quantum</h3><ul style="line-height:1.4em;margin:0 0 0 1.5em;padding:20px 0 0;"><li style="line-height:1.4em;margin:0;padding:0;">Symbolic, abstract dirac notation in <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">sympy.physics.quantum</code>. This includes operators, states (bras and kets), commutators, anticommutators, dagger, inner products, outer products, tensor products and Hilbert spaces</li><li style="line-height:1.4em;margin:0;padding:0;">Symbolic quantum computing framework that is based on the general capabilities in <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">sympy.physics.quantum</code>. This includes qubits (<code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">sympy.physics.quantum.qubit</code>), gates (<code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">sympy.physics.quantum.gate</code>), Grover's algorithm (<code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">sympy.physics.quantum.grover</code>), the quantum Fourier transform (<code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">sympy.physics.quantum.qft</code>), Shor's algorithm (<code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">sympy.physics.quantum.shor</code>) and circuit plotting (<code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">sympy.physics.quantum.circuitplot</code>)</li><li style="line-height:1.4em;margin:0;padding:0;">Second quantization framework that inclues creation/anihilation operators for both Fermions and Bosons and Wick's theorem for Fermions (<code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">sympy.physics.secondquant</code>).</li><li style="line-height:1.4em;margin:0;padding:0;">Symbolic quantum angular momentum (spin) algebra (<code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">sympy.physics.quantum.spin</code>)</li><li style="line-height:1.4em;margin:0;padding:0;">Hydrogen wave functions (Schroedinger) and energies (both Schroedinger and Dirac)</li><li style="line-height:1.4em;margin:0;padding:0;">Wave functions and energies for 1D harmonic oscillator</li><li style="line-height:1.4em;margin:0;padding:0;">Wave functions and energies for 3D spherically symmetric harmonic oscillator</li><li style="line-height:1.4em;margin:0;padding:0;">Wigner and Clebsch Gordan coefficients</li></ul><h2 style="line-height:normal;border-top-width:4px;border-top-style:solid;border-top-color:rgb(204,204,204);font-size:22px;margin:22px 0 0;padding:7px 0 0;">Everything else</h2><ul style="line-height:1.4em;margin:0 0 0 1.5em;padding:20px 0 0;"><li style="line-height:1.4em;margin:0;padding:0;">Implement symarray, providing numpy nd-arrays of symbols.</li><li style="line-height:1.4em;margin:0;padding:0;">update mpmath to 0.16</li><li style="line-height:1.4em;margin:0;padding:0;">Add a tensor module (see: <a href="http://code.google.com/p/sympy/wiki/CodeGenerationReport" style="line-height:1.4em;color:rgb(65,131,196);text-decoration:none;outline-style:none;outline-width:initial;outline-color:initial;margin:0;padding:0;">http://code.google.com/p/sympy/wiki/CodeGenerationReport</a>)</li><li style="line-height:1.4em;margin:0;padding:0;">A lot of stuff was being imported with <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">from sympy import *</code> that shouldn't have been (like <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">sys</code>). This has been fixed.</li></ul><h3 style="line-height:26px;font-size:16px;margin:0;padding:26px 0 0;">Assumptions:</h3><ul style="line-height:1.4em;margin:0 0 0 1.5em;padding:20px 0 0;"><li style="line-height:1.4em;margin:0;padding:0;">Refine</li><li style="line-height:1.4em;margin:0;padding:0;">Added predicates (see: 7c0b857, 53f0e1a, d1dd6a3..)</li><li style="line-height:1.4em;margin:0;padding:0;">Added query handlers for algebraic numbers (see: f3bee7a)</li><li style="line-height:1.4em;margin:0;padding:0;">Implement a SAT solver (see: <a href="http://code.google.com/p/sympy/wiki/SuperchargingAssumptionsReport" style="line-height:1.4em;color:rgb(65,131,196);text-decoration:none;outline-style:none;outline-width:initial;outline-color:initial;margin:0;padding:0;">http://code.google.com/p/sympy/wiki/SuperchargingAssumptionsReport</a>, 2d96329, acfbe75, etc.)</li></ul><h3 style="line-height:26px;font-size:16px;margin:0;padding:26px 0 0;">Concrete</h3><ul style="line-height:1.4em;margin:0 0 0 1.5em;padding:20px 0 0;"><li style="line-height:1.4em;margin:0;padding:0;">Finalized implementation of Gosper's algorithm (see: 0f187e5, 5888024)</li><li style="line-height:1.4em;margin:0;padding:0;">Removed redundant <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">Sum2</code> and related classes (see: ef1f6a7)</li></ul><h3 style="line-height:26px;font-size:16px;margin:0;padding:26px 0 0;">Core:</h3><ul style="line-height:1.4em;margin:0 0 0 1.5em;padding:20px 0 0;"><li style="line-height:1.4em;margin:0;padding:0;">Split <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">Atom</code> into <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">Atom</code> and <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">AtomicExpr</code> (see: 965aa91)</li><li style="line-height:1.4em;margin:0;padding:0;">Various <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">sympify()</code> improvements</li><li style="line-height:1.4em;margin:0;padding:0;">Added functionality for action verbs (many functions can be called both as global functions and as methods e.g. <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">a.simplify() == simplify(a)</code>)</li><li style="line-height:1.4em;margin:0;padding:0;">Improve handling of rational strings (see: 053a045, issue 1778)</li><li style="line-height:1.4em;margin:0;padding:0;">Major changes to factoring of integers (see: 273f450, issue 2003)</li><li style="line-height:1.4em;margin:0;padding:0;">Optimized <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">.has()</code> (see: c83c9b0, issue 1980; d86d08f)</li><li style="line-height:1.4em;margin:0;padding:0;">Improvements to power (see: c8661ef, issue 1963)</li><li style="line-height:1.4em;margin:0;padding:0;">Added range and lexicographic syntax to <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">symbols()</code> and <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">var()</code> (see: f6452a8, 9aeb220, 957745a)</li><li style="line-height:1.4em;margin:0;padding:0;">Added <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">modulus</code> argument to <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">expand()</code> (see: 1ea5be8)</li><li style="line-height:1.4em;margin:0;padding:0;">Allow to convert <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">Interval</code> to relational form (see: 4c269fe)</li><li style="line-height:1.4em;margin:0;padding:0;">SymPy won't manipulate minus sign of expressions any more (see: 6a26941, 9c6bf0f, e9f4a0a)</li><li style="line-height:1.4em;margin:0;padding:0;"><code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">Real</code> and <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">.is_Real</code> were renamed to <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">Float</code> and <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">.is_Float</code>. <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">Real</code> and <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">.is_Real</code> still remain as deprecated shortcuts to <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">Float</code> and<code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">is_Float</code> for backwards compatibility. (see: abe1c49)</li><li style="line-height:1.4em;margin:0;padding:0;">Methods coeff and as_coefficient are now non-commutative aware. (see a4ea170)</li></ul><h3 style="line-height:26px;font-size:16px;margin:0;padding:26px 0 0;">Geometry:</h3><ul style="line-height:1.4em;margin:0 0 0 1.5em;padding:20px 0 0;"><li style="line-height:1.4em;margin:0;padding:0;">Various improvements to Ellipse</li><li style="line-height:1.4em;margin:0;padding:0;">Updated documentation to numpy standard</li><li style="line-height:1.4em;margin:0;padding:0;">Polygon and Line improvements</li><li style="line-height:1.4em;margin:0;padding:0;">Allow all geometry objects to accept a tuple as <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">Point</code> args</li></ul><h3 style="line-height:26px;font-size:16px;margin:0;padding:26px 0 0;">Integrals:</h3><ul style="line-height:1.4em;margin:0 0 0 1.5em;padding:20px 0 0;"><li style="line-height:1.4em;margin:0;padding:0;">Various improvements (see eg. issues 1772, 1999, 1992, 1987.. etc)</li></ul><h3 style="line-height:26px;font-size:16px;margin:0;padding:26px 0 0;">isympy</h3><ul style="line-height:1.4em;margin:0 0 0 1.5em;padding:20px 0 0;"><li style="line-height:1.4em;margin:0;padding:0;">Fixed the <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">-p</code> switch (see: e8cb04a)</li><li style="line-height:1.4em;margin:0;padding:0;">Caching can be disabled using <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">-C</code> switch (see: 0d8d748)</li><li style="line-height:1.4em;margin:0;padding:0;">Ground types can be set using <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">-t</code> switch (see: 75734f8)</li><li style="line-height:1.4em;margin:0;padding:0;">Printing ordering can be set using <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">-o</code> switch (see: fcc6b13, 4ec9dc5)</li></ul><h3 style="line-height:26px;font-size:16px;margin:0;padding:26px 0 0;">Logic</h3><ul style="line-height:1.4em;margin:0 0 0 1.5em;padding:20px 0 0;"><li style="line-height:1.4em;margin:0;padding:0;">implies object adheres to negative normal form</li><li style="line-height:1.4em;margin:0;padding:0;">Create new boolean class, <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">logic.boolalg.Boolean</code></li><li style="line-height:1.4em;margin:0;padding:0;">Added XOR operator (^) support</li><li style="line-height:1.4em;margin:0;padding:0;">Added If-then-else (ITE) support</li><li style="line-height:1.4em;margin:0;padding:0;">Added the dpll algorithm</li></ul><h3 style="line-height:26px;font-size:16px;margin:0;padding:26px 0 0;">Functions:</h3><ul style="line-height:1.4em;margin:0 0 0 1.5em;padding:20px 0 0;"><li style="line-height:1.4em;margin:0;padding:0;">Added Piecewise, B-splines</li><li style="line-height:1.4em;margin:0;padding:0;">Spherical Bessel function of the second kind implemented</li><li style="line-height:1.4em;margin:0;padding:0;">Add series expansions of multivariate functions (see: d4d351d)</li></ul><h3 style="line-height:26px;font-size:16px;margin:0;padding:26px 0 0;">Matrices:</h3><ul style="line-height:1.4em;margin:0 0 0 1.5em;padding:20px 0 0;"><li style="line-height:1.4em;margin:0;padding:0;">Add elementwise product (Hadamard product)</li><li style="line-height:1.4em;margin:0;padding:0;">Extended QR factorization for general full ranked mxn matrices</li><li style="line-height:1.4em;margin:0;padding:0;">Remove deprecated functions <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">zero()</code>, <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">zeronm()</code>, <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">one()</code> (see: 5da0884)</li><li style="line-height:1.4em;margin:0;padding:0;">Added cholesky and LDL factorizations, and respective solves.</li><li style="line-height:1.4em;margin:0;padding:0;">Added functions for efficient triangular and diagonal solves.</li><li style="line-height:1.4em;margin:0;padding:0;"><code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">SMatrix</code> was renamed to <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">SparseMatrix</code> (see: acd1685)</li></ul><h3 style="line-height:26px;font-size:16px;margin:0;padding:26px 0 0;">Physics</h3><ul style="line-height:1.4em;margin:0 0 0 1.5em;padding:20px 0 0;"><li style="line-height:1.4em;margin:0;padding:0;">See the Quantum section</li></ul><h3 style="line-height:26px;font-size:16px;margin:0;padding:26px 0 0;">Printing:</h3><ul style="line-height:1.4em;margin:0 0 0 1.5em;padding:20px 0 0;"><li style="line-height:1.4em;margin:0;padding:0;">Implemented pretty printing of binomials (see: 58c1dad)</li><li style="line-height:1.4em;margin:0;padding:0;">Implemented pretty printing of Sum() (see: 84f2c22, 95b4321)</li><li style="line-height:1.4em;margin:0;padding:0;"><code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">sympy.printing</code> now supports ordering of terms and factors (see: 859bb33)</li><li style="line-height:1.4em;margin:0;padding:0;">Lexicographic order is now the default. Now finally things will print as <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">x**2 + x + 1</code> instead of <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">1 + x + x**2</code>, however series still print using reversed ordering, e.g. <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">x - x**3/6 + O(x**5)</code>. You can get the old order (and other orderings) by setting the <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">-o</code> option to isympy (see: 08b4932, a30c5a3)</li></ul><h3 style="line-height:26px;font-size:16px;margin:0;padding:26px 0 0;">Series:</h3><ul style="line-height:1.4em;margin:0 0 0 1.5em;padding:20px 0 0;"><li style="line-height:1.4em;margin:0;padding:0;">Implement a function to calculate residues, <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">residue()</code></li><li style="line-height:1.4em;margin:0;padding:0;">Implement nseries and lseries to handle <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">x0 != 0</code>, series should be more robust now (see: 2c99999, issues 2122-2124)</li><li style="line-height:1.4em;margin:0;padding:0;">Improvements to Gruntz algorithm</li></ul><h3 style="line-height:26px;font-size:16px;margin:0;padding:26px 0 0;">Simplify:</h3><ul style="line-height:1.4em;margin:0 0 0 1.5em;padding:20px 0 0;"><li style="line-height:1.4em;margin:0;padding:0;">Added <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">use()</code> (see: 147c142)</li><li style="line-height:1.4em;margin:0;padding:0;"><code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">ratsimp()</code> now uses <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">cancel()</code> and <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">reduced()</code> (see: 108fb41)</li><li style="line-height:1.4em;margin:0;padding:0;">Implemented EPath (see: 696139d, bf90689)</li><li style="line-height:1.4em;margin:0;padding:0;">a new keyword <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">rational</code> was added to nsimplify which will replace Floats with Rational approximations. (see: 053a045)</li></ul><h3 style="line-height:26px;font-size:16px;margin:0;padding:26px 0 0;">Solvers:</h3><ul style="line-height:1.4em;margin:0 0 0 1.5em;padding:20px 0 0;"><li style="line-height:1.4em;margin:0;padding:0;">ODE improvements (see: d12a2aa, 3542041; 73fb9ac)</li><li style="line-height:1.4em;margin:0;padding:0;">Added support for solving inequalities (see: 328eaba, 8455147, f8fcaa7)</li></ul><h3 style="line-height:26px;font-size:16px;margin:0;padding:26px 0 0;">Utilities:</h3><ul style="line-height:1.4em;margin:0 0 0 1.5em;padding:20px 0 0;"><li style="line-height:1.4em;margin:0;padding:0;">Improve cartes, for generating the Cartesian product (see: b1b10ed)</li><li style="line-height:1.4em;margin:0;padding:0;">Added a function computing topological sort of graphs (see: b2ce27b)</li><li style="line-height:1.4em;margin:0;padding:0;">Allow to setup a customized printer in <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">lambdify()</code> (see: c1ad905)</li><li style="line-height:1.4em;margin:0;padding:0;"><code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">flatten()</code> was significantly improved (see: 31ed8d7)</li><li style="line-height:1.4em;margin:0;padding:0;">Major improvements to the Fortran code generator (see: <a href="http://code.google.com/p/sympy/wiki/CodeGenerationReport" style="line-height:1.4em;color:rgb(65,131,196);text-decoration:none;outline-style:none;outline-width:initial;outline-color:initial;margin:0;padding:0;">http://code.google.com/p/sympy/wiki/CodeGenerationReport</a>, 3383aa3, 7ab2da2, etc.)</li></ul><p style="line-height:1.4em;margin:16px 0 0;padding:0;">In addition to the more noticeable changes listed above, there have been numerous other smaller additions, improvements and bug fixes in the ~2000 commits in this release. See the git log for a full list of all changes. The command <code style="font:normal normal normal 12px/normal 'Bitstream Vera Sans Mono', Courier, monospace;line-height:1.4em;background-color:rgb(248,248,248);font-size:13px;border-top-left-radius:3px 3px;border-top-right-radius:3px 3px;border-bottom-right-radius:3px 3px;border-bottom-left-radius:3px 3px;border-color:rgb(222,222,222);border-style:solid;border-width:1px;margin:0;padding:0;">git log sympy-0.6.7..sympy-0.7.0</code> will show all commits made between this release and the last. You can also see the issues closed since the last release <a href="http://code.google.com/p/sympy/issues/list?can=1&amp;q=closed-after%3A2010%2F3%2F17+closed-before%3A2011%2F6%2F13&amp;sort=-closed&amp;colspec=ID+Type+Status+Priority+Milestone+Owner+Summary+Stars+Closed&amp;cells=tiles" style="line-height:1.4em;color:rgb(65,131,196);text-decoration:none;outline-style:none;outline-width:initial;outline-color:initial;margin:0;padding:0;">here</a>.</p><h2 style="line-height:normal;border-top-width:4px;border-top-style:solid;border-top-color:rgb(204,204,204);font-size:22px;margin:22px 0 0;padding:7px 0 0;">Authors</h2><p style="line-height:1.4em;margin:16px 0 0;padding:0;">The following people contributed at least one patch to this release (names are given in alphabetical order by last name). A total of 64 people contributed to this release. People with a * by their names contributed a patch for the first time for this release. Thirty-seven people contributed for the first time for this release. Over half of the people who contributed to this release contributed for the first time!</p><p style="line-height:1.4em;margin:16px 0 0;padding:0;">Thanks to everyone who contributed to this release!</p><ul style="line-height:1.4em;margin:0 0 0 1.5em;padding:20px 0 0;"><li style="line-height:1.4em;margin:0;padding:0;">Tom Bachmann*</li><li style="line-height:1.4em;margin:0;padding:0;">Tomas Bambas*</li><li style="line-height:1.4em;margin:0;padding:0;">Matthew Brett*</li><li style="line-height:1.4em;margin:0;padding:0;">Ondřej Čertík</li><li style="line-height:1.4em;margin:0;padding:0;">Renato Coutinho</li><li style="line-height:1.4em;margin:0;padding:0;">Addison Cugini*</li><li style="line-height:1.4em;margin:0;padding:0;">Matt Curry*</li><li style="line-height:1.4em;margin:0;padding:0;">Raffaele De Feo*</li><li style="line-height:1.4em;margin:0;padding:0;">Mark Dewing</li><li style="line-height:1.4em;margin:0;padding:0;">Thomas Dixon*</li><li style="line-height:1.4em;margin:0;padding:0;">Harold Erbin</li><li style="line-height:1.4em;margin:0;padding:0;">Pavel Fedotov*</li><li style="line-height:1.4em;margin:0;padding:0;">Gilbert Gede*</li><li style="line-height:1.4em;margin:0;padding:0;">Oleksandr Gituliar*</li><li style="line-height:1.4em;margin:0;padding:0;">Brian Granger</li><li style="line-height:1.4em;margin:0;padding:0;">Alexey U. Gudchenko*</li><li style="line-height:1.4em;margin:0;padding:0;">Øyvind Jensen</li><li style="line-height:1.4em;margin:0;padding:0;">Fredrik Johansson</li><li style="line-height:1.4em;margin:0;padding:0;">Felix Kaiser</li><li style="line-height:1.4em;margin:0;padding:0;">Yuri Karadzhov*</li><li style="line-height:1.4em;margin:0;padding:0;">Gary Kerr*</li><li style="line-height:1.4em;margin:0;padding:0;">Kibeom Kim*</li><li style="line-height:1.4em;margin:0;padding:0;">Nicholas J.S. Kinar*</li><li style="line-height:1.4em;margin:0;padding:0;">Anatolii Koval*</li><li style="line-height:1.4em;margin:0;padding:0;">Sebastian Krämer</li><li style="line-height:1.4em;margin:0;padding:0;">Ryan Krauss</li><li style="line-height:1.4em;margin:0;padding:0;">Gregory Ksionda*</li><li style="line-height:1.4em;margin:0;padding:0;">Priit Laes</li><li style="line-height:1.4em;margin:0;padding:0;">Vladimir Lagunov</li><li style="line-height:1.4em;margin:0;padding:0;">Ronan Lamy</li><li style="line-height:1.4em;margin:0;padding:0;">Tomo Lazovich*</li><li style="line-height:1.4em;margin:0;padding:0;">Saptarshi Mandal*</li><li style="line-height:1.4em;margin:0;padding:0;">David Marek</li><li style="line-height:1.4em;margin:0;padding:0;">Jack McCaffery*</li><li style="line-height:1.4em;margin:0;padding:0;">Benjamin McDonald*</li><li style="line-height:1.4em;margin:0;padding:0;">Aaron Meurer</li><li style="line-height:1.4em;margin:0;padding:0;">Christian Muise*</li><li style="line-height:1.4em;margin:0;padding:0;">Óscar Nájera*</li><li style="line-height:1.4em;margin:0;padding:0;">Jezreel Ng*</li><li style="line-height:1.4em;margin:0;padding:0;">Sherjil Ozair*</li><li style="line-height:1.4em;margin:0;padding:0;">Mateusz Paprocki</li><li style="line-height:1.4em;margin:0;padding:0;">James Pearson</li><li style="line-height:1.4em;margin:0;padding:0;">Fernando Perez</li><li style="line-height:1.4em;margin:0;padding:0;">Vladimir Perić*</li><li style="line-height:1.4em;margin:0;padding:0;">Mario Pernici*</li><li style="line-height:1.4em;margin:0;padding:0;">Nicolas Pourcelot</li><li style="line-height:1.4em;margin:0;padding:0;">rayman*</li><li style="line-height:1.4em;margin:0;padding:0;">Matthew Rocklin*</li><li style="line-height:1.4em;margin:0;padding:0;">Christian Schubert</li><li style="line-height:1.4em;margin:0;padding:0;">Andre de Fortier Smit*</li><li style="line-height:1.4em;margin:0;padding:0;">Chris Smith</li><li style="line-height:1.4em;margin:0;padding:0;">Cristóvão Sousa*</li><li style="line-height:1.4em;margin:0;padding:0;">Akshay Srinivasan</li><li style="line-height:1.4em;margin:0;padding:0;">Vinzent Steinberg</li><li style="line-height:1.4em;margin:0;padding:0;">Prafullkumar P. Tale*</li><li style="line-height:1.4em;margin:0;padding:0;">Andy R. Terrel</li><li style="line-height:1.4em;margin:0;padding:0;">Kazuo Thow*</li><li style="line-height:1.4em;margin:0;padding:0;">Toon Verstraelen</li><li style="line-height:1.4em;margin:0;padding:0;">Sean Vig*</li><li style="line-height:1.4em;margin:0;padding:0;">Luca Weihs*</li><li style="line-height:1.4em;margin:0;padding:0;">Thomas Wiecki</li><li style="line-height:1.4em;margin:0;padding:0;">Shai 'Deshe' Wyborski*</li><li style="line-height:1.4em;margin:0;padding:0;">Jeremias Yehdegho*</li></ul></span></b></span></span></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>950</wp:post_id>
  <wp:post_date>2011-06-29 08:00:38</wp:post_date>
  <wp:post_date_gmt>2011-06-29 08:00:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>sympy-0-7-0-released</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_oembed_fbac01abbe5229d758e57ac1ac4db3ab</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_23a669aaf835d0d731b93da9f1b58b4f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_93c04d272177949e0449d7e72b677be2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0c5feaf91fb80b4febf8c4c0ed38140f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a39d69bbd110bd6da7009d6b70aa927b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_143afb9e5265823b8e6a97e976bce637</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d4612a65657e5a0571e5b014cc5a3bb3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>The SciPy 2011 Conference</title>
  <link>http://asmeurersympy.wordpress.com/2011/07/17/the-scipy-2011-conference/</link>
  <pubDate>Sun, 17 Jul 2011 16:32:31 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=965</guid>
  <description/>
  <content:encoded><![CDATA[So this past week, I attended the SciPy 2011 conference in Austin, TX, which was my first conference ever.  Here are some highlights of the conference for me:

<ul>
	<li>I met a <em>ton</em> of cool people.  This included meeting several people who I had previously known from mailing lists in person for the first time.  I met the SymPy developers Mateusz Paprocki and Andy Terrel, and I also had already known or heard about people like Fernando Perez, Gael Varoquaux, and Robert Kern.  There are a lot of people out there who are excited to be using Python for their research, which is a real refresher from my university, where everyone is using Matlab and Maple.</li>

	<li>Mateusz and I gave a tutorial on SymPy.  This was one of the four introductory track tutorials.  This was a great experience to teach SymPy to people.  You can see the <a href="http://mattpap.github.com/scipy-2011-tutorial/html/index.html">Sphinx document</a> that we used, and there should eventually be a video posted at the <a href="http://conference.scipy.org/scipy2011/tutorials.php#mateusz">SciPy 2011 website</a>.</li>

	<li>In addition to our tutorial, I attended some of the other tutorials.  I particularly enjoyed the NumPy tutorial. Having never used NumPy before, I now feel comfortable with the basics.  I also attended Gael Varoquaux's tutorial on scikits.learn and Corran Webster's tutorial on Matplotlib, Traits, and Chaco. My only regret is that the advanced track and introductory track tutorials were held at the same time, so I could not attend half of them.  I plan to watch the ones I missed online.</li>

	<li>The general conference was excellent.  Some of the talks that I particularly enjoyed were:
<ul><li>The keynotes.  I found Eric Jone's keynote particularly relevant as the leader of SymPy, as he talked about some of the good things to do and bad things to not do when leading a scientific project.  I also enjoyed Perry Greenfield's talk about how the astronomy community moved from some old proprietary system to Python.</li>
	<li>Mateusz gave a talk on his <a href="http://lab.femhub.org/">FEMhub online lab</a>, which a was very impressive system for using Python entirely in the web browser.</li>
	<li>By far the best talk of the entire conference was Fernando Perez's talk on the new IPython 0.11, which will be coming out in about a week or so.  His demo of the new features such as the QT console and html notebook were very impressive.  If you want to watch just one video from the conference, I would recommend that one.</li>
	<li>Mark Dewing gave a talk about a system he wrote using SymPy to do automated derivation of equations.  The system is impressive, and contains some features that would be nice to backport to SymPy.  He told me that he wants to do this, so follow the mailing list.  You can see what he has so far on his <a href="https://github.com/markdewing/sympy/tree/derivation_modeling">derivation_modeling</a> branch at GitHub.</li>
	<li>The lightning talks.  These are very short talks at the end of the conference that are only five minutes long.  In addition to many interesting talks, both Mateusz and I gave a lightning talk. Mateusz gave a talk on <a href="http://live.sympy.org/">SymPy Live</a>, which he recently improved to do things like give LaTeX output, and I gave a talk on my work with the Risch algorithm.  I would also highly recommend watch this talk once they post the videos.</li>
	<li>Again, regrettably, I could not attend half of the talks because they were held at the same time.  Fortunately, they filmed all of them, so I hope to watch them all online when they are posted (and I recommend that you do too).</li></ul>
	</li>

	<li>The sprints were a great time for getting together and hacking together.  I worked with Min Ragan-Kelley to make isympy work with the new IPython.  Having fixed this, I now want to release 0.7.1 very soon, so I used some of the time during the sprints getting ready for that.  We already have <a href="https://github.com/sympy/sympy/wiki/Release-Notes-for-0.7.1">preliminary release notes</a>, and my hope is to create a release candidate on Monday (tomorrow).  I also finished up my <a href="https://github.com/sympy/sympy/pull/491">MathJax branch</a> and finished reviewing and pushed in Tom's first GSoC pull request, which has a lot of really cool stuff relating to converting hypergeometric functions and Meijer G-functions into standard elementary functions.  This will all be in the release.

Also at the sprints, Mateusz worked on an extension for our Sphinx docs that puts a SymPy Live console right in the docs.  You can then click on "evaluate" next to any of the code examples, and it will run it in SymPy live.  And of course, you can then edit it and play around with it.  He already had a working version of this by the end of the sprints (with a few bugs still), but I don't think he has pushed it to GitHub yet.  I think this is going to be a landmark change for our documentation.  SymPy Live runs on the App Engine, so this approach can be applied to any library that can run in pure Python 2.5, and I think a lot of such projects are going to be jealous this and want to start using it, because it's very impressive and useful.

We also had a couple of people from the conference come to our table and work on SymPy.  These were people who were new to SymPy, and I think attended our tutorial.  One of them, Emma Hogan, worked a little bit on improving our documentation, and has submitted a <a href="https://github.com/sympy/sympy/pull/490">pull request</a>.
</li>

	<li>Austin, TX is a nice city with lots of fun places to go, but it is also very humid, which is something I could barely stand (I am used to the same heat, but in Albuquerque it is dry heat).  One interesting thing that some of us went and saw was the bats.  The bridge over this lake in Austin has over a million bats living under it, and at night they all fly out to feed.  </li>
</ul>

There's all kinds of fun and interesting stuff that happened that I did not mention here.  If you are interested in science and Python, I would highly recommend attending a future SciPy conference.  ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>965</wp:post_id>
  <wp:post_date>2011-07-17 16:32:31</wp:post_date>
  <wp:post_date_gmt>2011-07-17 16:32:31</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>the-scipy-2011-conference</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:comment>
    <wp:comment_id>391</wp:comment_id>
    <wp:comment_author><![CDATA[Ondrej Certik]]></wp:comment_author>
    <wp:comment_author_email>ondrej.certik@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://ondrejcertik.com</wp:comment_author_url>
    <wp:comment_author_IP>72.14.182.119</wp:comment_author_IP>
    <wp:comment_date>2011-07-18 20:08:38</wp:comment_date>
    <wp:comment_date_gmt>2011-07-18 20:08:38</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for writing it up. Very interesting and I am glad that you enjoyed it. I am also interested to see Eric Jones' presentation on video.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1311019718</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1311019718.8688";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>392</wp:comment_id>
    <wp:comment_author><![CDATA[Simon]]></wp:comment_author>
    <wp:comment_author_email>simonjtyler@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://gravatar.com/simonjtyler</wp:comment_author_url>
    <wp:comment_author_IP>124.170.18.136</wp:comment_author_IP>
    <wp:comment_date>2011-07-19 06:51:34</wp:comment_date>
    <wp:comment_date_gmt>2011-07-19 06:51:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[It sounds like it was a good conference - do you have any idea how long before the videos go up?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1311058294</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1311058294.9337";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>393</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>174.56.21.245</wp:comment_author_IP>
    <wp:comment_date>2011-07-19 17:54:16</wp:comment_date>
    <wp:comment_date_gmt>2011-07-19 17:54:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Not really.  I'd say in about a week or two.  The person who filmed it has to edit it all together.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>392</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1311098058</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1311098059.3036";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>595</wp:comment_id>
    <wp:comment_author><![CDATA[SymPy Live Sphinx Extension &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2012/08/21/sympy-live-sphinx-extension/</wp:comment_author_url>
    <wp:comment_author_IP>72.233.61.65</wp:comment_author_IP>
    <wp:comment_date>2012-08-21 05:09:19</wp:comment_date>
    <wp:comment_date_gmt>2012-08-21 05:09:19</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] system that we use to generate SymPy&#8217;s html documentation. Last year, when I was at the SciPy Conference, Mateusz had an idea at the sprints to create an extension linking SymPy Live and Sphinx, so that [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1345525761</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1345525761.652740001678466796875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Merging integration3 with sympy-0.7.0 nightmare</title>
  <link>http://asmeurersympy.wordpress.com/2011/07/25/merging-integration3-with-sympy-0-7-0-nightmare/</link>
  <pubDate>Mon, 25 Jul 2011 09:25:13 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=981</guid>
  <description/>
  <content:encoded><![CDATA[For a long time, there have been several problems in my <code>integration3</code> branch that were fixed in <code>master</code>.  I decided that as an incentive to finish the release, I would hold off on merging <code>master</code> into my branch until the 0.7.0 release was finished.  Well, here's a little timeline:

<ul>
	<li><strong>June 28, 2011:</strong> SymPy 0.7.0 final is released.</li>
	<li><strong>June 29, 2011:</strong> I type <code>git merge sympy-0.7.0</code> in my <code>integration3</code> branch.</li>
	<li><strong>July 24, 2011 (today; technically July 25 because it's 2 AM):</strong> I finish merging <code>sympy-0.7.0</code> into <code>integration3</code>.</li>
</ul>

That's right, it took me over three weeks---almost a month---to merge <code>sympy-0.7.0</code> into <code>integration3</code> (granted, I worked on other things at the same time, such as the <a href="https://github.com/asmeurer/sympy/commit/52657848516ce7f4f7119b921d6b8d64131b58d3" target="_blank">SciPy 2011 conference</a>, but to me, any merge that takes longer than a day to complete is a problem).  This is because git decided that I needed to fix as a merge conflict just about every single change in the release branch since the base of <code>integration3</code>.  The total was over 100 files.  You can see the final merge commit <a href="https://github.com/asmeurer/sympy/commit/52657848516ce7f4f7119b921d6b8d64131b58d3" target="_blank">here</a>.

So I started <code>git mergetool</code>, without which this whole ordeal would have been 10 times worse.  The mergetool, which on my computer is opendiff, i.e., File Merge, gave the correct change by default in most cases, so I actually did not have to manually fix the majority of the conflicts.  But I did have to go through and do a lot of them.  I had to manually check each difference in the polys, as I had made several changes there in the course of working on <code>integration3</code>.  In several occisaions, I had to research a change using <code>git log -S</code> and fancy methods.  And I noticed at least two regressions in the polys, which I fixed.

mergetool was useless against <code>risch.py</code> and <code>test_risch.py</code>, because in my branch I had renamed these to <code>heurisch.py</code> and <code>test_heurisch.py</code>.  Fortunately, these were not really modified much by me, so I could basically just replace them with the <code>sympy-0.7.0</code> versions.

Once I finished merging I had to deal with test failures.  This was partly expected, as my branch has always had test failures due to my hack disabling algebraic substitution in <code>exp</code>, which is required for <code>risch_integrate()</code> to work, but there were also several unrelated ones.  

Some of these were caused by wrong merge conflict resolutions by me.  So I went through <code>git diff sympy-0.7.0</code> change by change and made sure that nothing was different that I didn't want to be.  I would recommend doing this for any big merge.

Then, I had to fix a few bugs that caused test failures.  Several semantics were changed in the release.  I think the ones that I had to change were the renaming of <code>has_any_symbols</code> to just <code>has</code>, the renaming of <code>Poly.as_basic()</code> to <code>Poly.as_expr()</code>, and the swapping of the meanings of <code>quo</code> and <code>exquo</code> in the polys.  There were also some doctest failures due to the change to lexicographic ordering in the printer.

After all that, there were two regressions that caused test failures.  The first was the following:

Before:
[code lang="py"]
In [1]: Integral((exp(x*log(x))*log(x)), x).subs(exp(x*log(x)), x**x)
Out[1]: 
⌠             
⎮  x          
⎮ x ⋅log(x) dx
⌡             
[/code]

After:
[code lang="py"]
In [1]: Integral((exp(x*log(x))*log(x)), x).subs(exp(x*log(x)), x**x)
Out[1]: 
⌠                    
⎮  x⋅log(x)          
⎮ ℯ        ⋅log(x) dx
⌡                    
[/code]

This substitution is necessary because the Risch algorithm requires expressions like $latex x^x$ to be rewritten as $latex e^{x\log(x)}$ before it can integrate them, but I try to convert them back after integrating so that the user gets the same thing in the result that he entered.  I created <a href="http://code.google.com/p/sympy/issues/detail?id=2571" target="_blank">issue 2571</a> for this.

The second was that I had several places in my docstrings with things like

<blockquote>
Given a derivation D on k[t] and f, g in k(t) with f weakly normalized with respect to t, either raise NonElementaryIntegralException, in which case the equation Dy + f*y == g has no solution in k(t), or the quadruplet (a, b, c, h) such that a, h in k[t], b, c in k, and for any solution y in k(t) of Dy + f*y == g, q = y*h in k satisfies a*Dq + b*q == c.
</blockquote>

The problem here is the "raise NonElementaryIntegralException," part.  The code quality checker things that this is an old style exception (like <code>raise Exception, message</code>), due to a poorly formed regular expression.  I fixed this in a <a href="https://github.com/sympy/sympy/pull/511" target="_blank">pull request</a>.

The good news is that now a lot of stuff works that didn't before because of fixes that were required that only existed in <code>master</code>.  For example, the following did not work before, but now does due to improvements to <code>RootSum</code>:

[code lang="py"]

In [1]: risch_integrate(1/(exp(5*x) + exp(x) + 1), x)
Out[1]: 
           ⎛    2                                                           
x + RootSum⎝21⋅z  + 6⋅z + 1, Lambda(_i, _i*log(-3381*_i**4/4 - 3381*_i**3/4 

                                       ⎞          ⎛     3        2          
- 625*_i**2/2 - 125*_i/2 + exp(x) - 5))⎠ + RootSum⎝161⋅z  + 115⋅z  + 19⋅z + 

                                                                            
1, Lambda(_i, _i*log(-3381*_i**4/4 - 3381*_i**3/4 - 625*_i**2/2 - 125*_i/2 +

             ⎞
 exp(x) - 5))⎠

In [2]: cancel(risch_integrate(1/(exp(5*x) + exp(x) + 1), x).diff(x))
Out[2]: 
      1      
─────────────
 5⋅x    x    
ℯ    + ℯ  + 1
[/code]

The general definition of the logarithmic part of an integral is a sum over the roots of a polynomial, which must be expressed as a <code>RootSum</code> in the general case.  Previously, <code>RootSum.diff</code> did not work, but thanks to Mateusz, an algorithm for computing exactly the RootSum where the Lambda expression is a rational function was implemented (see <a href="http://mattpap.github.com/scipy-2011-tutorial/html/mathematics.html#summing-roots-of-polynomials" target="_blank">this bit</a> from our SciPy tutorial for an idea on how this works), so now the Risch Algorithm can work with RootSum objects just as well with as an ordinary sum of logarithms.

Also, there was a bug in the square free algorithm in my branch that was fixed in <code>master</code> that was causing wrong results (I don't remember the expression that produced them right now), and also there was a fix by me in <code>master</code> to make <code>is_rational_function()</code> faster, as it was significantly slowing down the calculation of some integrals (for example, <code>risch_integrate(Add(*(exp(i*x) for i in range(1000))))</code>, which is still slow to calculate, but now it's because of other things).

<strong>About big branches</strong>

So this merge, along with the poly12 fiasco (which by the way, I think part of the reason git made me do all these merge conflict resolutions was because <code>polys12</code> was rebased from the <code>polys11</code> I had merged into integration3), has shown me very clearly that it is very bad to go off with your own branch and do a lot of work and wait a long time before merging it back into the main repo.

This is what was done with <code>polys12</code>.  Mateusz had a lot of new polynomials code that he developed in one big branch, and when it finally came to merging it back in, it was a mess.  This was for several reasons, which I do not want to discuss too much here, but it became clear to everyone I think that doing this was bad, and that it would have been better to have submitted many changes as pull requests as they were made than keeping them all together in one big branch for a long time.

This model also affected my work, as I had to work off of latest the polys branch, not <code>master</code>, as my work relied heavily on the latest and greatest in the polys.  

Well, with this merge of the main repo into my branch, I see that my branch is starting to become the same way.  I originally thought that I should finish the Risch algorithm before submitting it to be merged into <code>master</code>.  I know know that this is the wrong approach.  Development in <code>master</code> is too fast to keep code away from it for too long.  The divergence makes it more and more difficult to merge back with every time.  Furthermore, there are regressions that were never noticed to be regressions because the code that would have shown them existed only in my branch.  Now I have to fix these, whereas if the code were in <code>master</code>, the regression would have never happened in the first place, because the author would have seen it immediately from the test failures.

I also thought that I should wait to merge because there were so many bugs in my code.  But I see now that this is also wrong.  Merging with <code>master</code> will help me find these bugs, as people will actually use my code.  Sure, I've asked people to try out <code>risch_integrate()</code>, and some people have (and I thank you), but having it in the default <code>integrate()</code> in <code>master</code> will result in finding more bugs in the code than I ever would alone, which is basically the way it is right now with the code living only in my own branch.

I would prepare my code for merging with <code>master</code> today, if it weren't for this <code>exp.subs</code> hack, which causes test failures and is technically a regression, but is required for the preparsing code to the Risch algorithm to work.  This is why I <a href="http://groups.google.com/group/sympy/browse_thread/thread/4a19d0f39f51fda6#" target="_blank">wrote to the list</a> two weeks ago asking for advice on how to structure the substitution code so that we can nicely have various kinds of substitutions (e.g., exact like I need and algebraic like currently exists in <code>exp</code>) living together without cluttering up the code.

Therefore, I am going to focus my energies on fixing this subs problem so I can get my code merged with <code>master</code>.  Then, when this is done, I will continue my work on implementing the remaining cases of the Risch algorithm.  

So let this tale be a warning to people working on a lot of code in a big branch.  This especially applies to our GSoC students, as it's extremely easy to let your code accumulate when you're a GSoC student (technically this branch of mine is a GSoC branch).  I see that some of our students are doing a better job of this than others.  To those who have your code all in one big branch that hasn't been merged, I recommend you ready your branch for merge now.  And in the future, try to break your code up into small but still meaningful chunks and submit those as pull requests.  With git, it's easy to base the code you are currently working on on code that hasn't been merged yet, while still keeping things in small chunks for the pull requests.  

On the other hand, git will only take you so far if you keep everything in a big branch, because there are going to be changes in <code>master</code> that will affect your work, no matter how isolated you think it is, and these are the sorts of things that it is impossible for git to fix for you.  But if your code is in <code>master</code>, it will be supported by everyone, and any major change that affects it will have to fix it. For example, if someone changes a printer and the doctests change, then he will have to change your doctest too if it's in <code>master</code>, but if it's in your branch, then you will have to fix it when you next merge/rebase with/against <code>master</code>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>981</wp:post_id>
  <wp:post_date>2011-07-25 09:25:13</wp:post_date>
  <wp:post_date_gmt>2011-07-25 09:25:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>merging-integration3-with-sympy-0-7-0-nightmare</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:comment>
    <wp:comment_id>394</wp:comment_id>
    <wp:comment_author><![CDATA[Ondrej Certik]]></wp:comment_author>
    <wp:comment_author_email>ondrej.certik@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://ondrejcertik.com</wp:comment_author_url>
    <wp:comment_author_IP>72.14.182.119</wp:comment_author_IP>
    <wp:comment_date>2011-07-25 21:24:09</wp:comment_date>
    <wp:comment_date_gmt>2011-07-25 21:24:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Very interesting. Yes, just prepare a pull request for the whole thing, we will thoroughly tested, just like with the polys, and then just merge it in, and be done with it.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1311629052</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1311629052.9467";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>396</wp:comment_id>
    <wp:comment_author><![CDATA[VPeric]]></wp:comment_author>
    <wp:comment_author_email>vlada.peric@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>77.105.11.235</wp:comment_author_IP>
    <wp:comment_date>2011-07-26 10:22:24</wp:comment_date>
    <wp:comment_date_gmt>2011-07-26 10:22:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Yes, I agree completely with you, small branches are just much better to work with. Anecdotally, I feel that ~20 commits is sort of an upper limit - anything more and it's too hard/long to review and to keep rebasing. For example, I think if I had waited to submit all my work at once it would've taken weeks to get in. Of course, my project is a bit specific in that everything I do is self-contained but it's always possible to split up your work somehow.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1311675745</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1311675745.2616";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>395</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>174.56.21.245</wp:comment_author_IP>
    <wp:comment_date>2011-07-25 23:00:30</wp:comment_date>
    <wp:comment_date_gmt>2011-07-25 23:00:30</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I decided that this was pretty important to discuss, so I <a href="http://groups.google.com/group/sympy/browse_thread/thread/05395e1a251e5092#" rel="nofollow">wrote to the mailing list</a> about it.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>394</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1311634831</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1311634831.9613";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>SymPy 0.7.1 Released</title>
  <link>http://asmeurersympy.wordpress.com/2011/07/30/sympy-0-7-1-released/</link>
  <pubDate>Sat, 30 Jul 2011 05:19:14 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1016</guid>
  <description/>
  <content:encoded><![CDATA[<em>Cross posted on the <a href="http://sympy.blogspot.com/2011/07/sympy-071-released.html">official SymPy Blog</a></em>

SymPy 0.7.1 has been released on July 29, 2011. It is available at

<a href="http://sympy.org">http://sympy.org
</a>

The source distribution can be downloaded from:
<a href="http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1.tar.gz">http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1.tar.gz
</a>

You can get the Windows installer here:
<a href="http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1.win32.exe">http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1.win32.exe
</a>

And the html documentation here:
<a href="http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1-docs-html.zip">http://code.google.com/p/sympy/downloads/detail?name=sympy-0.7.1-docs-html.zip
</a>

<span style="font-weight:bold;">About SymPy
</span>

SymPy is a Python library for symbolic mathematics. It aims to become a full-featured computer algebra system (CAS) while keeping the code as simple as possible in order to be comprehensible and easily extensible. SymPy is written entirely in Python.

<span style="font-weight:bold;">Release notes
</span>

<span style="font-weight:bold;">Major changes</span>

- Python 2.4 is no longer supported.  SymPy will not work at all in
  Python 2.4.  If you still need to use SymPy under Python 2.4 for some
  reason, you will need to use SymPy 0.7.0 or earlier.

- The Pyglet plotting library is now an (optional) external dependency. 
  Previously, we shipped a version of Pyglet with SymPy, but this was
  old and buggy.  The plan is to eventually make the plotting in SymPy
  much more modular, so that it supports many backends, but this has not
  been done yet.  For now, still only Pyglet is directly supported. 
  Note that Pyglet is only an optional dependency and is only needed for
  plotting. The rest of SymPy can still be used without any dependencies
  (except for Python).

- isympy now works with the new IPython 0.11.

- mpmath has been updated to 0.17.  See the corresponding mpmath release
  notes at http://mpmath.googlecode.com/svn/trunk/CHANGES.

- Added a Subs object for representing unevaluated substitutions.  This
  finally lets us represent derivatives evaluated at a point, i.e.,
  `diff(f(x), x).subs(x, 0)` returns `Subs(Derivative(f(_x), _x), (_x,), (0,))`.
  This also means that SymPy can now correctly compute the chain rule
  when this functionality is required, such as with `f(g(x)).diff(x)`.

<span style="font-weight:bold;">Hypergeometric functions/Meijer G-Functions</span>

- Added classes hyper() and meijerg() to represent Hypergeometric and Meijer G-functions, respectively. They support numerical evaluation (using mpmath) and symbolic differentiation (not with respect to the parameters).

- Added an algorithm for rewriting hypergeometric and meijer g-functions in terms of more familiar, named special functions. It is accessible via the function hyperexpand(), or also via expand_func(). This algorithm recognises many elementary functions, and also complete and incomplete gamma functions, bessel functions, and error functions. It can easily be extended to handle more classes of special functions.

<span style="font-weight:bold;">Sets</span>

- Added FiniteSet class to mimic python set behavior while also interacting with existing Intervals and Unions

- FiniteSets and Intervals interact so that, for example `Interval(0, 10) - FiniteSet(0, 5)` produces `(0, 5) U (5, 10]`

- FiniteSets also handle non-numerical objects so the following is possible `{1, 2, 'one', 'two', {a, b}}`

- Added ProductSet to handle Cartesian products of sets

- Create using the `*` operator, i.e. `twodice = FiniteSet(1, 2, 3, 4, 5, 6) * FiniteSet(1, 2, 3, 4, 5, 6) or square = Interval(0, 1) * Interval(0, 1)`

- pow operator also works as expected: `R3 = Interval(-oo, oo)**3 ; (3, -5, 0) in R3 == True`

- Subtraction, union, measurement all work taking complex intersections into account. 

- Added as_relational method to sets, producing boolean statements using And, Or, Eq, Lt, Gt, etc...

- Changed reduce_poly_inequalities to return unions of sets rather than lists of sets


<span style="font-weight:bold;">Iterables</span>

- Added generating routines for integer partitions and binary partitions. The routine for integer partitions takes 3 arguments, the number itself, the maximum possible element allowed in the partitions generated and the maximum possible number of elements that will be in the partition. Binary partitions are characterized by containing only powers of two.

- Added generating routine for multi-set partitions. Given a multiset, the algorithm implemented will generate all possible partitions of that multi-set.

- Added generating routines for bell permutations, derangements, and involutions. A bell permutation is one in which the cycles that compose it consist of integers in a decreasing order. A derangement is a permutation such that the ith element is not at the ith position. An involution is a permutation that when multiplied by itself gives the identity permutation.

- Added generating routine for unrestricted necklaces. An unrestricted necklace is an a-ary string of n characters, each of a possible types. These have been characterized by the parameters n and k in the routine.

- Added generating routine for oriented forests. This is an implementation of algorithm S in TAOCP Vol 4A.

<span style="font-weight:bold;">xyz Spin bases</span>

- The represent, rewrite and InnerProduct logic has been improved to work between any two spin bases. This was done by utilizing the Wigner-D matrix, implemented in the WignerD class, in defining the changes between the various bases. Representing a state, i.e. `represent(JzKet(1,0), basis=Jx)`, can be used to give the vector representation of any get in any of the x/y/z bases for numerical values of j and m in the spin eigenstate. Similarly, rewriting states into different bases, i.e. `JzKet(1,0).rewrite('Jx')`, will write the states as a linear combination of elements of the given basis. Because this relies on the represent function, this only works for numerical j and m values. The inner product of two eigenstates in different bases can be evaluated, i.e. `InnerProduct(JzKet(1,0),JxKet(1,1))`. When two different bases are used, one state is rewritten into the other basis, so this requires numerical values of j and m, but innerproducts of states in the same basis can still be done symbolically.

- The `Rotation.D` and `Rotation.d` methods, representing the Wigner-D function and the Wigner small-d function, return an instance of the WignerD class, which can be evaluated with the `doit()` method to give the corresponding matrix element of the Wigner-D matrix.

<span style="font-weight:bold;">Other changes</span>

- We now use MathJax in our docs. MathJax renders LaTeX math entierly in
  the browser using Javascript.  This means that the math is much more
  readable than the previous png math, which uses images.  MathJax is
  only supported on modern browsers, so LaTeX math in the docs may not
  work on older browsers.

- nroots() now lets you set the precision of computations

- Added support for gmpy and mpmath's types to sympify()

- Fix some bugs with lambdify()

- Fix a bug with as_independent and non-commutative symbols.

- Fix a bug with collect (issue 2516)

- Many fixes relating to porting SymPy to Python 3.  Thanks to our GSoC
  student Vladimir Perić, this task is almost completed.

- Some people were retroactively added to the AUTHORS file.

- Added a solver for a special case of the Riccati equation in the ODE
  module.

- Iterated derivatives are pretty printed in a concise way.

- Fix a bug with integrating functions with multiple DiracDeltas.

- Add support for Matrix.norm() that works for Matrices (not just vectors).

- Improvements to the Groebner bases algorithm.

- Plot.saveimage now supports a StringIO outfile

- Expr.as_ordered_terms now supports non lex orderings.

- diff now canonicalizes the order of differentiation symbols.  This is
  so it can simplify expressions like `f(x, y).diff(x, y) - f(x,
  y).diff(y, x)`.  If you want to create a Derivative object without
  sorting the args, you should create it explicitly with `Derivative`,
  so that you will get `Derivative(f(x, y), x, y) != Derivative(f(x, y), y, x)`.
  Note that internally, derivatives that can be computed are always
  computed in the order that they are given in.

- Added functions `is_sequence()` and `iterable()` for determining if
  something is an ordered iterable or normal iterable, respectively.

- Enabled an option in Sphinx that adds a `source` link next to each function, which links to a copy of the source code for that function.

In addition to the more noticeable changes listed above, there have been numerous other smaller additions, improvements and bug fixes in the ~300 commits in this release. See the git log for a full list of all changes.  The command `git log sympy-0.7.0..sympy-0.7.1` will show all commits made between this release and the last. You can also see the issues closed since the last release [here](http://code.google.com/p/sympy/issues/list?can=1&amp;q=closed-after%3A2010%2F6%2F13+closed-before%3A2011%2F7%2F30&amp;sort=-closed&amp;colspec=ID+Type+Status+Priority+Milestone+Owner+Summary+Stars+Closed&amp;cells=tiles).

<span style="font-weight:bold;">Authors</span>

The following people contributed at least one patch to this release (names are given in alphabetical order by last name).  A total of 26 people contributed to this release.  People with a * by their names contributed a patch for the first time for this release.  Five people contributed for the first time for this release.  

Thanks to everyone who contributed to this release!

* Tom Bachmann
* Ondřej Čertík
* Renato Coutinho
* Bill Flynn
* Bradley Froehle*
* Gilbert Gede
* Brian Granger
* Emma Hogan*
* Yuri Karadzhov
* Stefan Krastanov*
* Ronan Lamy
* Tomo Lazovich
* Sam Magura*
* Saptarshi Mandal
* Aaron Meurer
* Sherjil Ozair
* Mateusz Paprocki
* Vladimir Perić
* Mario Pernici
* Nicolas Pourcelot
* Min Ragan-Kelley*
* Matthew Rocklin
* Chris Smith
* Vinzent Steinberg
* Sean Vig
* Thomas Wiecki
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1016</wp:post_id>
  <wp:post_date>2011-07-30 05:19:14</wp:post_date>
  <wp:post_date_gmt>2011-07-30 05:19:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>sympy-0-7-1-released</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_oembed_fbac01abbe5229d758e57ac1ac4db3ab</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c4712b132aa8341cff9d15e31c936c6e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fdd2a7558886adb82d47bceeb69a34e5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_17dd8230a217a27e1330edc2f1eaaf99</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5b9d06a9147f1918318056540052606a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bf3741ef186db77480f300b2b03570a8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a6d03438390b53fb67925b263e66fe92</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3bfd0747d0c3b104243ff35ab3933e81</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Hacking PuDB: Now an even better Python debugger</title>
  <link>http://asmeurersympy.wordpress.com/2011/08/08/hacking-pudb-now-an-even-better-python-debugger/</link>
  <pubDate>Mon, 08 Aug 2011 03:16:10 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1020</guid>
  <description/>
  <content:encoded><![CDATA[Readers of this blog may remember last year when I <a href="http://asmeurersympy.wordpress.com/2010/06/04/pudb-a-better-python-debugger/" target="_blank">wrote</a> about this awesome visual console Python debugger called <a href="http://pypi.python.org/pypi/pudb" target="_blank">PuDB</a>.  I suggest you read that post if you haven't.

At the end of that post, I noted that Ondřej and I had hacked it to make the colors more livable.  Well, a couple of weeks ago, GitHub user <a href="https://github.com/jtriley" target="_blank">jtriley</a> sent me an email asking me to back port my changes.

A lot has changed since I wrote my blog post last year.  PuDB now has an official <a href="http://lists.tiker.net/listinfo/pudb" target="_blank">mailing list</a> and an official <a href="https://github.com/inducer/pudb" target="_blank">GitHub repo</a>.

So I deleted my <a href="https://github.com/asmeurer/pudb" target="_blank">GitHub clone</a> and reforked from the official version.  

A lot has also changed in the official code.  Andreas had added config support, including a built-in prefs dialog that lets you set a few settings:  the ability to turn on or off line numbers and the ability to change themes.

So I took the new code and added my theme as an official theme.  This was pretty straight forward to do.

But then, I got a little carried away.  

I noticed that it was difficult to choose a theme with the built-in prefs window because you had to close and reopen the window each time you made a change.  So I added code to make it auto-update your changes as you made them.

Then I went back and looked at my original blog post and looked at the things that I didn't like.  There were two things.  First, the default stringifier for variables is <code>type</code>, which is completely useless.  This is because <code>type</code> is very fast and stable to compute.  I had previously hacked this to be <code>str</code>, but now that there was an official config file with a prefs dialog, I figured it should go there. 

So I added support to change this setting.  But this wasn't enough for me.  I also added the ability to define your own custom stringifier.  You just create a Python file that defines a function called <code>pudb_stringifier(obj)</code>, which converts <code>obj</code> into the desired string representation.  I included an <a href="https://github.com/inducer/pudb/blob/master/example-stringifier.py" target="_blank">example file</a> that gives a fancy example that uses signals to compute the string value, but times out after one second and falls back to the type.  This alleviates one of the problems of using <code>str</code>, which is that it can be slow for objects with large string expressions, especially SymPy objects, where sometimes the printer can be slow.

The second thing I didn't like was that although you can change the width of the right-hand side bar, you could not change the relative heights of the variables, stack, and breakpoints boxes.  I never use breakpoints, and rarely use the stack, so I would prefer to have those smaller and the variables larger.  So I implemented it so that the <code>[</code> and <code>]</code> keys make the selected view smaller or larger.  This information is all saved in the config file, so it's remembered when you close and reopen PuDB.

There was one other thing that I didn't like, which a change since my last blog post that reversed the order of the stack variables from what it was.  It used to be most recent at the bottom, but it was changed to most recent at the top.  This perhaps makes more sense, but the buttons to move around the stack, <code>u</code> and <code>d</code>, were still the same: <code>u</code> moves down the stack (i.e., less recent), and <code>d</code> moves up.  These keys were already well established—indeed, these are the same keys used in Python's built-in debugger pdb—so I added a setting to change the stack order.  This was an easy change to make at this point, as I was already well aquatinted with the settings code, and only two lines of code needed to be changed when the setting changed.  Like all other settings, this uses the cool magic that changes the setting in real time, so you can see the effect without closing the settings window.

Then someone on the mailing list requested a feature that I realized I also wanted, the ability to wrap variables.  Previously, any variable that was longer than the variable view would just be cut off.  You could make it wider, but that only helped a little bit.  Otherwise, if you wanted to see the whole variable, you had to open IPython by pressing <code>!</code> and view it there.

So, I implemented this.  This was definitely the hardest thing to implement.  I found out that it's ironically very difficult to debug PuDB itself.  You can't run PuDB inside of PuDB if PuDB crashes, as both instances will just crash.  Also, PuDB eats any print statements.  The solution, suggested by PuDB author Andreas Klöckner, was to get the ttys file of another terminal (e.g., <code>/dev/ttys012</code>) and write the output to that.

I also made it so that non-wrapped variables show <code>...</code> at the end, at Andreas's suggestion.  I wanted to use the unicode <code>…</code>, but this was not working at all.  I discovered how much unicode really is a mess in Python 2.  The problem has something to do with … being a three byte character, and I think it also has to do with the color codes that urwid uses.  I'll try it again once PuDB is ported to Python 3, but for now,  we are going to have to do with the three ascii dots.

The wrapping code is waiting for merge, but the rest are already in.  Here is a screen shot demonstrating some of the things I did:

[caption id="attachment_1021" align="alignnone" width="300" caption="Click for full size image"]<a href="http://asmeurersympy.files.wordpress.com/2011/08/screen-shot-2011-08-07-at-8-28-11-pm.png"><img src="http://asmeurersympy.files.wordpress.com/2011/08/screen-shot-2011-08-07-at-8-28-11-pm.png?w=300" alt="" title="Improved PuDB" width="300" height="245" class="size-medium wp-image-1021" /></a>[/caption]

Things that I implemented to notice here:

- The midnight theme.
- The stack and breakpoints views have been shrunken.
- The variables are wrapped.
- Wrapping for the variable <code>fourhundred</code> has been turned off (you can turn wrapping on or off on a per-variable basis by selecting the variable and pressing <code>w</code>).   Notice that there is an ellipsis at the end to note it has been cut off.
- Nested variables now have <code>|</code> before them, to distinguish them from wrapped variables, which are also indented.  This change may or may not be accepted by Andreas.


Here's a screen shot showing the prefs window.  I did not implement this, but I did implement all but the first two preferences in the window. I've made my window tall so you can see all the options.  You really have to get the code and try it to see the auto-update awesomeness.  You can open the prefs window by pressing <code>Ctrl-p</code> (this was not at all obvious to me the first time I used it, so I also submitted a patch that makes it open the first time you use PuDB).

[caption id="attachment_1023" align="alignnone" width="243" caption="Click to see full size image"]<a href="http://asmeurersympy.files.wordpress.com/2011/08/screen-shot-2011-08-07-at-8-41-30-pm.png"><img src="http://asmeurersympy.files.wordpress.com/2011/08/screen-shot-2011-08-07-at-8-41-30-pm.png?w=243" alt="" title="PuDB Prefs Window" width="243" height="300" class="size-medium wp-image-1023" /></a>[/caption]

So if you're not already using this awesome Python debugger, you should.  You can <code>pip install pudb</code>, or <a href="https://github.com/inducer/pudb" target="_blank">fork it</a> at GitHub.

Running it in your code is very easy.  Just add

[code lang="py"]
import pudb;pudb.set_trace()
[/code]

in your code wherever you want to set a break point, or you can do <code>python -m pudb.run script.py</code>.

This awesome tool has increased my productivity tenfold since I discovered it, and has helped me track down bugs that would have otherwise extremely difficult if not impossible to find.  And now, it's just better.

PuDB uses the <a href="http://excess.org/urwid/" target="_blank">urwid library</a> to do all its console GUI magic.  This library makes it pretty easy to do a lot of stuff. For example, it automatically does relative sizing of widgets, so, for example, when you resize the variables, stack, or breakpoints views, you are actually increasing the relative size of each, not the size in characters.  This makes it portable against any terminal size.  The library also made coding the prefs window autoupdate magic very easy.

Also, I just want to note that git and GitHub make collaboration like this very easy.  I just forked his project, made some improvements, and submitted them as pull requests.  Then it was easy to discuss the changes.  If the code had not been on GitHub and especially if it had not been in git, I probably would have never bothered to submit my contributions upstream.  I highly recommend that every open source project use git and GitHub.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1020</wp:post_id>
  <wp:post_date>2011-08-08 03:16:10</wp:post_date>
  <wp:post_date_gmt>2011-08-08 03:16:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>hacking-pudb-now-an-even-better-python-debugger</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:comment>
    <wp:comment_id>511</wp:comment_id>
    <wp:comment_author><![CDATA[J. B. L]]></wp:comment_author>
    <wp:comment_author_email>john.bernard@upr.edu</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>136.145.56.246</wp:comment_author_IP>
    <wp:comment_date>2012-03-22 19:41:05</wp:comment_date>
    <wp:comment_date_gmt>2012-03-22 19:41:05</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[It looks like you haven't gotten much response but I just wanted to thank you for your introducing me to PuDB and for your contributions. I was skeptical at it's "non-GUI-ness" but it's so easy to use I think it's actually BETTER that it doesn't have a GUI. It's a revelation! 

I also saw that you are the lead on Sympy and I wanted to thank you for your contributions there as well! Sympy + IPQT + Latex = Awesome! 

Thank you for helping to make python even more awesome and productive!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1332445270</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1332445270.9109";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>512</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron Meurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>129.138.36.166</wp:comment_author_IP>
    <wp:comment_date>2012-03-23 01:38:02</wp:comment_date>
    <wp:comment_date_gmt>2012-03-23 01:38:02</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Well I wouldn't exactly say that it doesn't have a GUI.  It does have a GUI, just one that is implemented in curses instead of the traditional OS widgets.  You do have to use the keyboard, but even that might change at some point (see https://github.com/inducer/pudb/pull/15).  To me, what makes PuDB great is that the superiority of actual UI itself (i.e., the layout, the way the interaction is structured, etc.).  And since it's in the terminal, which is where I work with Python anyway (with IPython), I can easily call it up without waiting for a GUI to load or moving away from the window at all.  And I can easily access to IPython from within the debugging session, which is almost a killer feature in and of itself.

Glad to hear that my contributions and suggestions are helping people out.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>511</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1332466686</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1332466687.1555";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>774</wp:comment_id>
    <wp:comment_author><![CDATA[PuDB, a better Python debugger &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2010/06/04/pudb-a-better-python-debugger/</wp:comment_author_url>
    <wp:comment_author_IP>216.151.210.19</wp:comment_author_IP>
    <wp:comment_date>2013-01-28 00:35:48</wp:comment_date>
    <wp:comment_date_gmt>2013-01-28 00:35:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] UPDATE 4: PuDB has since improved a lot, include many fixes by myself. It now supports themes, saved settings, variable name wrapping, and more. See this followup post. [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1359333348</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1359333348.582601070404052734375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>812</wp:comment_id>
    <wp:comment_author><![CDATA[Paul Hobbs (@PaulHobbs23)]]></wp:comment_author>
    <wp:comment_author_email>PaulHobbs23@twitter.example.com</wp:comment_author_email>
    <wp:comment_author_url>http://twitter.com/PaulHobbs23</wp:comment_author_url>
    <wp:comment_author_IP>69.28.149.29</wp:comment_author_IP>
    <wp:comment_date>2013-04-12 17:56:45</wp:comment_date>
    <wp:comment_date_gmt>2013-04-12 17:56:45</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Pudb is very convenient.  Thank you for your work!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value>http://a0.twimg.com/profile_images/1378384551/blue_steel_normal.png</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value>18159424</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value>twitter</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1365789406</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1365789407.280314922332763671875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>sqrt(x) now prints as "sqrt(x)"</title>
  <link>http://asmeurersympy.wordpress.com/2011/08/18/sqrtx-now-prints-as-sqrtx/</link>
  <pubDate>Thu, 18 Aug 2011 03:11:32 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1042</guid>
  <description/>
  <content:encoded><![CDATA[Just a few moments ago, <a href="https://github.com/sympy/sympy/pull/548" target="_blank">a branch</a> was pushed in that fixed one of my biggest grievances in SymPy, if not the biggest.  Previously we had this behavior:

[code language="py"]
In [1]: sqrt(x)
Out[1]: x**(1/2)

In [2]: solve(x**2 - 2, x)
Out[2]: [-2**(1/2), 2**(1/2)]
[/code]

Now suppose you took the output of those expressions and pasted them into isympy:

[code language="py"]
In [3]: x**(1/2)
Out[3]: x**0.5

In [4]: [-2**(1/2), 2**(1/2)]
Out[4]: [-1.41421356237, 1.41421356237]
[/code]

That's with <code>__future__.division</code>.  Here's what would happen with old division:

[code language="py"]
In [2]: x**(1/2)
Out[2]: 1

In [3]: [-2**(1/2), 2**(1/2)]
Out[3]: [-1, 1]
[/code]

This is because with old division, <code>1/2</code> evaluates to <code>0</code>.

The problem is that Python evaluates <code>1/2</code> to <code>0.5</code> (or <code>0</code>) before SymPy has a change to convert it to a Rational.  There were several ways that people got around this.  If you copy an expression with number division in it and want to paste it into a SymPy session, the easiest way to do this was to pass it as a string to <code>sympify()</code>:

[code language="py"]
In [1]: sympify(&quot;x**(1/2)&quot;)
Out[1]: x**(1/2)

In [2]: sympify(&quot;[-2**(1/2), 2**(1/2)]&quot;)
Out[2]: [-2**(1/2), 2**(1/2)]
[/code]

If that was too much typing for you, you could use the <code>S()</code> shortcut to <code>sympify()</code>

[code language="py"]
In [3]: S(&quot;x**(1/2)&quot;)
Out[3]: x**(1/2)

In [4]: S(&quot;[-2**(1/2), 2**(1/2)]&quot;)
Out[4]: [-2**(1/2), 2**(1/2)]
[/code]

This solution is fine if you want to paste an expression into a SymPy session, but it's not a very clean one if you want to paste code into a script. For that, you need to modify the code so that it no longer contains Python int/Python int.  The easiest way to do this is to sympify one of the ints.  So you would do something like

[code language="py"]
In [5]: x**(S(1)/2)
Out[5]: x**(1/2)

In [6]: [-2**(S(1)/2), 2**(S(1)/2)]
Out[6]: [-2**(1/2), 2**(1/2)]
[/code]

This wasn't terribly readable, though.  The <em>best</em> way to fix the problem when you had a power of one half was to use <code>sqrt()</code>, which is a shortcut to <code>Pow(…, Rational(1, 2))</code>.  

Well, this last item should make you think.  If <code>sqrt(x)</code> is more readable than <code>x**(S(1)/2)</code> or even <code>x**(1/2)</code>, why not print it like that in the first place.  Well, I thought so, so I changed the string printer, and now this is the way that SymPy works.  So 90% of the time, you can just paste the result of <code>str()</code> or <code>print</code>, and it will just work, because there won't be any <code>**(1/2)</code>, which was by far the most common problem of "Python evaluating the expression to something before we can."  In the git master, SymPy now behaves like

[code language="py"]
In [1]: sqrt(x)
Out[1]: sqrt(x)

In [2]: solve(x**2 - 2, x)
Out[2]: [-sqrt(2), sqrt(2)]
[/code]

You can obviously just copy and paste these results, and you get the exact same thing back.  Not only does this make expressions more copy-and-pastable, but the output is <em>much</em> nicer in terms of readability.  Here are some before and afters that come from actual SymPy doctests that I had to change after fixing the printer:

[code language="py"]
Before:
&gt;&gt;&gt; e = ((2+2*sqrt(2))*x+(2+sqrt(8))*y)/(2+sqrt(2))
&gt;&gt;&gt; radsimp(e)
2**(1/2)*x + 2**(1/2)*y

After:
&gt;&gt;&gt; radsimp(e)
sqrt(2)*x + sqrt(2)*y
[/code]

[code language="py"]
Before:
&gt;&gt;&gt; b = besselj(n, z)
&gt;&gt;&gt; b.rewrite(jn)
2**(1/2)*z**(1/2)*jn(n - 1/2, z)/pi**(1/2)

After:
&gt;&gt;&gt; b.rewrite(jn)
sqrt(2)*sqrt(z)*jn(n - 1/2, z)/sqrt(pi)
[/code]

[code language="py"]
Before:
&gt;&gt;&gt; x = sympify('-1/(-3/2+(1/2)*sqrt(5))*sqrt(3/2-1/2*sqrt(5))')
&gt;&gt;&gt; x
(3/2 - 5**(1/2)/2)**(-1/2)

After
&gt;&gt;&gt; x
1/sqrt(3/2 - sqrt(5)/2)
[/code]

And not only is <code>sqrt(x)</code> easier to read than <code>x**(1/2)</code> but it's fewer characters.

In the course of changing this, I went ahead and did some greps of the repository to get rid of all <code>**(S(1)/2)</code>, <code>**Rational(1, 2)</code> and similar throughout the code base (not just in the output of doctests where the change had to be made), replacing them with just <code>sqrt</code>.  Big thanks to Chris Smith for helping me catch all instances of this.  Now the code should be a little easier to read and maintain.

<strong>Future Work</strong>

This is a big change, and I believe it will fix the copy-paste problem for 90% of expressions. But it does not solve it completely.  It is still possible to get int/int in the string form of an expression.  Only powers of 1/2 and -1/2 are converted to sqrt, so any other rational power will still print as a/b, like

[code language="py"]
In [1]: x**Rational(3, 2)
Out[1]: x**(3/2)
[/code]

Also, as you may have noticed in the last example above, a rational number that sits by itself will still be printed as int/int, like

[code language="py"]
In [2]: (1 + x)/2
Out[2]: x/2 + 1/2
[/code]

Therefore, I'm leaving the <a href="http://code.google.com/p/sympy/issues/detail?id=2359" target="_blank">issue for this</a> open to discuss potential future fixes to the string printer.  One idea is to create a <code>root</code> function that is a shortcut to <code>root(x, a) == x**(1/a)</code>. This would work for rational powers where the numerator is 1.  For other rational powers, we could then denest these with an integer power.  It's important to do this in the right order, though, as they are not equivalent.  You can see that SymPy auto-simplifies it when it is mathematically correct in all cases, and not when it is not:

[code language="py"]
In [3]: sqrt(x**3)
Out[3]: sqrt(x**3)

In [4]: sqrt(x)**3
Out[4]: x**(3/2)
[/code]

Thus $latex \left(\sqrt{x}\right)^3 = x^{\frac{3}{2}}$ but $latex \sqrt{x^3} \neq x^{\frac{3}{2}}$ (to see this, replace $latex x$ with -1).

So the idea would be to print <code>Pow(expr, Rational(a, b))</code> as <code>root(expr, b)**a</code>.  

The merits of this are debatable, but anyway I think we should have this <code>root()</code> function in any case (see <a href="http://code.google.com/p/sympy/issues/detail?id=2643" target="_blank">issue 2643</a>).

Another idea, which is probably not a good one, is to always print <code>int/int</code> as <code>S(int)/int</code>.  So we would get

[code language="py"]
&gt;&gt;&gt; Rational(1, 2)
S(1)/2
&gt;&gt;&gt; x**Rational(4, 5)
x**(S(4)/5)
[/code]

This is probably a bad idea because even though expressions would always be copy-pastable, they would be slightly less readable.  

By the way, in case you didn't catch it, all of these changes only affect the string printer.  The pretty printer remained unaffected, and would under any additional changes, as it isn't copy-pastable anyway, and already does a superb job of printing roots.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1042</wp:post_id>
  <wp:post_date>2011-08-18 03:11:32</wp:post_date>
  <wp:post_date_gmt>2011-08-18 03:11:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>sqrtx-now-prints-as-sqrtx</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:comment>
    <wp:comment_id>403</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>129.138.31.230</wp:comment_author_IP>
    <wp:comment_date>2011-08-19 21:12:06</wp:comment_date>
    <wp:comment_date_gmt>2011-08-19 21:12:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Yes you do.  1/2 will evaluate to 0.5, but you want it to evaluate to Rational(1, 2).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>402</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1313788327</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1313788327.8379";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>400</wp:comment_id>
    <wp:comment_author><![CDATA[VP]]></wp:comment_author>
    <wp:comment_author_email>vlada.peric@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>109.121.41.68</wp:comment_author_IP>
    <wp:comment_date>2011-08-18 13:58:02</wp:comment_date>
    <wp:comment_date_gmt>2011-08-18 13:58:02</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Well then, that's one thing where using Python 3 would be an actual help!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1313675882</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1313675882.3063";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>401</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron Meurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>174.56.21.245</wp:comment_author_IP>
    <wp:comment_date>2011-08-18 19:03:24</wp:comment_date>
    <wp:comment_date_gmt>2011-08-18 19:03:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I don't follow you.  The only place where Python 3 would make a difference is that you don't have to "from __future__ import division" to get the slightly less bad output from pasting.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>400</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1313694205</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1313694205.6075";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>402</wp:comment_id>
    <wp:comment_author><![CDATA[VP]]></wp:comment_author>
    <wp:comment_author_email>vlada.peric@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>79.175.87.165</wp:comment_author_IP>
    <wp:comment_date>2011-08-19 08:41:57</wp:comment_date>
    <wp:comment_date_gmt>2011-08-19 08:41:57</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Well, you don't really need to do anything listed under "Future work" if true division is the default.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>401</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1313743318</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1313743318.8612";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Vim vs. Emacs (Part 1)</title>
  <link>http://asmeurersympy.wordpress.com/2011/12/20/vim-vs-emacs-part-1/</link>
  <pubDate>Tue, 20 Dec 2011 08:17:43 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1059</guid>
  <description/>
  <content:encoded><![CDATA[So about a month or so ago, I decided that I needed to start learning a command line text editor.  XCode, the editor I had been using for Python files, didn't work very well with the new version (in particular, the <a href="http://asmeurersympy.wordpress.com/2009/12/29/automatically-remove-trailing-whitespace-in-xcode/">essential plugin</a> that I'd been using to clear trailing whitespace on save doesn't yet work in XCode 4).  I'd been using TextWrangler for other things, and started to switch to it for Python editing too.  As far as free GUI text editors on the Mac go, TextWrangler is the best.  

But I'd seen some of the nice features that vim has, like automatically keeping all lines under 80 characters, on a friend's computer, and I decided that I should try it.

Now, I had had a little prior experience with both vim and emacs, but all that I remembered was for vim that <code>i</code> inserts and <code>ZZ</code> quits (for when I accidentally open it) and for emacs, that <code>M-X doctor</code> starts the psychiatrist. 

So I've decided to try them out, doing it cold turkey.  To make sure that I choose the better one, I've decided to try both.  So, starting about a week ago, I've been using nothing but vim for all my text editing.  Starting in January, I will try using emacs, and after two weeks, I will see what I like better.

My opinions so far on vim:

	<li>The tutorials suck.  The best tutorial is <code>vimtutor</code> (type that in the command line), which I think comes with vim.  It's not bad, but it leaves out a few things that I would consider to be essential to a tutorial, for example, how to scroll (answer: use CTRL-D and CTRL-U).  I started the emacs tutorial a while back, and while I never finished it, from what I remember, it was much better (and I also remember that the first thing it talked about was how to scroll by more than one line at a time). It also left out the <code>.</code> command, which I think is rather useful.  I did print out <a href="http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html">this cheatsheet</a> and have it sitting next to me on my desk.  That has helped a lot.  I hope I can find something similar for emacs when I get to it.</li>
	<li>vim is too line oriented.  vi started out as an extension to ed, the line editor, so this is not surprising.  But I still can't understand why pressing <code>l</code> at the end of a line can't bring me to the beginning of the next line.  Maybe I'm just still doing it wrong (supposedly, you should rarely use <code>h</code> and <code>l</code> over more efficient moving commands).  </li>
	<li>Somewhat related to the last point, vim really likes to ring the terminal bell a lot. To quote <a href="http://en.wikipedia.org/wiki/Editor_war">Wikipedia</a>, "vi has two modes – 'beep repeatedly' and 'break everything'"</li>
	<li>I managed to customize it to the point of usability (there are still several things I need to go in and figure out how to fix).  See https://github.com/asmeurer/dotfiles for my .vimrc and .vim/ files.  I found a decent Python syntax file, but it's actually not that great.  I modified it to color single quoted strings different from double quoted strings (a feature I missed from Xcode). I still need to make a better color scheme (preferably the same as Xcode's midnight), but this is enough work that I've put it off.</li>
	<li>Pressing ESC all the time is really annoying.  Sometimes, I just arrow over, even though I know you're not "supposed to", just because my fingers don't want to reach over and press ESC.  I'm also really used to using control sequences to move around while typing, which of course doesn't work in vim.  In fact, so far, I'm suspecting that I'll like emacs better.  But I've vowed to give both a fair chance.  But so far, my impression is that vim is a great for text <em>editing</em>, but not so hot for text <em>writing</em> (unless you always write text perfectly, so that you never need to leave insert mode until you are done typing).  Just the simple act of deleting a mistyped word (yes, word, that happens a lot when you are decently fast touch typist) takes several keystrokes, when it should in my opinion only take one (two if you count the meta-key).</li>
	<li>The customizability is really nice.  So far, everything that I've thought of to change has been changeable.  Also, language is easy enough to understand that I was able to modify the Python syntax file without any difficulty.  </li>
	<li>I like how it syntax highlights virtually everything I throw at it. </li>

If there are any vim experts out there reading this, I have some questions:

	<li>Is there an easy way to get a list of and jump to a function/class definition in a Python file?  In Xcode and TextWrangler, there was a nice popup at the top of the window that I could access these from.  In vim, so far the best I've found is searching for it, which isn't very efficient.</li>

	<li>I got TAB to indent 4 spaces in Python, but for some reason, when I create a new line after a <code>:</code>, it puts 8 extra spaces. I wouldn't be surprised if this is the result of some mismatch/error in <a href="https://github.com/asmeurer/dotfiles">my .vimrc or .vim/ files</a>, but I don't know how to fix it</li>

	<li>Any useful tricks to share?  Especially for editing Python files.</li>
	<li>How long did it take you to become reasonably efficient with vim?</li>

<strong>EDIT: I thought of some more questions:</strong>
	<li>Is there a way to make vim consider camelCase to be word boundaries?</li>


Finally, if anyone else is thinking of starting vim, I have some useful things I've already found in my .vimrc. So you might take a look at that, and add the ones that you like to your .vimrc.  Finally, if you are on Mac OS X, you should use <a href="http://www.iterm2.com/#/section/home">iTerm2</a>.  Actually, you should use this regardless of what text editor you use.  It's a very good Terminal.app replacement that has virtually all the features (with a couple of exceptions) as Terminal.app, and a ton of extra ones.  The one I want to mention here is mouse reporting support, so you can use your mouse to do things in vim.  This is very useful, as sometimes, e.g., when selecting text, using the mouse is just more efficient.  Also, if you get frustrated trying to remember the commands that will move around you faster than <code>h</code>, <code>j</code>, <code>k</code>, and <code>l</code>, you can just click on where you want to go.

:wq]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1059</wp:post_id>
  <wp:post_date>2011-12-20 08:17:43</wp:post_date>
  <wp:post_date_gmt>2011-12-20 08:17:43</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>vim-vs-emacs-part-1</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:comment>
    <wp:comment_id>430</wp:comment_id>
    <wp:comment_author><![CDATA[Scott]]></wp:comment_author>
    <wp:comment_author_email>sbicknel@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>67.183.198.170</wp:comment_author_IP>
    <wp:comment_date>2011-12-24 17:31:13</wp:comment_date>
    <wp:comment_date_gmt>2011-12-24 17:31:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[" allow moving cursor beyond the end of the line
set virtualedit=all        

That will fix the problem with visual block mode. Visual block mode is more for replacing text already in your file rather than for yanking, but it will yank exactly what is highlighted, no less. V will start line-wise visual mode, which selects by lines, and v will start character-wise visual mode.

Or perhaps what you are looking for is behavior like in Windows, when you select text and type replacement text, what you type only appears once? In that case, what you want is select mode. You can start that by typing gh or gH and using the arrow keys, or use the mouse to start select mode and extend the highlight. It looks like visual mode, but behaves differently.

For completion your way, what you want is the SuperTab continued extension: http://www.vim.org/scripts/script.php?script_id=1643

From its vim.org page: "Supertab aims to provide tab completion to satisfy all your insert completion needs." This version of it is a fork/extension of the original vim extension by another author. You can also supply your own functions to customize how it does completion.


:wq]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>429</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1324747873</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1324747873.7479";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>428</wp:comment_id>
    <wp:comment_author><![CDATA[Scott]]></wp:comment_author>
    <wp:comment_author_email>sbicknel@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>67.183.198.170</wp:comment_author_IP>
    <wp:comment_date>2011-12-21 20:37:06</wp:comment_date>
    <wp:comment_date_gmt>2011-12-21 20:37:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I forgot that wordpress removes angle brackets. That nmap command should have the word leader surrounded by angle brackets just before b.

:wq]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1324499827.2761";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1324499827</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>429</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>174.56.21.245</wp:comment_author_IP>
    <wp:comment_date>2011-12-24 14:45:06</wp:comment_date>
    <wp:comment_date_gmt>2011-12-24 14:45:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I'm not a fan of the way completion works.  Perhaps it can be configured to be better.  I would prefer something more like the readline completion from the command line. I start typing something, and it shows the completions.  I start typing more, and it narrows it down, etc.  If there is text after what I've typed that is common to all completions, it types that automatically. 

The control-p way doesn't work like this because once I type control-p, it enters the first completion, making it impossible to type more to narrow it down.

Another thing I'm not a fan of based on one of your suggestions: in visual block mode, you can't select past the last character in whatever line the cursor is in, making it impossibile to select rectangular regions of text in many cases, unless you add sufficient whitespace to the end of the last or first line (depending on what direction you select in).

Also, if I yank something from visual block mode, it's repasted *over* lines (if that makes sense). I suppose this could be useful in some cases, but I often (usually) don't want it.  Any way to disable that?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>427</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1324737908</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1324737909.3271";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>431</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>174.56.21.245</wp:comment_author_IP>
    <wp:comment_date>2011-12-24 18:29:08</wp:comment_date>
    <wp:comment_date_gmt>2011-12-24 18:29:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[virtualedit=block is what I wanted.  Thanks.  

I don't care about over typing text. I can just press c before I start typing if I want to do that.

Supertab lets you use the tab key, which is cool (I'm not sure yet if I like it), but it doesn't change the behavior of the completion, which is what annoys me.  I want the completion to only actually text that is common to all completions, unless I specifically choose a particular completion to use.  

The way it works now, I have to know ahead of time what all the completions look like, so that I can type just the right amount of text to get it.  Otherwise, by the time I C-p to the one I want, I could have just typed the name of the variable already.

Also, these seem to suffer from a lack of caching.  Every time I press tab (or C-p), it rescans the whole directory for new completions.  It should just do this once, and remember it.  The way it is now, it is too slow.

I'm not blaming you for these problems by the way (unless you are the one who wrote the code).  I'm just pointing out the deficiencies in the hopes that there are work-arounds.  I also look forward to seeing how emacs handles all of this.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>430</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1324751349</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1324751350.4559";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>426</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>174.56.21.245</wp:comment_author_IP>
    <wp:comment_date>2011-12-21 16:23:46</wp:comment_date>
    <wp:comment_date_gmt>2011-12-21 16:23:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I just noticed a bug in my taglist edit, which I've fixed at https://github.com/asmeurer/dotfiles/commit/41e34cd9dd331442b7a5fbf83cc1d3aceef887fc.  Apparently g: is needed to reference a global variable.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>425</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:14:"1324484628.707";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1324484627</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>427</wp:comment_id>
    <wp:comment_author><![CDATA[Scott]]></wp:comment_author>
    <wp:comment_author_email>sbicknel@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>67.183.198.170</wp:comment_author_IP>
    <wp:comment_date>2011-12-21 20:34:10</wp:comment_date>
    <wp:comment_date_gmt>2011-12-21 20:34:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[control-n and control-p cycle through the next and previous matches in the list. You can read more about it by typing :help i_ctrl-p in Vim. That help file also has information about all commands you can use in insert mode, not just about the completion system.

The leader character is used mostly by plug-ins to assign keys to commands, or by users to create custom mappings for commonly-used Vim commands. It is there mostly to prevent problems with plug-in authors and users remapping Vim built-in commands. For the same reason, user-created ex commands must start with an upper-case letter. Lower-case commands are reserved for internal Vim use. For example:

nmap b :buffers:b

This displays a list of open buffers and leaves you at a prompt for a buffer number to switch to when you type the leader character followed by b. By using  instead of an explicit \ or , in the map command, the user can change the leader character without messing up custom mappings. Type :help leader in Vim to read more about it. Key maps are distinct from macros, which are used for on-the-fly automation. Macros are created with keystroke recording and stored in registers. They can be edited by pasting them into a buffer, editing like any other text and then yanking them back to the same register. You can read more about macros by typing :help q in Vim.

I could go on and on, but that would spoil all your fun. Suffice to say that Vim can do whatever you need it to. It either already has what you want built-in or there is a plug-in that does it. Only Emacs can match it feature-for-feature. No other editors can compete with these two.

:wq]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1324499652.4759";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1324499651</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>425</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>174.56.21.245</wp:comment_author_IP>
    <wp:comment_date>2011-12-21 16:04:26</wp:comment_date>
    <wp:comment_date_gmt>2011-12-21 16:04:26</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Wow.  Thanks for all the tips.

I installed the CamelCase plugin. For some reason, it maps ,w to move between CamelCase, instead of just remapping w (I guess it just wants to be cautious, but that's useless, and we already have WORDs, so what's the point?).  But, once again, the vim language is easy enough to understand that it took me half a minute to fix it.  

I added your tab stuff to my .vimrc, and it seems to have fixed the problem.

The completion is cool. I opened a SymPy file and started typing something and then CTRL-p, and it scanned *all* the SymPy files for completions.  And then when I deleted some characters from the word, it remembered that I had completed it, and started searching again.  Are there better keys to move around the completions than the arrow keys, though? I would look it up in the help, but I don't know how to search the help for a CTRL command.

I don't get the point of the mapleader tip.  From what I can tell from the docs, it changes the semantics of the map command.  But this doesn't seem to be something that I will be using all the time.  Anyway, \ isn't too hard to type on my keyboard (it's right above RETURN).  Maybe it's *really* hard to type on your keyboard?  Or am I just missing the point here?

pathogen seems a bit excessive at this point, but I'll definitely remember it if things start to get unwieldy. 

Thanks for the tip about the tagslist plugin.  I've set \ to open that, as it that key is surprisingly unused, and I suspect I will be using it a lot.  

And once again, I found myself modifying the plugin to make it better. I added the Tlist_Nospell option, which lets you disable spell checking in the taglist (because I have set spell in my .vimrc, but don't care about spelling in the taglist).  If you are good a vim programming, you might check that I did it right.  My change is at https://github.com/asmeurer/dotfiles/commit/dc5ac5b4f6ea922be6c050193e549bcc28cff37b. And if you think it's good, I probably should submit it upstream...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>424</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1324483466</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1324483466.8708";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>424</wp:comment_id>
    <wp:comment_author><![CDATA[Scott]]></wp:comment_author>
    <wp:comment_author_email>sbicknel@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>67.183.198.170</wp:comment_author_IP>
    <wp:comment_date>2011-12-21 14:47:45</wp:comment_date>
    <wp:comment_date_gmt>2011-12-21 14:47:45</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[These two URL's will help with camelCase. The first is a Vim tips page with settings that can be used to help and the second is a Vim plug-in that does it all for you.

http://vim.wikia.com/wiki/Moving_through_camel_case_words
http://www.vim.org/scripts/script.php?script_id=1905

The taglist plug-in will help you browse functions. It works with exuberant ctags, so you need that installed for it to work correctly.

http://www.vim.org/scripts/script.php?script_id=273

These are my tab and indent settings. You can look these up in the documentation, but the two that work together to keep things consistent IIRC are shiftwidth and softtabstop.

" set tab and indent options
set shiftwidth=4
set softtabstop=4
set smartindent
set autoindent

You should probably reverse the order of:
t_Co and
colorscheme

in your .vimrc to ensure that colors are applied correctly.

Some other tips you may find useful if you don't already know about them:

You can use autocomplete to help you write code. While in insert mode, start typing a variable or function name. Then press control-p, and Vim will fill in the remainder of the name. It must have already been used in your file for it to work.

Visual block mode. Press control-v in command mode. You can use movement commands to create a rectangular highlight. Then use the c command to change the text. Type a replacement string and hit the escape key. The replacement string will appear on every line covered by the highlight and replaces what was highlighted.

Insert mode is just another command. It can be given a numeric modifier. Whatever you type while in insert mode will be repeated when you escape to normal mode. For instance:
80i*escape will enter 80 *'s on a line.

Another useful remapping is changing Vim's leader character to , from \. Just put this into your .vimrc:

let mapleader = ","

The \ character is quite a reach on most keyboards, but the comma is easy to reach.

At some point, if you continue using Vim, you will find your .vimrc becoming very large. Mine is several hundred lines long. You might find it useful to split it between several files, one for each type of setting or by some other organizing principle. The source command will pull in content from other files. This is how I have mine arranged:

source $HOME/.vim/myconfig/options.vim
source $HOME/.vim/myconfig/variables.vim
source $HOME/.vim/myconfig/autocmds.vim
source $HOME/.vim/myconfig/functions.vim
source $HOME/.vim/myconfig/keymaps.vim
source $HOME/.vim/myconfig/abbreviations.vim

If you start using extensions to Vim, you may want to start with the pathogen plug-in. It makes it easy to install AND remove plug-ins. Otherwise, a plug-in's files end up scattered around your .vim folder.

http://www.vim.org/scripts/script.php?script_id=2332

You can browse this URL for more Python stuff related to Vim:

http://www.google.com/cse?cx=partner-pub-3005259998294962%3Abvyni59kjr1&amp;ie=ISO-8859-1&amp;q=pathogen&amp;sa=Search&amp;siteurl=www.vim.org%2Fscripts%2Fscript.php%3Fscript_id%3D1905#gsc.tab=0&amp;gsc.q=python

I hope this stuff helps.

:wq]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1324478899</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1324478899.6171";s:7:"message";s:47:"asmeurer changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1324478866.1166";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>423</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>174.56.21.245</wp:comment_author_IP>
    <wp:comment_date>2011-12-21 12:56:31</wp:comment_date>
    <wp:comment_date_gmt>2011-12-21 12:56:31</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for the suggestion about Caps Lock.  I will use http://pqrs.org/macosx/keyremap4macbook/extra.html to remap it.

Regarding daw, thanks for the tip.  The difference between that and dw is subtle, and I doubt I would have noticed it without your suggestion (the difference is that daw deletes the whole word regardless of where your cursor is, whereas dw deletes the rest of the word from where your cursor is).

I actually feel that I have gotten pretty good at most of the simple commands already, more than you are giving me credit for.  Remember that I've been using it cold turkey for the past several days, and I do a lot of text editing.  Please don't hesitate to answer my questions if you know the answers.  Those are things that I've already found problems with with my limited editing experience (they are not hypothetical, they are are real problems that I've encountered).

And take a look at my .vimrc and .vim/ directories that I linked to to see what I've already done as far as plugins.  I'll check out those colors you suggested, but I think today I am going to just buckle up and create my own scheme.  It's apparently very easy, and I've already found one that is pretty decent (the built-in slate), and I have in mind what I want (XCode's midnight).  By the way, do you know if it's possible to choose different colors for the text depending on if it's highlighted or not?  Right now, several things highlight text (spelling, searching, etc.), and the highlight color invariably conflicts with some text colors, making it impossible to read the text. I'd like to keep highlighting for some things (searching at least; I think underlining for spelling should be fine), but it's very difficult to pick colors that don't conflict with anything.  The same goes for highlighting in visual mode.

Regarding the cheat sheet, actually, the one I am using seems to be pretty good. If anything, it is too small, not too large, as I often have to look up the extra commands (like things proceeded with z, ], or :). I've got a pretty good memory (if I didn't, I think no command line editor would be fit for me).  

Regarding the length of the trial, perhaps.  The main reason I am making it so short is that I want to become moderately efficient at whichever one I end up using before my classes start again in January, where I will not have as much free time to go cold turkey on a new style of text editing.  I may end up giving the trial for each more time after two weeks with emacs.  It depends on where things stand at that point, if one is a clear winner or not.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>422</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1324472191.8474";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1324472191</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>494</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>129.138.36.166</wp:comment_author_IP>
    <wp:comment_date>2012-02-25 00:19:56</wp:comment_date>
    <wp:comment_date_gmt>2012-02-25 00:19:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Well, as you've probably discovered by now, I'm actually using emacs as my main editor.  But thanks for the tip anyway (hopefully others who come to this site will find it useful).

That still doesn't seem to do quite what I want, but it's closer.  I really like the behavior of the emacs extension auto-complete-mode (see the part 3 blog post).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>490</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1330129196</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1330129196.8512";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>436</wp:comment_id>
    <wp:comment_author><![CDATA[Vim vs. Emacs (Part 2) &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2012/01/03/vim-vs-emacs-part-2/</wp:comment_author_url>
    <wp:comment_author_IP>216.151.210.49</wp:comment_author_IP>
    <wp:comment_date>2012-01-03 07:30:42</wp:comment_date>
    <wp:comment_date_gmt>2012-01-03 07:30:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] I noted in part 1, I have decided to switch to a command line text editor. I decided that, to be fair, I would try [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1325575842</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1325575842.8911";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>422</wp:comment_id>
    <wp:comment_author><![CDATA[Scott]]></wp:comment_author>
    <wp:comment_author_email>sbicknel@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>67.183.198.170</wp:comment_author_IP>
    <wp:comment_date>2011-12-20 16:20:59</wp:comment_date>
    <wp:comment_date_gmt>2011-12-20 16:20:59</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The first thing you might consider, both for Vim and for Emacs, is keyboard key reassignment. For Emacs you will want to swap the control and caps lock keys, and for Vim you will want to swap the escape and caps lock keys. This will dramatically change how it feels to use these two editors. Being able to hit the escape key with the pinky of your your left hand without moving away from the home row in Vim allows you to touch type this key like any other. It is used so often in Vim that this is really a requirement for efficient editing. Doing so will virtually eliminate the issue you have with escaping to command mode to move around and delete words. By the way, when you want to delete a misspelled word, try the command daw (delete around word), diw (delete inner word). The first will delete the word and the white space around it. The second will leave the white space intact. Better still, use caw and ciw, for change around word and change inner word, which does the same thing, but leaves you in insert mode to type a word's replacement.

Secondly, memorizing all of these commands is daunting. There is one thing to know and one thing to do to overcome this problem. The thing to know is that Vim's commands are a mini-language of nouns, verbs and modifiers. Movement commands such as w, W, b, B, e, E and bigger ones like (, ), {, and } are nouns corresponding to text objects. Action commands like y, yy, Y, d, dd, D, c, cc, and C are verbs that act on nouns, and numbers are the modifiers that multiply either nouns or verbs any number of times. The way these commands are used is generally [modifier] verb [modifier] noun, without spaces, the modifiers being optional.

The thing to do is to make your own cheat sheet. Don't rely on someone else's. Inevitably the cheat sheet will be too large to be useful. Make your own and only put on it what you need to remember right now.

Often overlooked by new users: the Vim user manual. The documentation is split into two parts: a reference manual, which is encyclopedic, and a user guide, which is based on a published book and is a very good extended tutorial. To get to it, type :help usr_toc. Then use what you learned in the vimtutor to navigate it. It reads like a book and explains things in human terms.

I hesitate to go into more detail to answer some of your questions, because I feel you need to get some of the basics down beforehand. But there are Vim plug-ins that will give you what you want. The ctags plug-in will help a lot with finding function definitions, and there are additional plug-ins for working with Python.

Go to vim.org and explore. There is a wealth of information there, especially in the tips section. Also, two excellent color schemes are Zenburn and Darkburn. You can find both at that site. Drop them into ~/.vim/colors and place "colorscheme zenburn" (or darkburn) into your startup file to use them.

Two weeks is pushing it for a Vim trial, or even for an Emacs trial. You will find that Emacs is very easy to get started with, but will become harder to bend to your will later unless you are willing to learn its language. Vim is harder to start with initially, but becomes much easier after about a month, and its extension language and plug-in system are easier to use.

More information is available on-line, too. You can find a good medium length tutorial at http://www.swaroopch.com/notes/Vim/ and some good video tutorials at http://vimcasts.org/ and at http://www.derekwyatt.org/vim/vim-tutorial-videos/.

:wq]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1324434116</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1324398059.4093";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>432</wp:comment_id>
    <wp:comment_author><![CDATA[Scott]]></wp:comment_author>
    <wp:comment_author_email>sbicknel@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>67.183.198.170</wp:comment_author_IP>
    <wp:comment_date>2011-12-24 20:36:54</wp:comment_date>
    <wp:comment_date_gmt>2011-12-24 20:36:54</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I don't know the specifics of how the completion system works, but apparently, it was implemented with a focus on flexibility, trading caching and maybe other features for flexibility in implementation. Also, it is mostly just the infrastructure of the completion system that is in Vim. In other words, actual completion for various languages is left up to plug-in authors to implement, along with any caching. Caching may be available in specific completion plug-ins for specific languages. However, there is a plug-in that may mitigate some of the problem. I haven't tried it, and I don't really know if it is directly about solving this problem, but here is the URL: http://www.vim.org/scripts/script.php?script_id=2620

The page describing it is vague about its purpose, but the name seems to imply that it is about caching for the completion system.

I suspect that Emacs has a more robust completion system built-in. It's been around longer than Vim and it is a much more complete development environment. It is often accused of being a great operating system. If that is the case, it may work better for you. Personally, I haven't been able to get my head around its Lisp extension language and don't have the patience to tackle it.

:wq]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1324759014</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1324759015.2409";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>491</wp:comment_id>
    <wp:comment_author><![CDATA[Rich Cheng]]></wp:comment_author>
    <wp:comment_author_email>asmeurersympy@whileyouweregone.co.uk</wp:comment_author_email>
    <wp:comment_author_url>http://whileyouweregone.co.uk/</wp:comment_author_url>
    <wp:comment_author_IP>81.149.252.156</wp:comment_author_IP>
    <wp:comment_date>2012-02-24 15:52:17</wp:comment_date>
    <wp:comment_date_gmt>2012-02-24 15:52:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Pressing 'l' doesn't bring you to the beginning of the next line because you don't have 'l' in your setting for 'whichwrap'.

  :set whichwrap+=h,l

(but yes, if you find yourself using either 'h' or 'l' frequently, then you're probably not getting the most out of Vim's interface.)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1330098739</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1330098740.5272";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>454</wp:comment_id>
    <wp:comment_author><![CDATA[Vim vs. Emacs (Part 3) &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2012/01/13/vim-vs-emacs-part-3/</wp:comment_author_url>
    <wp:comment_author_IP>72.232.7.98</wp:comment_author_IP>
    <wp:comment_date>2012-01-13 23:01:46</wp:comment_date>
    <wp:comment_date_gmt>2012-01-13 23:01:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] parts 1 and [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1326495706</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1326495707.0791";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>490</wp:comment_id>
    <wp:comment_author><![CDATA[Rich Cheng]]></wp:comment_author>
    <wp:comment_author_email>asmeurersympy@whileyouweregone.co.uk</wp:comment_author_email>
    <wp:comment_author_url>http://whileyouweregone.co.uk/</wp:comment_author_url>
    <wp:comment_author_IP>81.149.252.156</wp:comment_author_IP>
    <wp:comment_date>2012-02-24 15:49:29</wp:comment_date>
    <wp:comment_date_gmt>2012-02-24 15:49:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Not 100% sure if I understand exactly how you want completion to work, but I think you're looking for something along the lines of:

  :set completeopt=menu,longest,preview]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>429</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1330098572</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:14:"1330098573.058";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>746</wp:comment_id>
    <wp:comment_author><![CDATA[Emacs: One year later &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2013/01/01/emacs-one-year-later/</wp:comment_author_url>
    <wp:comment_author_IP>66.135.48.190</wp:comment_author_IP>
    <wp:comment_date>2013-01-02 03:28:47</wp:comment_date>
    <wp:comment_date_gmt>2013-01-02 03:28:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] time using them to do true editing work. My experiences are chronicled in my blog posts (parts 1, 2, 3, and 7 months later follow [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1357097327</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1357097327.956244945526123046875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>833</wp:comment_id>
    <wp:comment_author><![CDATA[zïmcï ströll &#8211; VIm and International Workers Day]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://blog.zimci.com/2012/05/01/vim-and-international-workers-day/</wp:comment_author_url>
    <wp:comment_author_IP>212.72.165.66</wp:comment_author_IP>
    <wp:comment_date>2013-05-24 23:36:50</wp:comment_date>
    <wp:comment_date_gmt>2013-05-24 23:36:50</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] reasoning. A couple of weeks ago, while not being able to fall asleep, I ended up reading about the differences between editors emacs and vim. I really like to get informed about something before usage, and in accordance to my projected use [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1369438612.658586025238037109375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1369438611</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>2011 in review</title>
  <link>http://asmeurersympy.wordpress.com/2012/01/01/2011-in-review/</link>
  <pubDate>Sun, 01 Jan 2012 00:00:49 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1068</guid>
  <description/>
  <content:encoded><![CDATA[	<p>The WordPress.com stats helper monkeys prepared a 2011 annual report for this blog.</p>
	<div style="background:url('/wp-content/mu-plugins/annual-reports/img/emailteaser.jpg') no-repeat center center;height:300px;"></div>
	<p>Here's an excerpt:</p>
	
	<blockquote>The concert hall at the Syndey Opera House holds 2,700 people.  This blog was viewed about <strong>11,000</strong> times in 2011.  If it were a concert at Sydney Opera House, it would take about 4 sold-out performances for that many people to see it.</blockquote>
	<p><a href="/2011/annual-report/">Click here to see the complete report.</a></p>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1068</wp:post_id>
  <wp:post_date>2012-01-01 00:00:49</wp:post_date>
  <wp:post_date_gmt>2012-01-01 00:00:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>2011-in-review</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>wpcom_recap</wp:meta_key>
    <wp:meta_value><![CDATA[2011]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Vim vs. Emacs (Part 2)</title>
  <link>http://asmeurersympy.wordpress.com/2012/01/03/vim-vs-emacs-part-2/</link>
  <pubDate>Tue, 03 Jan 2012 07:30:37 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1070</guid>
  <description/>
  <content:encoded><![CDATA[As I noted in <a href="http://asmeurersympy.wordpress.com/2011/12/20/vim-vs-emacs-part-1/">part 1</a>, I have decided to switch to a command line text editor.  I decided that, to be fair, I would try both vim and emacs.  And to force myself to learn them, I decided to use them cold-turkey.  

Since I'm going cold-turkey, I am doing this over my break from classes, so that I can weed out any difficulties during a period when I can live with slow text editing if necessary.  This is a one month break.  I have reached (roughly) the half way point.  For the first half, I used nothing but vim to edit text.  Now, I will use nothing but emacs.

Now that I've stopped using vim (for now anyway), my view of it isn't much different from what I wrote in the first part.  A lot of things there were addressed by commenters (or rather commenter).  I still feel that it's not an a method of text editing that fits my head.  My entire life, I've used text editors where typing inserts text, and various control characters do things like move around faster.  

Enter emacs. It does exactly this.  Also a ton more.

I've only been using emacs for two days, but here are my impressions so far:
 
	<li><strong>The tutorial is better.</strong>  When you start emacs, it tells you how to start the tutorial.  Just type <code>C-h t</code> (if you don't already know, in emacs <code>C-</code> means <code>CTRL-</code> and <code>M-</code> means <code>ALT-</code>).  Like I said last time, the very first thing you learn is how to scroll by more than one line at a time.  That turns out to be a very useful thing to do.  Also, the emacs tutorial did a better job of explaining how to use multiple files at once in emacs, which is something that I still don't really know how to do very well in vim.

I have to give the vim tutorial some credit for one thing, though.  It has better interactive examples.  For example, in the vim tutorial, you have stuff like 

[code]
  1. Move the cursor to the second line in the phrase below.
  2. Type  dd  to delete the line.
  3. Now move to the fourth line.
  4. Type   2dd   to delete two lines.

---&gt;  1)  Roses are red,
---&gt;  2)  Mud is fun,
---&gt;  3)  Violets are blue,
---&gt;  4)  I have a car,
---&gt;  5)  Clocks tell time,
---&gt;  6)  Sugar is sweet
---&gt;  7)  And so are you.
[/code]

whereas in the emacs tutorial, you just have

[code]
&gt;&gt; Kill a line, move around, kill another line.
   Then do C-y to get back the second killed line.
   Then do M-y and it will be replaced by the first killed line.
   Do more M-y's and see what you get.  Keep doing them until
   the second kill line comes back, and then a few more.
   If you like, you can try giving M-y positive and negative
   arguments.
[/code]

which is a little more vague.  So I have to give vim credit for that.  </li>

	<li><strong>Everything's a buffer.</strong> This line from the emacs tutorial really stuck with me: "ANY text you see in an Emacs window is always part of some buffer."  Emacs has really a awesome editing model, even simple things like <code>M-f</code> and <code>M-b</code> to move around words at a time, or <code>M-DEL</code> to delete whole words make things <strong>way</strong> faster.  Vim of course has all of these too, albiet in a different way, but they aren't everywhere.  In emacs, everything is a buffer, which just means that everything supports all the standard emacs commands.  So if you type <code>M-x</code> (roughly the equivalent of vim's <code>:</code>) and start typing a command, you can move around and edit your command with emacs commands.  One of the things that bothered me about vim was that when I was typing something with <code>:</code>, I couldn't use vim's text moving/modifying commands to manipulate the text.  Typing ESC just canceled the command.  

Exceptions: There are at least two exceptions I've found to this rule.  First, if you do a search with <code>C-s</code> or <code>C-r</code>, no control commands work.  If you type a search string, and then type <code>M-DEL</code> to try to delete the last word in your search string, you will instead delete the word where the cursor is!  The solution I think is to use something like <code>M-x re-builder</code> instead.  This was a little slow in my tests.

Second, the emacs manual is presented in the <code>info</code> program, which uses completely different key commands from every other program.  This irked me quite a bit, because as soon as I finished the emacs tutorial, it pointed me to the manual, which was in <code>info</code>.  Then, the first thing in <code>info</code> is a tutorial on how to use <code>info</code>!  I opted to skip this.  If I need any information on emacs, I'll just do a Google search anyway, so I found this to be a waste of time.</li>

	<li><strong>It's a little slower.</strong> I do notice a speed difference between emacs and vim.  vim is much more lightweight, and it shows.  Starting up emacs takes a second or two.  Also, since a lot of the features are more interactive, they suffer from a speed delay.  It's not nearly slow enough to be a serious issue, though, and it's still way faster than the GUI program I was using before (start up time).

The emacs tutorial suggests using <code>C-z</code> whenever you want to only temporarily close emacs.  This seems like a good idea, and has worked pretty well for me so far (though I still usually close the whole thing with <code>C-x C-c</code> out of habit).

On a related note, I noticed that doing type-ahead while waiting for emacs to start up didn't always work, whereas it always worked in vim (I do this, e.g., when waiting for the editor to start up when writing commit messages).</li>

	<li><strong>It's way more user-friendly.</strong> Note that this is of course a relative term.  I mean more user-friendly than vim, and pretty user-friendly for a command line program.  Obviously, the most user-friendly text editors are the GUI ones used by the majority of the population (for that very reason).  Actually, both vim and emacs are user-unfriendly in that if you accidentally open them and don't know what they are or how to use them, you have no idea how to close them.  But even <code>less</code> (i.e., <code>man</code>) is technically like this.

I'm not even referring to the different editing "modes" of the two editors, though you could easily argue that emacs style editing is more user-friendly than vim style editing. What I mean here is that emacs interaction is nice. When you type <code>:</code> in vim, start typing a command, and type <code>TAB</code>, it enters the first completion, regardless if it's unique.  Pressing <code>TAB</code> multiple times give the rest.  In emacs, if you type <code>M-x</code> and start typing a command and type <code>TAB</code>, it pops up a temporary window with the list of all completions.  It even colors the next character, so you can easily see what to type next to get what you want.  As soon as you enter the command, the window disappears. (yes, I know about <code>CTRL-D</code> in vim, but to me tab completion should <em>always</em> work like it does in bash: complete characters if and only if they are unique in the list of completions)

By the way, when I said everything's a buffer, I mean everything.  If you want, you can exit the <code>M-x</code> entry (type <code>C-g</code>), type <code>C-x C-b</code> to show the list of buffers, <code>C-x o</code> to switch to it, scroll down to "Completions", press Enter, and actually get in the completion list, as a buffer (there's probably a less complicated way to get to it, by the way).  You can then do whatever your heart fancies with it (save it to a file, copy it, whatever).</li>

	<li><strong>Customization is harder.</strong> This was expected, since I already knew that emacs used lisp.  vim uses a language that is really easy to understand.  I was able to modify all the vim plugins I installed very easily.  If you want to change a setting globally in vim, just Google it and add one line to your .vimrc.   In emacs, everything is in Emacs Lisp.  I suppose prior experience with Lisp would probably help here.  

In the vim tutorial, near the end, it told how to create a .vimrc file, and even gave a very useful sample one as a starter.  In emacs, it took me a while to figure out how to do the equivalent (it took me a few Google searches just to figure out that the name of the configuration file in emacs is .emacs).  

Actually, the emacs equivalent is way better than in vim, but it isn't really mentioned anywhere. It took me probably a dozen Google searches before I learned about it (granted, I was looking for things in the same way I did for vim, lines to add to .emacs). What you have to do is type <code>M-x configure</code>.  This opens what is basically a huge preferences dialog for emacs.  You can then go through and set just about every settable emacs setting from there.  The interface is very nice, as it's interactive and tells you all about each setting.  And you never have to touch Lisp.  I'm still going through it, so I can't comment more on it yet.  But I recommend doing <code>M-x configure</code> as soon as you have finished the tutorial and have gotten used to editing with emacs, as you are invariably going to want to change some things (though I should note that emacs generally has nicer defaults than vim).</li>


	<li><strong>Better text editing methodology?</strong> Like I've already mentioned a bunch of times, the emacs editing model seems to fit my head better than the vim model.  In emacs, you type text, and it inserts the text.  If you want to do some advanced modification or move around, you type a control sequence.  In vim, you type characters, and it does modifications or moves around.  If you want to type text, you type <code>i</code> (or one of a few other characters) and type it.  Then, if you want to move around or modify the text, you have to press <code>ESC</code>.  This so-called "modular editing" doesn't seem to work for me.  For one thing, I like to rapidly switch back and forth between these two "modes" (editing and inserting) when I write things.  I type too fast and write something wrong, and have to delete some stuff. The <code>M-DEL</code> emacs command is probably my most used (this also works in Mac OS X text dialogs, so I'm used to it already).  In vim, there is <code>CTRL-w</code> and a few others, but if I want to do something more advanced, like rearranging a sentence, then half of my key presses would be <code>ESC</code> or <code>i</code>, i.e., just moving between the modes.  In emacs, I can always have my pinky by Control and Alt (especially as soon as I remap CAPS-LOCK to Control).  

Also, it really irks me how in vim, if you are at the end of a line and press <code>l</code> (or right-arrow), instead of moving to the beginning of the next line, it beeps!  In emacs, if you are at the end of a the line and type <code>C-f</code>, it moves to the beginning of the next line (actually, it technically moves just beyond the line, in case you want to append, which is another annoying thing about vim: you have to use <code>A</code>, not <code>i</code>,  to add text to the end of a line). </li>

Well, that's it for now.  I will hold off on the questions until after I go through all the customizations, as it seems that, unlike vim, emacs has many things already built-in (but we already knew that, didn't we :).  So I have just one question for readers: does anyone know of a really good emacs cheatsheet?  The <a href="http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html">one I used for vim</a> was really awesome, but I haven't found anything equal for emacs.  I find myself searching the tutorial whenever I forget something, which is not very efficient, so I would appreciate something better. Otherwise, I'll just find something decent and print it out, as it would be better than nothing.

And if anyone cares, you can see what I've got for my .emacs file so far at <a href="https://github.com/asmeurer/dotfiles/blob/master/.emacs">https://github.com/asmeurer/dotfiles/blob/master/.emacs</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1070</wp:post_id>
  <wp:post_date>2012-01-03 07:30:37</wp:post_date>
  <wp:post_date_gmt>2012-01-03 07:30:37</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>vim-vs-emacs-part-2</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_oembed_d05a889e263a90eed803cc945f4914aa</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b30ce85f699ab3e9ac7b9f201ecb1989</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>437</wp:comment_id>
    <wp:comment_author><![CDATA[Scott]]></wp:comment_author>
    <wp:comment_author_email>sbicknel@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>67.183.198.170</wp:comment_author_IP>
    <wp:comment_date>2012-01-03 08:52:45</wp:comment_date>
    <wp:comment_date_gmt>2012-01-03 08:52:45</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The FSF publishes a reference card for Emacs as a postscript file: http://static.fsf.org/nosvn/emacs-21.4-refcard-en.ps

It's a little dated, considering it is for version 21. But the basics should work. Perhaps an Emacs user can point you to a more up-to-date version.

:wq]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1325580766</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1325580767.0345";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>446</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>174.56.21.245</wp:comment_author_IP>
    <wp:comment_date>2012-01-10 15:07:10</wp:comment_date>
    <wp:comment_date_gmt>2012-01-10 15:07:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Yeah, that's what I was doing from the start :)

I actually have had to always use -nw ever since I compiled and started using the git version of emacs, as otherwise it just hangs (my X11 is broken).  And the Cocoa GUIs suck by the way.

It's not super slow. It takes maybe two or three seconds to start.  But that's still annoying, especially when type-ahead doesn't work reliably.

I think part of the problem is the VC module.  Or at least that's what it says it's loading.  I'll see if there's a way to disable it.  Also, I think I might be able to make $EDITOR at least faster by adding -q (I just use $EDITOR for writing commit messages).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>442</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1326208031</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1326208032.3808";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>492</wp:comment_id>
    <wp:comment_author><![CDATA[Rich Cheng]]></wp:comment_author>
    <wp:comment_author_email>asmeurersympy@whileyouweregone.co.uk</wp:comment_author_email>
    <wp:comment_author_url>http://whileyouweregone.co.uk/</wp:comment_author_url>
    <wp:comment_author_IP>81.149.252.156</wp:comment_author_IP>
    <wp:comment_date>2012-02-24 16:06:15</wp:comment_date>
    <wp:comment_date_gmt>2012-02-24 16:06:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Not really expecting to convince you to try Vim again--it sounds as though emacs is just a better fit for you, but just for posterity and other readers:

1). You can edit the current contents of the command line by pressing ctrl-f to open the command window. See :help cmdwin.

2). Use the 'wildmenu' and 'wildmode' settings to configure how completion works on the command line. See :help wildmenu

3). Use the 'whichwrap' setting to specify whether or not you want various commands (including 'h' and 'l' to wrap over lines).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1330099576.1275";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1330099576</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>442</wp:comment_id>
    <wp:comment_author><![CDATA[saptman]]></wp:comment_author>
    <wp:comment_author_email>sapta.iitkgp@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://gravatar.com/saptman</wp:comment_author_url>
    <wp:comment_author_IP>116.15.182.144</wp:comment_author_IP>
    <wp:comment_date>2012-01-09 16:09:33</wp:comment_date>
    <wp:comment_date_gmt>2012-01-09 16:09:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Regarding speed, you might want to consider starting emacs with the -nw option. This loads it up within the terminal itself.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1326125373</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1326125373.3072";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>443</wp:comment_id>
    <wp:comment_author><![CDATA[nobeep]]></wp:comment_author>
    <wp:comment_author_email>foo@bar.com</wp:comment_author_email>
    <wp:comment_author_url>http://gravatar.com/kuhlmann</wp:comment_author_url>
    <wp:comment_author_IP>152.1.118.170</wp:comment_author_IP>
    <wp:comment_date>2012-01-09 17:42:13</wp:comment_date>
    <wp:comment_date_gmt>2012-01-09 17:42:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[For some reason vim doesn't beep for me.  If it beeped then I would figure out a way to turn it off or I would switch to emacs.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1326130946</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1326130972.9721";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>447</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>174.56.21.245</wp:comment_author_IP>
    <wp:comment_date>2012-01-10 15:11:16</wp:comment_date>
    <wp:comment_date_gmt>2012-01-10 15:11:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You may have beeps disabled in your terminal, or else it doesn't support them.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>443</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1326208277</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1326208278.7403";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>450</wp:comment_id>
    <wp:comment_author><![CDATA[saptman]]></wp:comment_author>
    <wp:comment_author_email>sapta.iitkgp@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://gravatar.com/saptman</wp:comment_author_url>
    <wp:comment_author_IP>220.255.2.65</wp:comment_author_IP>
    <wp:comment_date>2012-01-11 14:09:41</wp:comment_date>
    <wp:comment_date_gmt>2012-01-11 14:09:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Oh btw, while you spend (waste? don't worry, every serious emacs user does it ;) time configuring your .emacs, you might also want to take a look at magit which allows you to manipulate git repos right off your buffer. You could even install rope and get some cursory auto complete, although I find M - / quite adequate. Install mpdee while you are at it and use erc to chat. Frankly, I see no reason why you should have to spend any time outside emacs :D]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>446</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1326290982</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1326290983.7502";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>451</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>174.254.20.102</wp:comment_author_IP>
    <wp:comment_date>2012-01-11 18:12:49</wp:comment_date>
    <wp:comment_date_gmt>2012-01-11 18:12:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I writing up a new post about some of this. 

What is mpdee? A typo maybe? I didn't find anything about it.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>450</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1326305570</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1326305570.7496";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>455</wp:comment_id>
    <wp:comment_author><![CDATA[Vim vs. Emacs (Part 3) &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2012/01/13/vim-vs-emacs-part-3/</wp:comment_author_url>
    <wp:comment_author_IP>72.232.7.98</wp:comment_author_IP>
    <wp:comment_date>2012-01-13 23:01:49</wp:comment_date>
    <wp:comment_date_gmt>2012-01-13 23:01:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] See parts 1 and 2. [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1326495709</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:14:"1326495709.175";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>747</wp:comment_id>
    <wp:comment_author><![CDATA[Emacs: One year later &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2013/01/01/emacs-one-year-later/</wp:comment_author_url>
    <wp:comment_author_IP>66.135.48.190</wp:comment_author_IP>
    <wp:comment_date>2013-01-02 03:28:50</wp:comment_date>
    <wp:comment_date_gmt>2013-01-02 03:28:50</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] time using them to do true editing work. My experiences are chronicled in my blog posts (parts 1, 2, 3, and 7 months later follow [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1357097330</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1357097330.115581035614013671875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Vim vs. Emacs (Part 3)</title>
  <link>http://asmeurersympy.wordpress.com/2012/01/13/vim-vs-emacs-part-3/</link>
  <pubDate>Fri, 13 Jan 2012 23:01:39 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1077</guid>
  <description/>
  <content:encoded><![CDATA[See parts <a href="http://asmeurersympy.wordpress.com/2011/12/20/vim-vs-emacs-part-1/">1</a> and <a href="http://asmeurersympy.wordpress.com/2012/01/03/vim-vs-emacs-part-2/">2</a>.

Some more comments after using emacs for a while:

	<li>I finally found the perfect tab completion solution. It took way too much searching for how awesome it is.  It's called <a href="http://cx4a.org/software/auto-complete/manual.html">auto-complete-mode</a>.  The best way to get an idea of what this is is to watch <a href="http://www.youtube.com/watch?v=rGVVnDxwJYE">this screencast</a>.  Basically, it shows you a completion list automatically.  It uses the <em>TAB</em> key to do completion (to me, this is a no brainer, but for some reason, no other completion extension that I found did this, requiring you to do all kinds of nonsense in your .emacs file).  It's got cool features like simple fuzzy matching and intelligent matching (so the first completion is what you tend to use, instead of just the first one that matches).  To quote the author, "a goal of auto-complete-mode is to provide a system that does what users want without any command." I couldn't agree with that goal more. If you install it, I recommend adding <code>(define-key ac-mode-map (kbd "M-TAB") 'auto-complete)</code> to your .emacs, so that you can use M-TAB to force the completion menu to come up.  This generally happens automatically, but I think this is the only way to get fuzzy matching, for example. Actually, you can also just use <code>(ac-set-trigger-key "TAB")</code>, which intelligently sets TAB to complete or indent, based on which one you more likely want.  This seems to work pretty well to me.</li>

	<li>Speaking of indenting, emacs has a pretty nice indentation feature for Python.  You just press <code>TAB</code> repeatedly, and it cycles through all the syntactically legal indentations.  I find this to be more useful than the usual <code>TAB</code> indents behavior of most editors. Note that by default, it won't automatically indent, even with trivial indentations (i.e., keeping the previous indentation).  This is easy to fix, though.  Just add <code>(define-key global-map (kbd "RET") 'newline-and-indent)</code> to your .emacs file.  This will make <code>RET</code> do the same thing as <code>C-j</code>, i.e., basically the equivalent of <code>RET TAB</code>.</li>

	<li>emacs comes with an extension that lets you work with version control systems, called VC.  I don't use it.  I don't like stuff messing with my git stuff behind my back (sounds like a good way to lose data to me), and I'm good enough with git commands straight that I don't need the help. 

But unlike all the other hundreds of emacs features that I don't use, this one was seriously slowing down my workflow.  It adds three or four seconds to the startup time of emacs when loading from within a git repository.  So I did some Googling and added this to my .emacs file:

[code]
;; Disable all the version control stuff         
;; Makes emacs load much faster inside git repos 

(setq vc-handled-backends nil)
[/code]

(<em>unrelated: Why doesn't WordPress support lisp as a language for syntax highlighting?</em>)

This disables the version control stuff, making emacs load fast again (virtually as fast as vim, actually).
</li>

	<li>Speaking of making emacs go faster, make sure you compile all your extensions into byte code.  For whatever reason, emacs doesn't do this automatically, even though compiled files run much faster, and it doesn't take very long.  The easiest way is to use <code>M-x byte-compile-file</code> from within emacs.  Just make sure that if you modify the .el file that you recompile the byte code, or it will continue to use the old version.</li>


	<li>I finally figured out how to enable mouse support.  For whatever reason, Googling got me nowhere with this, so I ended up asking on the <a href="https://lists.gnu.org/mailman/listinfo/help-gnu-emacs">help-gnu-emacs</a> list, which was very helpful.  The solution is to put

[code]
;; ===== Enable mouse support ====
                                      
(require 'xt-mouse)                   
(xterm-mouse-mode)
[/code]

in your .emacs file.  And then it just works.  It needs some tweaking (e.g., it doesn't play so well with momentum scrolling), but at least it works. I thought I was going to hang myself without mouse support. Because frankly, as good as the movement commands are, moving with the mouse is so much easier sometimes (the same is true for vim too, btw).</li>

	<li>I compiled the git version of emacs (it's not very hard btw).  I did this to see if the mouse suport "bug" was fixed there, but I've gone ahead and kept using it, as it's nicer.  But I didn't figure out how to configure it to not load in an X window. So for now, I've aliased <code>emacs</code> to <code>emacs -nw</code>. I'm sure I just need to add some flag to <code>configure</code>, but I haven't gotten around to looking it up yet.</li>

	<li>I found out how to allow editing in the Isearch mode (again, thanks to the help-gnu-emacs list).  You need to install the <a href="https://github.com/asmeurer/dotfiles/blob/master/.emacs.d/lisp/isearch%2B.el">isearch+</a> extension, add the following to your .emacs,

[code]
;; ===== isearch+ =====         

(require 'isearch+)
[/code]

and most importantly, you need to edit the file and uncomment all the commmands you want to allow.  If you follow my link above, it goes to my personal dotfiles repo, where I've already done that.</li>

	<li>On a related note, this is the first of several emacs extensions I've installed that I've edited the extension file itself for.  The rest, I just had to add some code to .emacs.  In most cases, there was already a variable or suggested code snippet to add to .emacs to get what I wanted.  

On the other hand, with vim, I had to edit virtually every extension I installed to make it do what I want.  I'm not sure what this means, though.  It could be a statement about one of many things: how the emacs community provides nicer defaults, how the vim language is easier to use, and hence more inviting for me to edit the files, or how I haven't gotten around to messing with certain things yet.</li>

	<li>If you do a lot of work with LaTeX, check out <a href="http://www.gnu.org/software/auctex/">AUCTeX</a>. I haven't used it enough yet to say much about it, but from what I've played around with, it's pretty awesome.  And if you use a windowed version of emacs, it's got a really awesome preview mode.</li>

	<li>If you're bored, check out the <a href="http://www.dr-qubit.org/predictive/predictive-user-manual/html/index.php">predictive</a> extension.  It's actually not as helpful as you'd think (unlike the very similar auto-complete-mode module mentioned above).  But it's kind of cool to turn on and play around with when you're typing something.  Maybe you'll learn new words or something.</li>

	<li>I could go on and on.  I haven't mentioned the most basic customizations (like how to setup four-space tabs).  If you are starting to use emacs, I recommend going through <code>M-x customize</code>, and reading my <a href="https://github.com/asmeurer/dotfiles/blob/master/.emacs"><code>.emacs</code></a> file.  And my best advice: if you want emacs to do something, first do <code>M-x customize</code> and search for what you want (EDIT: apparently searching customize requires emacs 24, i.e., the development version).  If you don't find what you want there (and you will surprisingly often), search Google.  There are so many emacs users, that the chances of someone else wanting what you want are very likely. I've found the results from the <a href="http://www.emacswiki.org/">emacs wiki</a> to be particularly helpful. And one more thing: if you find an extension you like, double check first to see if it's not already included in emacs. Emacs seems to like including good extensions in future releases, so an older extension has a good chance of already being included.</li>

Some emacs questions:

	<li>I tried <code>(define-abbrev global-abbrev-table "Ondrej" "Ondřej")</code>, so that when I type Ondrej it give me Ondřej.  But it doesn't work.  Is this a bug or what? If I do <code>(define-abbrev global-abbrev-table "foo" "bar")</code> and type "foo", it turns into "bar", but the above leaves Ondrej alone. <em>EDIT: I guess this was an emacs bug.  It doesn't seem to be there any more (perhaps it was fixed with the git version or something).</em></li>

	<li>Is there a way to reload .emacs without closing emacs? I'm doing that a lot these days. <em>EDIT: I found it. Do <code>M-x load-file RET ~/.emacs</code></em></li>

	<li>Is there a good emacs equivalent of the vim <a href="http://www.vim.org/scripts/script.php?script_id=273">tag list plugin</a>  (thanks for commenter Scott for pointing me to that in the first place)?  I just want something that lists all the class and function definitions in a Python file in order, so I can easily jump to the one I want, or just get an overview of the file.  </li>

This Tuesday will mark the point where I will have spend as long using emacs as I did using vim. But already, I feel more competent with emacs.  I won't repeat what I said in my last post, but I just want to say that the ability to edit and write at the same time makes me way more productive.  The fact that it uses keyboard shortcuts that I'm already used to probably helps a lot too.  Even so, I've not used any kind of cheat sheet for emacs (since I never really found any that were any good), and yet I feel like I've memorized more key commands now than I ever did with vim, for which I did use a <a href="http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html">cheat sheet</a>.  

So I really don't see myself going back to vim at this point.

I'm actually surprised.  Virtually everyone I know who uses a command line editor uses vim.  It's definitely the more popular of the two.  But having tried both, I can only speculate as to why.  Vim has a much higher learning curve than emacs.  Everybody grows up learning how to write text in editors like Microsoft Word, TextEdit, Notepad, etc., that all work fundamentally like emacs: if you type text, it enters the text.  If you want to do advanced editing with the keyboard, you hold down some meta keys and type chorded keyboard shortcuts.  The vim modal editing methodology is so different from this, that it surprises me that so many people go to the trouble of learning it (I mean, to the point that they are more efficient with it).  I can see the benefit over GUI editors, which have nothing on either vim or emacs with regards to customization, or just the plain editing power that is really necessary for coding. My guesses why people use vim:

	<li>They are shown vim first, so just use it.
</li>

	<li>They are turned off by the massiveness of emacs (it seems contradictory to me, since the whole point of using a command line editor is to get more power, but I could see it).
</li>

	<li>They are turned off by emacs lisp.
</li>

	<li>Some combination of those.</li>


Maybe the vim users out there could comment why they use vim.  Am I missing something?  Or are your heads just wired differently from mine? And if you use emacs (or anything else), I'd love to hear from you too?

At any rate, I recommend that anyone who wants to give command line editors a chance do what I did: learn both vim and emacs.  My blog posts should be enough to give you some good advice.  I went cold-turkey, and I recommend that you do too, but only do it if you won't have any important editing to do for a few weeks, as your editing rate will slow down a lot as you are learning for both editors.  And even though I think I am going to stick with emacs, learning vim was still valuable.  Unlike emacs, vi is part of the POSIX standard, so it's included in pretty much every UNIX distribution.  I'll be glad when I find myself on a minimal command line and know how to use a decent text editor.  And anyway, you can't really know which one will be your way until you try them both.  I really thought I would end up using vim, as it was so popular among all the people I know who use command line editors. But I guess there is only <a href="http://www.dina.dk/~abraham/religion/">One True Editor</a>.

<strong>EDIT:</strong> I found out how to make emacs really fast.  The key is to run one process of emacs in daemon mode, and have the rest connect to that.  Then you only have to wait for the startup once (per computer session).  To do it, just set your <code>EDITOR</code> to <code>'emacsclient -a "" -nw'</code> (and you might also want to alias <code>emacs</code> to that as well).  What this does is connect to the emacs daemon.  The <code>-a ""</code> starts one if it isn't already started (you can also do this yourself with <code>emacs --daemon</code>.  If you only want to use the daemon version if you've specifically started it, replace <code>""</code> with <code>emacs</code>.  This will connect to the daemon if it's running, and otherwise just start a new emacs process.  

The <code>-nw</code> keeps it from running in window mode.  Remove this if you use the GUI version of emacs.  This is necessary to make it work correctly with multiple tabs.  This is so fast that you should never really even need to use <code>C-z</code> to quickly exit emacs.  <code>C-x C-c</code> is just fine, because reopening will be instantaneous.  I like this because I was starting to accumulate background emacs processes that I forgot about.

This probably requires a fairly new version of emacs, possibly even the development version.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1077</wp:post_id>
  <wp:post_date>2012-01-13 23:01:39</wp:post_date>
  <wp:post_date_gmt>2012-01-13 23:01:39</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>vim-vs-emacs-part-3</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:comment>
    <wp:comment_id>457</wp:comment_id>
    <wp:comment_author><![CDATA[no one]]></wp:comment_author>
    <wp:comment_author_email>no@no.no</wp:comment_author_email>
    <wp:comment_author_url>http://none.com</wp:comment_author_url>
    <wp:comment_author_IP>66.90.185.121</wp:comment_author_IP>
    <wp:comment_date>2012-01-14 19:25:58</wp:comment_date>
    <wp:comment_date_gmt>2012-01-14 19:25:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[next time you are really bored, check out artist mode, or psychiatrist]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1326569158</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1326569159.4488";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>458</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>174.56.21.245</wp:comment_author_IP>
    <wp:comment_date>2012-01-14 19:39:11</wp:comment_date>
    <wp:comment_date_gmt>2012-01-14 19:39:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks.  I knew about psychiatrist (see my first post in the series), but not artist mode. It seems that iTerm2 doesn't support click and drag, so all I can do is created dots.  I'll have to try it in the GUI version.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>457</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1326569951</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1326569951.8961";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>474</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>129.138.36.166</wp:comment_author_IP>
    <wp:comment_date>2012-02-03 21:50:49</wp:comment_date>
    <wp:comment_date_gmt>2012-02-03 21:50:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I think I agree with this. Surely not all user interfaces are equal. That's why so much care must be taken when designing them. But you can't bash other interfaces in and of themselves:  they are clearly designed for different audiences. Word is designed for people who not only cannot touch type, but cannot remember a single keyboard shortcut (if you've ever watched someone do a copy and paste entirely with the mouse, you know what I'm talking about). Word also attempts to fit the needs of more advanced audiences by allowing to set custom shortcuts in a very advanced way. If course, that editor is not even on consideration here, because it is not a code editor. 

One thing I like about emacs over vim is that it manages to combine a helpful interface on top of the "zen" one. For example, if you don't know the shortcut for a command, M-x command gives it to you. And the command names are verbose enough that you can often guess what they are. And if you run a command and there is a shortcut for it, it tells you in the echo area. This is how I learned about the M-= shortcut to do a word count. The emacs menu system also helps to learn new commands  In vim, the command names tend to be abbreviations that are hard to guess at, and I don't recall it telling me about shortcuts afterword (but I could be wrong about that). 

To answer the main question, I definitely find emacs shortcuts to be "zen-like". I find C-x C-s C-x C-c to be even faster to type than :wq (mostly because I don't have to worry about removing my finger from the Shift key at just the right moment). emacs helps with muscle memory by making C-letter and M-letter do similar things, so your fingers don't have to remember different locations on the keyboard.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>473</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1328305855</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1328305856.3347";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>493</wp:comment_id>
    <wp:comment_author><![CDATA[Rich Cheng]]></wp:comment_author>
    <wp:comment_author_email>asmeurersympy@whileyouweregone.co.uk</wp:comment_author_email>
    <wp:comment_author_url>http://whileyouweregone.co.uk/</wp:comment_author_url>
    <wp:comment_author_IP>81.149.252.156</wp:comment_author_IP>
    <wp:comment_date>2012-02-24 16:21:52</wp:comment_date>
    <wp:comment_date_gmt>2012-02-24 16:21:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[It's definitely this one: 5). Brain's wired differently.

I was about halfway through the vimtutor when I fell in love with Vim, and I've only grown more keen on it the longer I've used it.

To me, the modal interface makes editing text like a game; it is literally fun for me. Whereas you find it a pain to have to press Esc all the time. This guy hit's the nail on the head: http://robots.thoughtbot.com/post/13164810557/the-vim-learning-curve-is-a-myth]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1330100512.5426";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1330100512</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>465</wp:comment_id>
    <wp:comment_author><![CDATA[Scott]]></wp:comment_author>
    <wp:comment_author_email>sbicknel@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>67.183.198.170</wp:comment_author_IP>
    <wp:comment_date>2012-01-21 11:25:06</wp:comment_date>
    <wp:comment_date_gmt>2012-01-21 11:25:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I started with Vim in 2009, so I haven't been using it that long. Before that I had been using Kate in KDE for several years and Emacs before that. Prior to using Linux, I didn't have a real text editor at all (on Windows). On OS/2 I used the Enhanced Editor that came with Warp 3 and 4, and in DOS I used the DOS editor (edit.exe). 

I had tried Vim a couple of times over the years, but failed to understand it and quickly gave up on learning it. When I finally did learn it, it was because I was in need of an editor that would fit into any environment I happened to be using. At the time, KDE was undergoing major growing pains. I didn't want to rely on it while it was so unstable, so I started hopping from one desktop environment to another and was having different text editors thrown at me by default in each one, some better, or worse, than others. I decided I needed to take control of what text editor I used and chose to learn a text-mode editor. And why not? What does a text editor need fancy graphics for, anyway? (Well, it DOES make the fonts look better.)

I had put off learning Vim for a long time and decided to dive in head first. What I would say about learning it (and its tutorial agrees with me) is to not try to memorize commands. If you are approaching it that way, you're doing it wrong. Memorizing commands from cheat sheets is the wrong way to go about it. That's like trying to memorize how to ride a bicycle.

When I learned Morse code for my amateur radio license exam, it was the same way. If you try to memorize dots and dashes, you'll never get anywhere. You have to listen to the sounds and let your hand write down as letters, what your ear hears as patterns.

It is also like learning a foreign language. If you try to do it by translating what you hear into your native language in your head, you won't learn anything. What you need to develop is muscle memory that translates what you are thinking of doing to your text into finger movements on the keyboard. It's much more like touch-typing than anything else. And, indeed, it is suggested by several experts, Vim's author included, that you learn touch-typing prior to learning it.

Its command set is a mini-language of text objects and actions that can be combined in infinite ways through a consistent syntax. Once you understand that and learn a little muscle memory, learning new commands becomes easier and easier, until soon you find yourself typing Vim commands in inappropriate places, like inside of word processors or on web pages.

But why bother in the first place, when there are so many easier editors to use? That's a good question. It is one that many users have a difficult time articulating, and it has to do with efficiency and an almost Zen-like experience while using it. Some describe becoming one with the editor.

I believe it has to do with the way in which Vim encourages efficiency. Most user interfaces place their efficiency at the software end of the user interface, in menus and other devices for issuing commands, but give little thought to the physical actions required of the user to command the software. In a text editor one's hands are on the keyboard when typing text. But issuing commands almost always requires either moving the hands away from that position to press chords or to manipulate the mouse. It's a safe bet that you'll have to divert your eyes from the text on screen to do those things, too. It jars your concentration.

Vim's interface is designed with efficient physical motion in mind. Commands are typed just like text is: by touch-typing. It's commands can by typed without looking at the keyboard for this reason. Not needing to look away from the text helps keep you from losing your place while you run some command or other. Vim's user interface keeps your hands touch-typing and keeps your eyes on the screen. This promotes deeper concentration. Thus, the Zen-like experience reported by some users.

Another reason to learn it is that it enables actions on text that requires the addition of new commands or custom macros in other editors. If you wanted a command that deletes an arbitrary, but specific, number of paragraphs, many other editors would need a macro or additional commands. It wouldn't be possible in some editors at all. But in Vim there is no need for such a macro: 5d} does it five times, or 100d} does it a hundred times. If I don't like doing it that way, I can also do it like this d5} or d100}, depending on how I like to think. Remembering how to do it is not about memorizing dee five right-curly-brace. Its more like left index finger to the five key, left middle finger down, right pinky up to the right while pressing shift. It's a touch-typing memory thing, not a string of characters thing.

It's very difficult to articulate why Vim is worthwhile to learn, but it is near impossible to convince anyone if they insist on learning it through memorization from cheat sheets. Those efforts are almost guaranteed to fail with the result being someone who gave Vim a fair trial and decided it was not for them. The frustration I feel when someone does that drives me crazy, because it would all be so much easier for them if they would only take the advice that is given to them.

:wq]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1327145107</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1327145107.7278";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>475</wp:comment_id>
    <wp:comment_author><![CDATA[Scott]]></wp:comment_author>
    <wp:comment_author_email>sbicknel@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>67.183.198.170</wp:comment_author_IP>
    <wp:comment_date>2012-02-04 05:45:51</wp:comment_date>
    <wp:comment_date_gmt>2012-02-04 05:45:51</wp:comment_date_gmt>
    <wp:comment_content><![CDATA["In vim, the command names tend to be abbreviations that are hard to guess at"

The commands are hard for whom? That's what the help system is for and why it consists of two book-length references. Users who want to succeed just have to be willing to learn to use it.

"[Y]ou can’t bash other interfaces in and of themselves: they are clearly designed for different audiences."

I don't think I am. I was referring specifically to how mouse-based interfaces that use tool bars and pull-down menus do not promote a Zen-like experience and call attention to themselves. Word and PowerPoint were only examples of this type of interface. I could as easily have used code editors as examples. On my platform, the obvious choices would be Gedit and Kate. On Windows, Notepad++ is an obvious example. On OS X, Textmate comes to mind. There are more code editors that use this type of interface than code editors that don't. Check out the editor index at Text Editors Wiki http://texteditors.org/cgi-bin/wiki.pl?EditorIndex to see just how many there are. They may compensate for this in various ways, but that doesn't change my point. And just to be clear, I'm also not suggesting that these code editors cannot be used with the keyboard. What I'm saying is that the point-and-click portion of the interface does not promote concentration; Rather, it interrupts concentration.

I'm also not suggesting that mouse-based interfaces have no place or that they are wrong in some way. They are perfect for those that don't want to use the keyboard or remember commands. But I stand by the position that they do not promote good concentration and that they are less efficient when used with the mouse.

:wq]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>474</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1328334357.8773";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1328334357</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>473</wp:comment_id>
    <wp:comment_author><![CDATA[Scott]]></wp:comment_author>
    <wp:comment_author_email>sbicknel@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>67.183.198.170</wp:comment_author_IP>
    <wp:comment_date>2012-02-03 03:10:02</wp:comment_date>
    <wp:comment_date_gmt>2012-02-03 03:10:02</wp:comment_date_gmt>
    <wp:comment_content><![CDATA["Having read your response, I think that as Aaron mentions, this type of reflex is possible with anything physical. I’m assuming you aren’t suggesting that only vim commands allow one to be “Zen like” in their movements?"

I don't think the commands themselves enable a Zen-like experience; It is the ability to issue commands without diverting your eyes from the screen or having to move your hands from the keyboard that promotes the Zen-like experience, regardless of the command set.

Wordstar still has devoted users for the same reason. See "WordStar: A Writer's Word Processor" by Robert J. Sawyer at http://www.sfwriter.com/wordstar.htm for a similar explanation of this kind of experience from using that program. In particular he writes, "[T]ouch-typists find that using the WordStar control-key commands is much more efficient, because they can be typed from the home row without hunting for special keys elsewhere on the keyboard." This lets you maintain most of your concentration on the text. If Emacs enables that, then sure, this would apply to that editor, too.

I don't agree that any and all user interfaces promote this kind of experience. Some clearly do not. The less the software gets between you and concentrating on the text, the better. But as soon as the interface asks you to fully divert your attention from the text and give it to the program to perform some action, that Zen-like concentration is broken. Mouse-based interfaces using tool bars and pull-down menus fall into this category. They cannot be used without diverting your eyes from the text. A select few programs give top billing to the data; Most upstage it, calling attention to themselves as if they are more important than what you are working on. I'm thinking of programs like Microsoft Word or PowerPoint, though a large number of text editors are guilty of this. They almost seem to be crying out, "Look at me! I'm so cool!" When I have to use them, I feel like the point of using them is to gawk at their awesomeness.

:wq]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1328238604.3308";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1328238604</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>472</wp:comment_id>
    <wp:comment_author><![CDATA[Hendy]]></wp:comment_author>
    <wp:comment_author_email>jw.hendy@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>192.28.0.15</wp:comment_author_IP>
    <wp:comment_date>2012-02-02 23:12:16</wp:comment_date>
    <wp:comment_date_gmt>2012-02-02 23:12:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I learned emacs for org-mode, but have contemplated learning vim simply because I like to try new things and am always wondering what the best tool is. Having gone through the learning curve of emacs, I'm not thrilled about doing so, but was googling around for comparisons just to see... which brought me to this post.

Having read your response, I think that as Aaron mentions, this type of reflex is possible with anything physical. I'm assuming you aren't suggesting that only vim commands allow one to be "Zen like" in their movements?

I export a lot in orgmode as I tweak LaTeX files. =C-x C-s C-e p= is unbelievable reflexive. I don't look. It just happens. C-x C-s and C-x C-f are as well. Sure, these are damn simple; I'm simply illustrating that people can and do learn to adapt to any environment in this way and it becomes part of them. I think "browser" and my fingers to Ctrl+Alt+i, as that's what I have openbox bound to... so much so that when I'm using Windows and think "browser" I do the same thing.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>465</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1328224336</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1328224336.8742";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>459</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>174.56.21.245</wp:comment_author_IP>
    <wp:comment_date>2012-01-14 19:48:29</wp:comment_date>
    <wp:comment_date_gmt>2012-01-14 19:48:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hmm, I tried it in Aquamacs, and that one also only drew dots (though it did work with dragging).  I remember seeing a picture where it also drew things like \, -, and /.  Am I missing something?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>458</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1326570511</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1326570512.1889";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>466</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron Meurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>129.138.31.230</wp:comment_author_IP>
    <wp:comment_date>2012-01-21 22:10:12</wp:comment_date>
    <wp:comment_date_gmt>2012-01-21 22:10:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for the write up.  I've heard similar accounts about a "Zen experience" when using vim.  I think you can get the same thing in anything that uses just the keyboard, such as emacs or even just the bash shell.  This is why one of the more annoying thing about emacs to me is the lack of type-ahead support while it's booting up.

I'm a little confused about what you actually suggest doing with respect to cheat sheets.  I used a cheat sheet to learn because it would be impossible to do so otherwise.  If I just went off of what I remembered from the tutorial from the start, I would end up just editing with nothing but h, j, k, l, and i, which would extremely painful (I can be more efficient in nano).  I think you have to agree that you need some kind of reference to learn the basic key commands when you start.  A cheat sheet is probably the best way to do this, as it gives you only the information you need. 

In my experience, when you learn something like this, you first learn it by rote (or you always look it up).  Then, if you use it often enough, you will gain a muscle memory.  It's not because this is the best way to do it; I simply don't see how else it could be done.  How do you go about gaining a muscle memory without learning some other way first?  You can't learn a language by reading text in that language until you "get" it.  You have to learn at least some base vocabulary first. 

I do agree that muscle memory is the way to go.  This is the only way that you can be as fast as you want to be.  Touch typing is a perfect example of this.  There is a limit, a pretty low one, to the wpm that you can achieve without a muscle memory of the keyboard.  But you're saying something equivalent to saying that the best way to learn how to touch type is to buy a keyboard that has no letters on the keys.  This may actually work well for someone who is close to being a touch typist, but I'm pretty sure it would result in a slower learning rate for someone who's never typed at all before.

Maybe I'm misunderstanding what you're saying, and we really do agree after all.  I don't feel that the reason I chose emacs over vim is that I used a cheat sheet, however.  For one thing, you need to learn a bunch of key commands for emacs too.  I actually haven't been using a cheat sheet for emacs, as I noted.  But I feel like this has made me less efficient.  This is because the cheat sheet serves as a constant reminder of more advanced keyboard shortcuts, which you would otherwise forget about and never use.  For example, I just recently was reminded of the M-a and M-e keyboard shortcuts in emacs.  

Finally, an unrelated note: I never really got the hang of numbered command, either in vim or emacs. To me, by the time you count exactly how many words you want to delete (or whatever), you could have just pressed the shortcut that many times.  You can guess, but you'll end up getting it wrong most of the time, and for destructive commands like delete, you'll end up underestimating every time, again making things less efficient in the long run. I actually rebound C-u in emacs to work like it does in bash, because I never use this feature. Do you just get really good at estimating the number from sight, or what?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>465</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1327183812</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1327183812.5554";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>467</wp:comment_id>
    <wp:comment_author><![CDATA[Scott]]></wp:comment_author>
    <wp:comment_author_email>sbicknel@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>67.183.198.170</wp:comment_author_IP>
    <wp:comment_date>2012-01-21 22:49:08</wp:comment_date>
    <wp:comment_date_gmt>2012-01-21 22:49:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I don't mean to totally forgo cheat sheets. What I mean is that you should not rely solely on rote and definitely not on remembering the commands as strings of characters but to learn them as finger movements, so that you are not constantly doing something like this in your head: "OK, I want to delete a sentence. Let's see, that's either das or d)." You want to get to the point where you are thinking delete a sentence and your fingers just do it. Probably, what many people do is try to remember too much in the beginning and get overwhelmed. I would say, don't add new commands until you develop muscle memory for the ones you've already covered. I'm not totally against cheat sheets, but I do think it is better to make your own consisting of only the commands you have not mastered yet, but need right now.

Tutorials for learning Morse code work this way. They start out with the simplest of sounds and add similar ones gradually, but only after you master the current material. Eventually, you are listening to the entire alphabet and other symbols and increasing your speed at copying code.

If I were to give someone advice for learning Vim, I would tell them to practice the movement of their fingers for the commands they are trying to learn and try to remember what it feels like to issue particular commands. I have had better success learning new commands that way than by trying to remember that gf opens the file name under the cursor or that gg=G reformats my file. I find that sometimes my fingers do it before I am able to mentally recall the keystrokes, and I have to think about what I did to translate it into a string a characters in order to tell someone about the command.

:wq]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>466</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1327186148</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1327186148.4764";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>468</wp:comment_id>
    <wp:comment_author><![CDATA[Scott]]></wp:comment_author>
    <wp:comment_author_email>sbicknel@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>67.183.198.170</wp:comment_author_IP>
    <wp:comment_date>2012-01-21 22:53:42</wp:comment_date>
    <wp:comment_date_gmt>2012-01-21 22:53:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The counting problem, how many words am I trying to delete, or whatever, I totally agree with you about. I don't have a knack for quickly counting how many words are in the text, either. I tend to use visual mode for those situations. I just type v, followed by word movement or other movement commands, to extend the highlight until it covers the text I want to change. Then issue the command: d, c, y, or whatever.

:wq]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>466</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1327186422</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1327186422.6397";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>495</wp:comment_id>
    <wp:comment_author><![CDATA[asmeurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>129.138.36.166</wp:comment_author_IP>
    <wp:comment_date>2012-02-25 00:28:50</wp:comment_date>
    <wp:comment_date_gmt>2012-02-25 00:28:50</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I can see where you're coming from.  My friend (a vim user) told me once about some vim game where you are given two blocks of text, one before and one after.  The game is to change one into another using the fewest number of vim commands.  I never really found this, but I'm sure that that sort of things would have helped me become more efficient in vim.

But for me, sitting there trying to figure out how to "efficiently" do an operation, I could do it faster by just the slow way, because I don't lose any time on thought.  There's also probably many things that could be said about perceived time and the effect of that when I have to think about how to do an editing command and when it's just done.  Scott's concept of muscle memory also comes into play here.

The point is, when I was learning vim, I found myself just arrowing over do to something rather than using the faster keys, because it felt faster than trying to remember (or lookup) the keys to do what I want, not to mention trying to figure out the correct sequence of them and so on.

An interesting note: if I ever found myself doing serious editing on my iPhone, I might consider using vim (or viper mode), because there, typing is very painful, especially chorded commands (this depends on how the editor implements them, but I've yet to see something that is highly efficient).  Then I would just need a big "ESC" key somewhere, and I could do the rest with the regular keyboard.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>493</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1330129730</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1330129730.4467";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>482</wp:comment_id>
    <wp:comment_author><![CDATA[Vim vs. Emacs (Part 3) « Aaron Meurer&#8217;s SymPy Blog &laquo; Macphisto007&#8242;s Weblog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://macphisto007.wordpress.com/2012/02/14/vim-vs-emacs-part-3-aaron-meurers-sympy-blog/</wp:comment_author_url>
    <wp:comment_author_IP>76.74.248.187</wp:comment_author_IP>
    <wp:comment_date>2012-02-14 22:07:35</wp:comment_date>
    <wp:comment_date_gmt>2012-02-14 22:07:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Vim vs. Emacs (Part 3) « Aaron Meurer&#8217;s SymPy Blog. Like this:LikeBe the first to like this post. [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1329257256</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1329257256.3396";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>520</wp:comment_id>
    <wp:comment_author><![CDATA[Thierry]]></wp:comment_author>
    <wp:comment_author_email>trfmchl@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>76.191.229.183</wp:comment_author_IP>
    <wp:comment_date>2012-06-12 03:40:34</wp:comment_date>
    <wp:comment_date_gmt>2012-06-12 03:40:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[not sure if I am not doing it right, but xt-mouse (or ext-mode) is not working fully with emacs 24 on my debian sid box (only able to move vertical frame partitions)... trying to give emacs a fair shot, but it is hard (why are so many of the default confs so far from usable?)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:14:"1339472438.781";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1339472438</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>521</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron Meurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>174.56.21.245</wp:comment_author_IP>
    <wp:comment_date>2012-06-12 16:30:49</wp:comment_date>
    <wp:comment_date_gmt>2012-06-12 16:30:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I actually still have issues with mouse reporting, which I haven't gotten around to fixing. 

I agree about the defaults. Vim is the same in my opinion. At least emacs has the very friendly M-x customize to change the most common thing. For more advanced stuff, just Google, and you'll find someone else who's had the same problem and has posted a solution. 

Also take a look at my .emacs file (see post for link). There's a lot of useful configurations there.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>520</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1339518650</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1339518650.8169";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>513</wp:comment_id>
    <wp:comment_author><![CDATA[Rich Cheng]]></wp:comment_author>
    <wp:comment_author_email>asmeurersympy@whileyouweregone.co.uk</wp:comment_author_email>
    <wp:comment_author_url>http://whileyouweregone.co.uk/</wp:comment_author_url>
    <wp:comment_author_IP>81.149.252.156</wp:comment_author_IP>
    <wp:comment_date>2012-03-27 17:00:21</wp:comment_date>
    <wp:comment_date_gmt>2012-03-27 17:00:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[It's true that *before* you get the hang of Vim, you can often do things faster by just (say) hammering on the arrow keys.

The point is, though, that once you *do* get the hang of Vim, the "efficient" method requires no more thought than the inefficient method. When I'm editing in Vim, I don't sit around thinking about figuring out how to do things "efficiently". Those methods are already ingrained in my fingers, and they just happen.

And once you get there (which doesn't take as much practice as you might think) you find editing in Vim joyful and extremely efficient.

Again, I'm not trying to convince *you* that *you* should be using Vim. I'm just trying to explain why those of us that do love it so much.

The game your friend told you about is Vim Golf, and it shows off the potential of Vim.

For example, take this challenge: http://vimgolf.com/challenges/4d1a34ccfa85f32065000004

If you were good enough at Vim, you could convert the "start file" into the "end file" (and save the file and quit Vim) in *literally* the same time it takes me to type: efficient vim

Yes, it's impossible to be able to know how to complete all the challenges in Vim Golf as fast as you can type the commands, but even getting *vaguely* close to that is an enticing goal!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>495</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1332867623.6714";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1332867623</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>532</wp:comment_id>
    <wp:comment_author><![CDATA[Marcus Aurelius]]></wp:comment_author>
    <wp:comment_author_email>masserahguard-blog@yahoo.com</wp:comment_author_email>
    <wp:comment_author_url>http://marcuscf.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>189.30.46.154</wp:comment_author_IP>
    <wp:comment_date>2012-06-15 18:22:40</wp:comment_date>
    <wp:comment_date_gmt>2012-06-15 18:22:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[“Maybe the vim users out there could comment why they use vim.”

I guess the systems I used in the past (at university or the Linux distributions I tried at home) simply had better defaults for Vim than Emacs. For example:

With Vim I could use Backspace and Delete, while Pico and Emacs had problems with one of those keys (I do use Vim with the arrows, home, end, delete, etc. I use the "native" Vi commands too, but only when they improve my productivity)

- Backspace opened help in Emacs.
- Save (C-x C-s) or search (C-s) froze the terminal.
- In Vim I could get syntax hiliting and autoindenting for every programming language I could imagine, with little configuration (I just copied vimrc_example to my home dir).
- In Emacs Enter does not repeat the indentation of the previous line by default (am I in Notepad??), while Vim intelligently (un)indented every line according to the previous one, handling braces and everything else much better than any other editor I had tried.
- The instructions of Emacs did not teach how to open a new file without giving it a name. These little things add up.

It's true that after the first impression I had to adjust several little annoyances in Vim (I still don't use it much for free text, only for programming), but I was already hooked. It's also true that changing just a few settings, Emacs does everything, but in my first tries of Emacs it simply didn't work. Now i'm trying it again, after a few years, just for fun.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>758489</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1339784563</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1339784564.1999";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"marcuscf";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>545</wp:comment_id>
    <wp:comment_author><![CDATA[Scott]]></wp:comment_author>
    <wp:comment_author_email>sbicknel@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>67.160.104.47</wp:comment_author_IP>
    <wp:comment_date>2012-07-09 03:35:50</wp:comment_date>
    <wp:comment_date_gmt>2012-07-09 03:35:50</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[It has been a while since you started using Emacs. I'm just curious. How is your experience so far now that you have more experience and a more complete configuration?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>544</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1341804951.7725";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"xpunged";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1341804951</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>543</wp:comment_id>
    <wp:comment_author><![CDATA[David Li]]></wp:comment_author>
    <wp:comment_author_email>li.davidm96@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>98.167.229.23</wp:comment_author_IP>
    <wp:comment_date>2012-07-09 00:46:44</wp:comment_date>
    <wp:comment_date_gmt>2012-07-09 00:46:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Since you're using the development version of Emacs, you might like Emacs-prelude (https://github.com/bbatsov/prelude), a nice set of customizations for Emacs. In particular, it adds more modes for various languages, includes the nice Zenburn theme by default, enables ido-mode (which makes commands like C-x C-f much nicer), and so on.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1341794804</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1341794804.5792";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"lidavidm";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>537</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron Meurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>174.56.21.245</wp:comment_author_IP>
    <wp:comment_date>2012-06-24 05:36:56</wp:comment_date>
    <wp:comment_date_gmt>2012-06-24 05:36:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Actually, I've been using a Linux box for a little while, and I'm starting to get an idea of what you're talking about.  None of the shortcuts that require Control-Shift seem to work (I'm using Konsole in Ubuntu), which includes several that I rely on a lot.  Also, Alt did not work at all in Gnome terminal (one of the reasons I switched to Konsole), and it seems to like to open the Gnome search thing instead of doing the keyboard shortcut, which is really annoying.  Maybe I should just suck it up and use the GUI version until I get back to a Mac again.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>532</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1340516217</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1340516217.8087";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>516</wp:comment_id>
    <wp:comment_author><![CDATA[certik]]></wp:comment_author>
    <wp:comment_author_email>ondrej@certik.cz</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>69.229.210.205</wp:comment_author_IP>
    <wp:comment_date>2012-05-23 23:47:15</wp:comment_date>
    <wp:comment_date_gmt>2012-05-23 23:47:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I started with Emacs (well over 10 years ago now...), it worked pretty well for me. I didn't like the key combinations, but I figured well, that's the way it is. Then my friend recommended me to learn Vim, so I did (from the tutorial). It took a while to get used to hjkl. As  Scott says above, I never used any cheat sheet. I just picked up the basic commands whenever I needed it. It took some time to get used to it, but I would consider the learning curve about the same for both Vim and Emacs (from my own experience).

After using Vim for about 10 years now, I am more effective in it than in anything else. I think it's philosophy is the right one.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1337816838</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1337816839.2193";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"certik";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>517</wp:comment_id>
    <wp:comment_author><![CDATA[Badar Uddin Tagar]]></wp:comment_author>
    <wp:comment_author_email>bdtagar@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.facebook.com/bdtagar</wp:comment_author_url>
    <wp:comment_author_IP>182.182.28.133</wp:comment_author_IP>
    <wp:comment_date>2012-06-01 17:05:46</wp:comment_date>
    <wp:comment_date_gmt>2012-06-01 17:05:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi, I just wanted to put my few thoughts. I know both editors. But I like emacs more than double-standard (double-mode) vim. Although whatever suits you can be customized to any level. Just depends on you. Pick one and master it.
Thanks
Badar
Open source web developer]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1338570347</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value>100001613529599</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value>facebook</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value/>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1338570347.8419";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>518</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron Meurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>174.56.21.245</wp:comment_author_IP>
    <wp:comment_date>2012-06-01 18:36:10</wp:comment_date>
    <wp:comment_date_gmt>2012-06-01 18:36:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Interesting.  I'm curious to what degree you customized each editor.  Did you make many modifications in your .emacs/.vimrc files, or did you mostly just use the defaults?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>516</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1338575772.1693";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1338575771</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>544</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron Meurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>174.56.21.245</wp:comment_author_IP>
    <wp:comment_date>2012-07-09 01:17:29</wp:comment_date>
    <wp:comment_date_gmt>2012-07-09 01:17:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I think I may already be too far town the configuration rabbit hole to use that (I've even already created my own theme), but I'll look at it to see if there are any interesting things I can carry over.  ido-mode already seems like a pretty cool addition to my workflow.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>543</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1341796649</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1341796649.2796";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>546</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron Meurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>174.56.21.245</wp:comment_author_IP>
    <wp:comment_date>2012-07-09 04:21:56</wp:comment_date>
    <wp:comment_date_gmt>2012-07-09 04:21:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I started writing up a reply, but then it got so long that I figured that it would be best put in a new post.  So I'll reply there.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>545</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1341807719.4898";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1341807718</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>547</wp:comment_id>
    <wp:comment_author><![CDATA[Emacs: 7 months later &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2012/07/09/emacs-7-months-later/</wp:comment_author_url>
    <wp:comment_author_IP>66.135.48.192</wp:comment_author_IP>
    <wp:comment_date>2012-07-09 05:24:10</wp:comment_date>
    <wp:comment_date_gmt>2012-07-09 05:24:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] my final post about my switching to Emacs, a commenter, Scott, asked me, &#8220;It has been a while since you [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1341811451.6273";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1341811451</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>748</wp:comment_id>
    <wp:comment_author><![CDATA[Emacs: One year later &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2013/01/01/emacs-one-year-later/</wp:comment_author_url>
    <wp:comment_author_IP>66.135.48.190</wp:comment_author_IP>
    <wp:comment_date>2013-01-02 03:28:52</wp:comment_date>
    <wp:comment_date_gmt>2013-01-02 03:28:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] using them to do true editing work. My experiences are chronicled in my blog posts (parts 1, 2, 3, and 7 months later follow [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1357097332</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1357097332.6013081073760986328125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>How to install the development version of IPython Qtconsole and Notebook in Ubuntu</title>
  <link>http://asmeurersympy.wordpress.com/2012/06/14/how-to-install-the-development-version-of-ipython-qtconsole-and-notebook-in-ubuntu/</link>
  <pubDate>Thu, 14 Jun 2012 05:49:08 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">https://asmeurersympy.wordpress.com/?p=1109</guid>
  <description/>
  <content:encoded><![CDATA[Both the awesome <a href="http://ipython.org/ipython-doc/dev/interactive/htmlnotebook.html">IPython notebook</a> and <a href="http://ipython.org/ipython-doc/stable/interactive/qtconsole.html">Qtconsole</a> are in the Ubuntu repositories, so if you just want to use the stable released versions, you can just do

[code language="bash"]
sudo apt-get install ipython-notebook ipython-qtconsole
[/code]

and be on your way.  But the git development version has a lot of cool new features, and you may not want to wait for 0.13 to be released and make its way to the Ubuntu repos.  But you may be thinking that to use those you will have to figure out all the dependencies yourself.  Actually, it's pretty easy:

[code language="bash"]
# First install git, if you don't already have it
sudo apt-get install git
# Then, clone the IPython repo, if you haven't already.
git clone git://github.com/ipython/ipython.git
cd ipython
# Now just install IPython with apt, then uninstall it.  The dependencies will remain
sudo apt-get install ipython-notebook ipython-qtconsole
sudo apt-get remove ipython-notebook ipython -qtconsole ipython
# Now install the IPython git version in such a way that will keep up to date when you pull
sudo python setup.py develop
[/code]

To update, just cd into that ipython directory and type <code>git pull</code>.  That's it.  Now type <code>ipython notebook</code> or <code>ipython qtconsole</code> to get the magic.

EDIT: After you do this, <code>apt-get</code> will start bugging you every time that you use it that a bunch of packages are no longer needed.  These are the ones that you do need for the qtconsole and the notebook, so you should not autoremove them as it says.  Rather, set them as manually installed by copying the list of packages that it tells you about and <code>sudo apt-get install</code>ing them.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1109</wp:post_id>
  <wp:post_date>2012-06-14 05:49:08</wp:post_date>
  <wp:post_date_gmt>2012-06-14 05:49:08</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>how-to-install-the-development-version-of-ipython-qtconsole-and-notebook-in-ubuntu</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_format" nicename="post-format-standard"><![CDATA[Standard]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:comment>
    <wp:comment_id>522</wp:comment_id>
    <wp:comment_author><![CDATA[Bradley Froehle]]></wp:comment_author>
    <wp:comment_author_email>brad.froehle@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://bfroehle.com/</wp:comment_author_url>
    <wp:comment_author_IP>98.248.180.46</wp:comment_author_IP>
    <wp:comment_date>2012-06-14 08:28:55</wp:comment_date>
    <wp:comment_date_gmt>2012-06-14 08:28:55</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Of course you can also just leave the system ipython installed and install the dev version locally (for your user only).  No root permissions required.

$ python setupegg.py develop --user]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1339662536</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1339662536.6136";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"bfroehle";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>527</wp:comment_id>
    <wp:comment_author><![CDATA[Simon]]></wp:comment_author>
    <wp:comment_author_email>simonjtyler@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://gravatar.com/simonjtyler</wp:comment_author_url>
    <wp:comment_author_IP>203.214.36.82</wp:comment_author_IP>
    <wp:comment_date>2012-06-15 00:02:28</wp:comment_date>
    <wp:comment_date_gmt>2012-06-15 00:02:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You could also use `apt-get build-dep ` to install all the dependencies for a package and get you ready for a manual build.

But I actually got rid of my manual install of ipython and switched to the development ppa which you can add to your apt sources using `sudo add-apt-repository ppa:jtaylor/ipython-dev` (See the announcement for the ppa here: http://mail.scipy.org/pipermail/ipython-dev/2012-January/008615.html)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1339718550</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1339718550.6818";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:11:"simonjtyler";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>528</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron Meurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>174.56.21.245</wp:comment_author_IP>
    <wp:comment_date>2012-06-15 00:33:17</wp:comment_date>
    <wp:comment_date_gmt>2012-06-15 00:33:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I didn't know about that. That would have been more direct :)

I'm going to stick with setup.py develop because I need to switch to older versions sometimes for testing, but otherwise a ppa sounds like a good solution.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>527</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1339720398</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1339720398.7494";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Emacs: 7 months later</title>
  <link>http://asmeurersympy.wordpress.com/2012/07/09/emacs-7-months-later/</link>
  <pubDate>Mon, 09 Jul 2012 05:24:05 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1112</guid>
  <description/>
  <content:encoded><![CDATA[
In my <a href="http://asmeurersympy.wordpress.com/2012/01/13/vim-vs-emacs-part-3/">final post</a> about my switching to Emacs, a <a href="http://asmeurersympy.wordpress.com/2012/01/13/vim-vs-emacs-part-3/#comment-544">commenter</a>, Scott, asked me, "It has been a while since you started using Emacs. I’m just curious. How is your experience so far now that you have more experience and a more complete configuration?"  My reply was getting quite long, so I figured it would be best suited as a new post.

The short answer is, mostly the same since I wrote that <a href="http://asmeurersympy.wordpress.com/2012/01/13/vim-vs-emacs-part-3">Vim vs. Emacs (part 3)</a>. Once you use something a lot, you notice all kinds of things that could use improvements. Some of them are just minor annoyances. For example, many interactive commands in Emacs (but not all!) require you to type out "yes" instead of just "y" as a confirmation. Others are more serious, like the need for a real replacement of SuperTab from vim.

I actually didn't have much free time to work on configuring Emacs during the school year, and once the summer started, my computer died, and I've been working of an old laptop running Linux until I can get a new one. Fortunately, I had the foresight to put all my Emacs configuration <a href="https://github.com/asmeurer/dotfiles">online on GitHub</a>, so it was easy to get my configuration again. I've noticed that in Linux, the Alt key (i.e., Meta) is used for other things, so it doesn't work so well in Emacs (e.g., pressing Alt without any other keys sometimes activates a menu that removes the keyboard focus, and also C-M shortcuts don't seem to work at all).

I've memorized very few keyboard shortcuts, even ones that might be useful to me (e.g., I don't remember the shortcut to jump to a matching parenthesis). Usually, if I am using some mode or something and I want to know how to do something, I just Google it, and generally find the answer within a few seconds.

There are several major configuration issues that I've yet to address, either due to lack of time or because I couldn't find a suitable solution. A SuperTab replacement is one.  This is actually a big one, because scrolling through a file just to see what's there is getting older and older, as is searching just to jump to a function definition.  If anyone knows of a good way to do this, please let me know.  I mainly need it for Python files, but having it other modes as well would be nice.  Basically, I just want something that shows me all the class and function definitions in the file, in order, that I can easily select one and jump to it.

Related to searching, searching in Emacs sucks. I'm using isearch+, which is an improvement, but it still bugs me that search does not wrap around by default. Also, for some reason, pressing delete doesn't delete the last character you typed, but the last character that it matched. That may sound minor, but I use it a lot, so it's really gotten on my nerves.

Regular expression searching in Emacs is useless.  I can never get it to work (usually because of differences between () and \(\)).  What I really want is an interactive, user friendly, regular expression search/search and replace tool.  There's regexp-builder, but that's useless because once you build the regular expression, you have to manually copy it and paste it into the real regular expression search function to actually use it.  And it doesn't work with search and replace.

This last semester I had a semester long project in C.  For that, flymake-mode was a godsend.  It requires a bit of manual configuration (you have to add something to your Makefile, and you have to add some stuff to .emacs as always to enable it by default), but once you do that, it just works.  If you don't know what this is, basically, it highlights the compiler errors in your source in real time, as you type it.  So instead of doing something stupid twenty times, and then compiling and finding them all, you do something stupid once, see the error, and don't do make the mistake any more.  It's also nice to close your editor and know that your code will compile.

The Python mode I am mixed about.  On the one hand, it's really awesome how smart it is about indentation.  On the other hand, the syntax highlighting is just shy of what I want (granted, it's pretty good, but I want better than that).  For example, I want to be able to color docstrings, single quoted strings, and double quoted strings differently.  It would also be awesome to get some coloring in docstrings itself.  I'm thinking markdown mode for any text that's in a docstring, except for doctests, which are colored in Python mode (or some variant).

Some things I've not really cared much about yet because I haven't used that type of file yet.  For example, I'm currently writing this post in Emacs, and just now noticing the deficiencies in html-mode (e.g., I want an easy way to select text and turn it into a link, just like in the WordPress editor).

Finally, I've been trying to write my own theme.  That process has been slow and slightly painful.  Emacs is currently in the process of moving to themes, though, so this is to be expected.  When Emacs 24 is actually released I think it will be fair to judge how well this feature works.

That's my wishlist (or most of it anyway).  But there are positive things too. auto-complete-mode, which I mentioned at the top of my previous blog post, is absolutely awesome.  I think this extension alone has made me more productive.

Some things I take for granted, like automatic spell checking of strings and comments in Python (not enabled by default, but not hard to configure either).  Thanks to someone on an Emacs mailing list, I have the perfect automatic clearing of trailing whitespace, that automatically leaves your whitespace before the cursor in the buffer, but still writes the clear to the file (see my .emacs file from my dotfiles repo linked to above for details).

I've been hoping to learn Emacs lisp, so that I could remedy many of these problems on my own, but so far I haven't really had the free time.  Lisp is a very confusing language, so it's not easy to jump into (compared to the language vim uses, which I found easy enough to hack on without knowing at all).

Ultimately, I'm quite pleased with how user friendly Emacs is, and with how easy it is to find out how to do almost anything I want just by Googling it. Configuration is an uphill battle.  Emacs has a ton of great packages, many of which are included, but almost none are enabled by default.  Just today I discovered Ido mode, thanks to <a href="http://asmeurersympy.wordpress.com/2012/01/13/vim-vs-emacs-part-3/#comment-543"> David Li</a>.  I feel that in the long term, as I learn Emacs Lisp, I can make it do whatever I want.  It provides a good baseline editing experience, and a good framework for configuring it to do whatever you want, and also enough people use it that 99% of the things you want are already done by somebody.

<!-- LocalWords:  SuperTab isearch flymake Makefile WordPress repo -->
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1112</wp:post_id>
  <wp:post_date>2012-07-09 05:24:05</wp:post_date>
  <wp:post_date_gmt>2012-07-09 05:24:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>emacs-7-months-later</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:comment>
    <wp:comment_id>591</wp:comment_id>
    <wp:comment_author><![CDATA[Nei]]></wp:comment_author>
    <wp:comment_author_email>ailin@flupps.net</wp:comment_author_email>
    <wp:comment_author_url>http://anti.teamidiot.de</wp:comment_author_url>
    <wp:comment_author_IP>139.18.2.183</wp:comment_author_IP>
    <wp:comment_date>2012-08-07 13:23:16</wp:comment_date>
    <wp:comment_date_gmt>2012-08-07 13:23:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[re. html editor: select text and C-c C-c h then you can type in the link target]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1344345799.045363903045654296875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1344345798</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>585</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron Meurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>174.56.21.245</wp:comment_author_IP>
    <wp:comment_date>2012-07-24 23:12:55</wp:comment_date>
    <wp:comment_date_gmt>2012-07-24 23:12:55</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>584</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1343171576</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1343171576.5979120731353759765625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>642</wp:comment_id>
    <wp:comment_author><![CDATA[Le Wang]]></wp:comment_author>
    <wp:comment_author_email>l26wang@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>110.175.136.141</wp:comment_author_IP>
    <wp:comment_date>2012-09-08 04:27:15</wp:comment_date>
    <wp:comment_date_gmt>2012-09-08 04:27:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Emacs' regexp syntax takes a little bit getting used to, but with so many libraries dependent on it at this point, it won't change.

For your isearch problems, you're using the wrong tool.  See `occur`.  Helm has interactive interactive occur.

Also check out helm for your general incremental completion needs.  Ido is for the kiddies.  ;)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>593</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1347078436</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1347078436.5790989398956298828125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>645</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron Meurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>174.235.192.231</wp:comment_author_IP>
    <wp:comment_date>2012-09-08 18:55:51</wp:comment_date>
    <wp:comment_date_gmt>2012-09-08 18:55:51</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[It looks promising, but it would require a bit of customization to get it how I want, so I'll probably not get around to it for a while.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>642</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1347130552</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1347130553.327927112579345703125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>644</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron Meurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>174.235.192.231</wp:comment_author_IP>
    <wp:comment_date>2012-09-08 18:41:23</wp:comment_date>
    <wp:comment_date_gmt>2012-09-08 18:41:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks.  I'll check out helm.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>642</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1347129685.86894893646240234375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1347129685</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>592</wp:comment_id>
    <wp:comment_author><![CDATA[Nei]]></wp:comment_author>
    <wp:comment_author_email>ailin@flupps.net</wp:comment_author_email>
    <wp:comment_author_url>http://anti.teamidiot.de</wp:comment_author_url>
    <wp:comment_author_IP>139.18.2.183</wp:comment_author_IP>
    <wp:comment_date>2012-08-07 14:17:49</wp:comment_date>
    <wp:comment_date_gmt>2012-08-07 14:17:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[as for the re-builder, first change syntax to string with C-c TAB and then remember it's \( \). if you're pleased with the result use C-c C-w to copy and in the query-replace-regexp you can paste it with C-y -- still to hard? write your custom elisp and put it on a key binding ;-)

about isearch, just hit C-s again at the end and it will "wrap around". And if you want to edit your search string, just type M-e first and then you can delete the last char or whatever.

for code navigation I highly recommend you set up semantic and then you can use something like eassist-list-methods to get a pop-up menu with quick jump to all the methods, or if that isn't enough check out ecb]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>591</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1344349070.2197170257568359375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1344349070</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>593</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron Meurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>174.56.21.245</wp:comment_author_IP>
    <wp:comment_date>2012-08-07 23:22:44</wp:comment_date>
    <wp:comment_date_gmt>2012-08-07 23:22:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I know that you can press C-s again.  But that's not the point. I have to press C-s up to four times just to determine if a string is really in a document or not.

Thanks for the url tip.

For regular expressions, that doesn't really solve my problem.  I want something user-friendly and interactive.  If I was an elisp wiz, I might try to do it on my own.  But I can't imagine that I'm the only one who's felt this deficiency.

I'll checkout semantic or ecb.  I vaguely remember trying semantic before but giving up because it was too hard to setup.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>592</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1344381766</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1344381766.60583400726318359375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>584</wp:comment_id>
    <wp:comment_author><![CDATA[Matt]]></wp:comment_author>
    <wp:comment_author_email>gnus-user@letterboxes.org</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>98.213.43.118</wp:comment_author_IP>
    <wp:comment_date>2012-07-24 12:55:05</wp:comment_date>
    <wp:comment_date_gmt>2012-07-24 12:55:05</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[;; y/n instead of yes/no
(fset 'yes-or-no-p 'y-or-n-p)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1343134506</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1343134507.16959095001220703125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>749</wp:comment_id>
    <wp:comment_author><![CDATA[Emacs: One year later &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2013/01/01/emacs-one-year-later/</wp:comment_author_url>
    <wp:comment_author_IP>66.135.48.190</wp:comment_author_IP>
    <wp:comment_date>2013-01-02 03:28:54</wp:comment_date>
    <wp:comment_date_gmt>2013-01-02 03:28:54</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] As readers of this blog may remember, back in 2011, I decided to move to a command-line based editor. For roughly two weeks in December, 2011, I exclusively used Vim, and for the same amount of time in January, 2012, I used exclusively Emacs. I had used a little of each editor in the past, but this was my first time using them to do true editing work. My experiences are chronicled in my blog posts (parts 1, 2, 3, and 7 months later follow up). [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1357097334</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1357097334.977366924285888671875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>831</wp:comment_id>
    <wp:comment_author><![CDATA[Scott]]></wp:comment_author>
    <wp:comment_author_email>sbicknel@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>71.197.174.147</wp:comment_author_IP>
    <wp:comment_date>2013-05-11 17:46:45</wp:comment_date>
    <wp:comment_date_gmt>2013-05-11 17:46:45</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[When I used Emacs (a two-year period beginning in 2002), it was to compose prose text.  I loved that I could make corrections so quickly without having to move my hands away from the keyboard, but I found that Emacs' key bindings caused a burning pain in my hands after about forty-five minutes of typing.  Still, I persisted.  I wanted to learn Lisp to customize my .emacs file, but found it sufficiently complex to dissuade me from bothering with it, even though I bought a book specifically aimed at teaching Emacs Lisp.  As I gained more experience with it, I noticed that Emacs did not fit into either Windows or Linux.  To be fair, Vim doesn't fit into Windows either, but it is a nice fit on any Linux system.  Emacs felt like a strange glob of goo in Windows and like a monster on an ant hill in Linux.  It was not designed for either of these systems.  Eventually, I concluded that I was not the target audience to which Emacs (or its Lisp interpreter) was aiming, and I abandoned it.  And again, in all fairness, Vim is not aimed at authors of prose any more than Emacs is;  I was simply lucky to be a touch typist (Vim is best used in combination with touch typing) and to have approached learning it in a way that was likely to succeed: memorizing the tactile feel of commands rather than their alphabetic symbols.

:wq]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>1482852</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1368294407</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1368294407.8624579906463623046875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"xpunged";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>SymPy Live Sphinx Extension</title>
  <link>http://asmeurersympy.wordpress.com/2012/08/21/sympy-live-sphinx-extension/</link>
  <pubDate>Tue, 21 Aug 2012 05:09:13 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1122</guid>
  <description/>
  <content:encoded><![CDATA[I didn't blog about SymPy all summer, so I thought I would write a post about my favorite feature of the upcoming SymPy 0.7.2 release. &nbsp;In fact, this feature has got me more excited than any other feature from any version of SymPy. &nbsp;Yeah, it's that good.

The feature is the SymPy Live Sphinx extension. &nbsp;To start, if you don't know about it, check out <a href="http://live.sympy.org/" target="_blank">SymPy Live</a>. &nbsp;This is a console that runs on the <a href="https://developers.google.com/appengine/">App Engine</a>. &nbsp;We've actually had this for quite some time, but this winter, it got a huge upgrade thanks to the contribution of some <a href="http://www.google-melange.com/gci/homepage/google/gci2011">GCI</a> students. &nbsp;Basically, SymPy Live lets you try out SymPy in your browser completely for free, because it runs all the code on the App Engine. &nbsp;Actually, the console is a full Python console, so you can actually run any valid Python command on it. &nbsp;This past winter, GCI students upgraded the look of the site, added a mobile version (visit live.sympy.org on your phone), and added other neat features like search history and autocompletion.

Now, <a href="http://sphinx.pocoo.org/">Sphinx</a>&nbsp;is the documentation system that we use to generate <a href="http://docs.sympy.org/">SymPy's html documentation</a>. Last year, when I was at the&nbsp;<a href="http://asmeurersympy.wordpress.com/2011/07/17/the-scipy-2011-conference/">SciPy Conference</a>, Mateusz had an idea at the sprints to create an extension linking SymPy Live and Sphinx, so that the examples in Sphinx could be easily run in SymPy Live. &nbsp;He didn't finish the extension, but I'm happy to report that thanks to David Li, who was also one of the&nbsp;aforementioned&nbsp;GCI students, the extension is now complete, and is running live on our <a href="http://docs.sympy.org/dev/">development docs</a>. &nbsp;When SymPy 0.7.2 is released (soon I promise), it will be part of the oficial documentation.

The best way to see how awesome this is is to visit the website and check it out. &nbsp;You will need a modern browser (the latest version of Firefox, Safari, or Chrome will work, IE might work too). &nbsp;Go to a page in the development docs with documentation examples, for example,&nbsp;<a href="http://docs.sympy.org/dev/tutorial.html#algebra">http://docs.sympy.org/dev/tutorial.html#algebra</a>, and click on one of the examples (or click on one of the green "Run code block in SymPy Live" buttons). You should see a console pop up from the bottom-right of the screen, and run your code. &nbsp;For example:

[caption id="attachment_1149" align="alignnone" width="450"]<a href="http://asmeurersympy.files.wordpress.com/2012/08/sympy-live-sphinx.png"><img class="size-full wp-image-1149" title="SymPy-Live-Sphinx" src="http://asmeurersympy.files.wordpress.com/2012/08/sympy-live-sphinx.png" alt="" width="450" height="317" /></a> Example of the SymPy Live Sphinx extension at <a href="http://docs.sympy.org/dev/tutorial.html#algebra">http://docs.sympy.org/dev/tutorial.html#algebra</a>. Click for larger image.[/caption]

&nbsp;

You can access or hide the console at any time by clicking on the green box at the bottom-right of the page. &nbsp;If you click on "Settings", you will see that you can change all the same settings as the regular SymPy Live console, such as the printer type, and the keys for execution and autocompletion. &nbsp;Additionally, there is a new setting, "Evaluation Mode", which changes how the Sphinx examples are evaluated. &nbsp;The default is "Evaluate". &nbsp;In this mode, if you click on an example, it is executed immediately. &nbsp;The other option is "Copy". &nbsp;In this mode, if you click an example, it is copied to the console, but not executed right away. This way, you can edit the code to try something different. &nbsp;Remember, this is a full fledged Python console running SymPy, so you can try literally anything

So play with this and <a href="http://groups.google.com/group/sympy">let us know</a> what you think. &nbsp;We would love to hear ways that we can improve the experience even further. &nbsp;In particular, I think we should think about ways to make the "Copy" mode more user-friendly. &nbsp;Suggestions welcome! &nbsp;Also, please <a href="http://code.google.com/p/sympy/issues">report any bugs</a>.

And one word of warning: &nbsp;even though these are the development docs, SymPy Live is still running SymPy 0.7.1. &nbsp;So some examples may not work until 0.7.2 is released, at which point we will update SymPy Live.

I believe that this extension represents the future of interactive documentation.&nbsp;I hope you enjoy.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1122</wp:post_id>
  <wp:post_date>2012-08-21 05:09:13</wp:post_date>
  <wp:post_date_gmt>2012-08-21 05:09:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>sympy-live-sphinx-extension</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_oembed_dc60fbd53e2302b527ca0b031388cbc9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fabcf4bbb582f5e047c165a31c019347</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>621</wp:comment_id>
    <wp:comment_author><![CDATA[isympy -I: A saner interactive environment &laquo; Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2012/08/31/isympy-i-a-saner-interactive-environment/</wp:comment_author_url>
    <wp:comment_author_IP>76.74.254.58</wp:comment_author_IP>
    <wp:comment_date>2012-08-31 03:30:13</wp:comment_date>
    <wp:comment_date_gmt>2012-08-31 03:30:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] promised, here is another post describing a new feature in the upcoming SymPy [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1346383814</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1346383814.51675701141357421875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>838</wp:comment_id>
    <wp:comment_author><![CDATA[SciPy 2013 | Aaron Meurer&#039;s SymPy Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/2013/07/02/scipy-2013/</wp:comment_author_url>
    <wp:comment_author_IP>216.151.210.29</wp:comment_author_IP>
    <wp:comment_date>2013-07-02 01:42:13</wp:comment_date>
    <wp:comment_date_gmt>2013-07-02 01:42:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] He has continued working on SymPy Live, and SymPy Gamma since. He is the reason that we have SymPy Live in our docs. His talk was also well received.&nbsp;&nbsp;David is a good speaker, and SymPy Gamma and SymPy [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1372729335.6014668941497802734375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1372729334</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>isympy -I:  A saner interactive environment</title>
  <link>http://asmeurersympy.wordpress.com/2012/08/31/isympy-i-a-saner-interactive-environment/</link>
  <pubDate>Fri, 31 Aug 2012 03:30:08 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1154</guid>
  <description/>
  <content:encoded><![CDATA[As <a href="http://asmeurersympy.wordpress.com/2012/08/21/sympy-live-sphinx-extension/">promised</a>, here is another post describing a new feature in the upcoming <a href="https://github.com/sympy/sympy/wiki/Release-Notes-for-0.7.2">SymPy 0.7.2</a>.

<h2>Automatic Symbol Definition</h2>

While not as ground breaking as the feature I described in my <a href="http://asmeurersympy.wordpress.com/2012/08/21/sympy-live-sphinx-extension/">last post</a>, this feature is still quite useful. As you may know, SymPy is inherently a Python library, meaning that it lives by the rules of Python. If you want to use any name, whether it be a Symbol or a function (like cos), you need to define it (in the case of Symbols), or import it (in the case of functions that come with SymPy). We provide the script <code>isympy</code> with SymPy to assist with this. This script automatically runs IPython (if it's installed), imports all names from sympy (<code>from sympy import *</code>), and defines common symbol names (like <code>x</code>, <code>y</code>, and <code>z</code>).

But if you want to use a Symbol that is not one of the ones predefined by <code>isympy</code>, you will get something like

[code language="py"]
In [1]: r*x
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
 in ()
----&gt; 1 r*x

NameError: name 'r' is not defined
[/code]

The best solution for this has been either to type <code>var('r')</code>, which will create the Symbol <code>r</code> and inject it into the namespace, or to wrap your text in a string and pass it to <code>sympify()</code>, like <code>sympify("r*x")</code>. Neither of these are very friendly in interactive mode.

In SymPy 0.7.2, <code>isympy</code> has a new command line option, <code>isympy -a</code>, which will enable a mechanism that will automatically define all undefined names as Symbols for you:

[code language="py"]
In [1]: r*x
Out[1]: r⋅x
[/code]

There are some caveats to be aware of when using this feature:
<ul>
	<li>Names must be undefined for <code>isympy -a</code> to work. If you type something like <code>S*x</code>, you'll get:[code language="py"]
In [3]: S*x
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-3-6656a97ea7b0&gt; in &lt;module&gt;()
----&gt; 1 S*x

TypeError: unsupported operand type(s) for *: 'SingletonRegistry' and 'Symbol'
[/code]

That's because <code>S</code> is already defined (it's the <code>SingletonRegistry</code>, and also a shortcut to <code>sympify()</code>). To use a name that's already defined, either create it manually with <code>var()</code> or delete it using <code>del</code>.</li>
	<li>This only works on the top level namespace. If you define a function with an undefined name, it will not automatically define that symbol when run.</li>
	<li>This works by catching NameError, defining the name, and then re-running the expression. If you have a multiline statement, any lines before the undefined name will be run before the NameError will be caught. This usually won't happen, but it's a potential side-effect to be aware of. We plan to rewrite it using either ast or tokenize to avoid this issue.</li>
	<li>Obviously, this is intended for interactive use only. If you copy code and put it in a script, or in some other place where someone might be expected to run it, but not necessarily from <code>isympy -a</code>, you should include symbol definitions.</li>
</ul>

<h2>Automatic int to Integer Conversion</h2>

A second thing that is annoying with Python and SymPy is that something like <code>1/2</code> will be interpreted completely by Python, without any SymPy. This means that something like <code>1/2 + x</code> will give either <code>0 + x</code> or <code>0.5 + x</code>, depending on whether or not <code>__future__.division</code> has been imported. <code>isympy</code> has always ran <code>from __future__ import division</code>, so that you'll get the latter, but we usually would prefer to get <code>Rational(1, 2)</code>. Previously, the best way to do this was again to either run it through <code>sympify()</code> as a string, or to sympify at least one of the numbers (here the <code>S()</code> shortcut to <code>sympify()</code> is useful, because you can type just <code>S(1)/2</code>).

With SymPy 0.7.2, you can run <code>isympy -i</code>, and it will automatically wrap all integers literals with <code>Integer()</code>. The result is that <code>1/2</code> produces <code>Rational(1, 2)</code>:

[code language="py"]
In [1]: 1/2 + x
Out[1]: x + 1/2
[/code]

Again, there are a couple of caveats:
<ul>
	<li>If you want to get Python style division, you just need to wrap both arguments in <code>int()</code>:[code language="py"]
In [2]: int(1)/int(2)
Out[2]: 0.5
[/code]

Of course, if you just want a floating point number, you can just use <code>N()</code> or <code>.evalf()</code></li>
	<li>This works by parsing the text and wrapping all integer literals with <code>Integer()</code>. This means that if you have a variable set to a Python int, it will still act like a Python int:[code language="py"]
In [6]: a = int(1)

In [7]: b = int(2)

In [8]: a/b
Out[8]: 0.5
[/code]

Note that to even do that example, I had to manually make <code>a</code> and <code>b</code> Python ints by wrapping them in <code>int()</code>. If I had just done <code>a = 1</code>, it would have been parsed as <code>a = Integer(1)</code>, and I would have gotten a SymPy Integer. But this can be an issue if you use the result of some function that returns an int (again, note that most functions in SymPy that return integers return Integer, not int).</li>
	<li>The same as before: this will only work interactively. If you want to reuse your code outside of <code>isympy -i</code>, you should take care of any int/int by rewriting it as S(int)/int.</li>
</ul>
Since these are both useful features, we've added a way that you can get them both at once: by doing <code>isympy -I</code> (the "I" stands for "Interactive"). If we add similar features in the future, we will also add them to the <code>-I</code> shortcut (for example, we may add an option to allow <code>^</code> to automatically be replaced with <code>**</code>).]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1154</wp:post_id>
  <wp:post_date>2012-08-31 03:30:08</wp:post_date>
  <wp:post_date_gmt>2012-08-31 03:30:08</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>isympy-i-a-saner-interactive-environment</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Infinitely nested lists in Python</title>
  <link>http://asmeurersympy.wordpress.com/2012/09/19/infinitely-nested-lists-in-python/</link>
  <pubDate>Wed, 19 Sep 2012 04:21:08 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1160</guid>
  <description/>
  <content:encoded><![CDATA[Readers of this blog know that I sometimes like to write about some <a href="http://asmeurersympy.wordpress.com/2009/07/20/modifying-a-list-while-looping-through-it-in-python/">strange</a>, <a href="http://asmeurersympy.wordpress.com/2010/06/16/strange-python-behavior-can-someone-please-explain-to-me-what-is-going-on-here/">unexpected</a>, and <a href="http://asmeurersympy.wordpress.com/2011/03/15/true-is-true-is-false-is-true-is-false/">unusual</a> things in Python that I stumble across.  This post is another one of those.

First, look at this

[code language="py"]
&gt;&gt;&gt; a = []
&gt;&gt;&gt; a.append(a)
&gt;&gt;&gt; a
[[...]]
[/code]

What am I doing here?  I'm creating a list, <code>a</code>, and I'm adding it to itself.  What you end up with is an infinitely nested list.  The first interesting thing about this is that Python is smart enough to not explode when printing this list.  The following should convince you that <code>a</code> does indeed contain itself.

[code language="py"]
&gt;&gt;&gt; a[0] is a
True
&gt;&gt;&gt; a[0] == a
True
[/code]

Now, if you have programmed in C, or a similar language that uses pointers, this should not come as a surprise to you.  Lists in Python, like most things, do not actually contain the items inside them.  Rather, they contain references (in C terminology, "pointers") to the items inside them.  From this perspective, there is no issue at all with <code>a</code> containing a pointer to itself.

The first thing I wondered when I saw this was just how clever the printer was at noticing that the list was infinitely nested.  What if we make the cycle a little more complex?

[code language="py"]
&gt;&gt;&gt; a = []
&gt;&gt;&gt; b = []
&gt;&gt;&gt; a.append(b)
&gt;&gt;&gt; b.append(a)
&gt;&gt;&gt; a
[[[...]]]
&gt;&gt;&gt; b
[[[...]]]
&gt;&gt;&gt; a[0] is b
True
&gt;&gt;&gt; b[0] is a
True
[/code]

So it still works.  I had thought that maybe repr just catches <code>RuntimeError</code> and falls back to printing <code>...</code> when the list is nested too deeply, but it turns out that is not true:

[code language="py"]
&gt;&gt;&gt; a = []
&gt;&gt;&gt; for i in range(10000):
...     a = [a]
... 
&gt;&gt;&gt; a
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
RuntimeError: maximum recursion depth exceeded while getting the repr of a list
[/code]

And by the way, in case you were wondering, it is possible to catch a <code>RuntimeError</code> (using the same <code>a</code> as the previous code block)

[code language="py"]
&gt;&gt;&gt; try:
...     print(a)
... except RuntimeError:
...     print(&quot;no way&quot;)
... 
no way
[/code]

(and you also may notice that this is Python 3. Things behave the same way in Python 2)

Back to infinitely nested lists, we saw that printing works, but there are some things that don't work.

[code language="py"]
&gt;&gt;&gt; a[0] == b
True
&gt;&gt;&gt; a[0] == a
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
RuntimeError: maximum recursion depth exceeded in comparison
[/code]

<code>a[0] is b</code> holds (i.e., they are exactly the same object in memory), so <code>==</code> is able to short-circuit on them.  But to test <code>a[0] == a</code> it has to recursively compare the elements of <code>a</code> and <code>a[0]</code>.  Since it is infinitely nested, this leads to a recursion error.  Now an interesting question: why does this happen?  Is it because <code>==</code> on lists uses a depth first search?  If it were somehow possible to compare these two objects, would they be equal?

One is reminded of <a href="http://en.wikipedia.org/wiki/Russel%27s_paradox">Russel's paradox</a>, and the reason why in <a href="http://en.wikipedia.org/wiki/Zermelo%E2%80%93Fraenkel_set_theory">axiomatic set theory</a>, sets are not allowed to contain themselves. 

Thinking of this brought me to my final question.  Is it possible to make a Python <code>set</code> that contains itself?  The answer is obviously no, because <code>set</code> objects can only contain hashable objects, and <code>set</code> is not hashable.  But <code>frozenset</code>, <code>set</code>'s counterpart, is hashable.  So can you create a <code>frozenset</code> that contains itself?  The same for <code>tuple</code>.  The method I used for <code>a</code> above won't work, because <code>a</code> must be mutable to append it to itself.

]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1160</wp:post_id>
  <wp:post_date>2012-09-19 04:21:08</wp:post_date>
  <wp:post_date_gmt>2012-09-19 04:21:08</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>infinitely-nested-lists-in-python</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:comment>
    <wp:comment_id>669</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron Meurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>75.160.57.17</wp:comment_author_IP>
    <wp:comment_date>2012-09-19 14:53:29</wp:comment_date>
    <wp:comment_date_gmt>2012-09-19 14:53:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Nice. Before it segfaults, it prints a bunch of (.  And it seems that it has been fixed in Python 3 (print(a) gives the same thing as repr(a)).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>667</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1348066410</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1348066410.49250698089599609375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>667</wp:comment_id>
    <wp:comment_author><![CDATA[Bradley Froehle]]></wp:comment_author>
    <wp:comment_author_email>brad.froehle@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://bfroehle.com/</wp:comment_author_url>
    <wp:comment_author_IP>70.36.235.230</wp:comment_author_IP>
    <wp:comment_date>2012-09-19 05:38:08</wp:comment_date>
    <wp:comment_date_gmt>2012-09-19 05:38:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You can certainly do it for tuples using the CPython API.  For example:

from ctypes import pythonapi, c_void_p, c_ssize_t, c_int
from _ctypes import PyObj_FromPtr

pythonapi.PyTuple_New.argtypes = (c_ssize_t,)
pythonapi.PyTuple_New.restype = c_void_p
pythonapi.PyTuple_SetItem.argtypes = (c_void_p, c_ssize_t, c_void_p)
pythonapi.PyTuple_SetItem.restype = c_int

a = pythonapi.PyTuple_New(1)
pythonapi.PyTuple_SetItem(a, 0, a)
a = PyObj_FromPtr(a)

assert type(a) is tuple
assert a[0] is a

repr(a) # '((...),)'
print(a) # segfault]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1348033089</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1348033089.9300220012664794921875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"bfroehle";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>2012 in review</title>
  <link>http://asmeurersympy.wordpress.com/2012/12/30/2012-in-review/</link>
  <pubDate>Sun, 30 Dec 2012 23:07:19 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1165</guid>
  <description/>
  <content:encoded><![CDATA[	<p>The WordPress.com stats helper monkeys prepared a 2012 annual report for this blog.</p>
	<a href="http://asmeurersympy.wordpress.com/2012/annual-report/"><img src="http://www.wordpress.com/wp-content/mu-plugins/annual-reports/img/2012-emailteaser.png" width="100%" alt="" /></a>
	<p>Here's an excerpt:</p>
	
	<blockquote>4,329 films were submitted to the 2012 Cannes Film Festival. This blog had <strong>20,000</strong> views in 2012. If each view were a film, this blog would power 5 Film Festivals</blockquote>
	<p><a href="http://asmeurersympy.wordpress.com/2012/annual-report/">Click here to see the complete report.</a></p>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1165</wp:post_id>
  <wp:post_date>2012-12-30 23:07:19</wp:post_date>
  <wp:post_date_gmt>2012-12-30 23:07:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>2012-in-review</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>wpcom_recap</wp:meta_key>
    <wp:meta_value><![CDATA[2012]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Emacs: One year later</title>
  <link>http://asmeurersympy.wordpress.com/2013/01/01/emacs-one-year-later/</link>
  <pubDate>Tue, 01 Jan 2013 09:51:21 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1168</guid>
  <description/>
  <content:encoded><![CDATA[As readers of this blog may remember, back in 2011, I decided to move to a command-line based editor. For roughly two weeks in December, 2011, I exclusively used Vim, and for the same amount of time in January, 2012, I used exclusively Emacs. I had used a little of each editor in the past, but this was my first time using them to do true editing work. My experiences are chronicled in my blog posts (parts <a href="http://asmeurersympy.wordpress.com/2011/12/20/vim-vs-emacs-part-1/" title="1">1</a>, <a href="http://asmeurersympy.wordpress.com/2012/01/03/vim-vs-emacs-part-2/" title="2">2</a>, <a href="http://asmeurersympy.wordpress.com/2012/01/13/vim-vs-emacs-part-3/" title="3">3</a>, and <a href="http://asmeurersympy.wordpress.com/2012/07/09/emacs-7-months-later/" title="7 months later follow up">7 months later follow up</a>).  

To summarize, I decided to use Emacs, as I found it to be much more intuitive, and much more user-friendly.  Today, January 1, marks the one-year point of my using Emacs as my sole text editor, with some exceptions (notably, I'm currently writing this blog post in the browser).  So I'd like to make some observations:

	<li>Either one of these editors (Vim or Emacs) is going to really suck unless you are willing to make a serious investment in customizing them and installing nice addons. For the second point, Emacs has an advantage, because the philosophy of Vim is to be barebones whereas the philosophy of Emacs is to be featureful, so that in particular many things that were once addons of Emacs are now included in the standard installation.  For customization, on the one hand, Emacs is easier, because it has a nice interface (<code>M-x customize</code>), but on the other hand, Vim's scripting language is much easier to hack on than Emacs lisp (I still can't code in Lisp to save my life; it's a very challenging programming language).<br /><br />But my point here is that neither has really great defaults. For example, in Emacs, <code>M-space</code> is bound to <code>just-one-space</code>, which is great for programming.  What it does is remove all spaces around the cursor, except for one.  But to be really useful, it also should include newlines.  It doesn't do this by default.  Rather, you have to call it with a negative argument.  So to be really useful, you have to add

[sourcecode]
(defun just-one-space-with-newline ()
  &quot;Call just-one-space with a negative argument&quot;
  (interactive)
  (just-one-space -1))

(global-set-key (kbd &quot;M-SPC&quot;) 'just-one-space-with-newline)
[/sourcecode]

to your <code>.emacs</code> file.</li>

	<li>Emacs has great features, but I always have to look them up.  Or rather, I have to look up the keyboard shortcuts for them.  I only have the keyboard shortcuts memorized for the things I do every day.  I even ended up forgetting really important ones, like <code>M-w</code> (Emacs version of copy).  And if a feature involves several keystrokes to access, forget about it (for example, rectangular selection, or any features of special modes).  If I use a new mode, e.g., for some file type that I rarely edit (like HTML), I might as well not have any of the features, other than the syntax highlighting, because I either don't know what they are, or even if I know that they should exist (like automatic tag completion for html), I have no idea how to access them. <br /><br />

There's really something to be said about GUI editors, which give these things to users in a way that they don't have to memorize anything.  Perhaps I should try to use the menu more.  Or maybe authors of addons should aim to make features require as little cognitive user interaction as possible (such as the excellent <a href="http://cx4a.org/software/auto-complete/manual.html"><code>auto-complete-mode</code></a> I mentioned in <a href="http://asmeurersympy.wordpress.com/2012/01/13/vim-vs-emacs-part-3/">part 3</a>).

<br /><br /> I mention this because it is one of the things I complained about with Vim, that the keybindings were too hard to memorize.  Of course, the difference with Vim is that one has to memorize keybindings to do even the most basic of editing tasks, whereas with Emacs one can always fall back to more natural things like <code>Shift-Arrow Key</code> to select text or <code>Delete</code> to delete the character under the cursor (and yes, I know you can rebind this stuff in Vim; I refer you to the previous bullet point). </li>

	<li>I mentioned at the end of part 3 that Vim might still be useful to learn, as vi is available literally anywhere that you have POSIX.  I honestly don't think I would be able to use vi or vim if I had to, customization or no, unless I had my keyboard cheat sheet and a decent amount of time.  If I'm stuck on a barebones system and I can't do anything about it, I'll use nano/pico before I use vi.  It's not that I hate vi. I just can't do anything with it. It is the same to me now as it was before I used it in-depth.  I have forgotten all the keyboard shortcuts, except for <code>ESC</code> and <code>i</code>.</li>

	<li>I don't use <code>emacsclient</code> any more.  Ever since I got my new retina MacBook Pro, I don't need it any more, because with the solid state drive starting Emacs from scratch is instantaneous.  I'm glad to get rid of it, because it had some seriously annoying glitches.</li>

	<li>Add <code>alias e=emacs</code> to your Bash config file (<code>.profile</code> or <code>.bashrc</code>). It makes life much easier. "emacs" is not an easy word to type, at least on QWERTY keyboards.</li>

	<li>I still feel like I am not nearly as efficient in Emacs as I could be. On the one hand, I know there are built-in features (like rectangular selection) that I do not take advantage of enough.  I have been a bit lazy with customization: there are a handful of things that I do often that require several keystrokes, but I still haven't created custom keyboard shortcuts for (off the top of my head: copying and pasting to/from the Mac OS X clipboard and rigidly indenting/dedenting a block of text (<code>C-u 4 C-x TAB</code>, actually <code>C-c u 4 C-x TAB</code>, since I did the sensible thing and rebound <code>C-u</code> to clear to the previous newline, and bound <code>universal-argument</code> to <code>C-c u</code>) come to mind). <br /><br />I feel as if I were to watch someone who has used Emacs for a long time that I would learn a lot of tricks.</li>

	<li>I really should learn Emacs lisp. There are a lot of little customizations that I would like to make, but they are really niche, and can only be done programmatically.  But who has the time to learn a completely new programming language (plus a whole library, as just knowing Lisp is useless if you don't know the proper Emacs funtions and variables and coding styles)?</li>


	<li>I've still not found a good visual browser for jumping to function definitions in a file (mostly Python function definitions, but also other kinds of headers for other kinds of files).  The best I've found is <code>imenu</code>. If you know of anything, please let me know.  One thing I really liked about Vim was the <a href="http://www.vim.org/scripts/script.php?script_id=273">tag list</a> extension, which did this perfectly (thanks to commenter <a href="http://asmeurersympy.wordpress.com/2011/12/20/vim-vs-emacs-part-1/#comment-424">Scott</a> for pointing it out to me).  I've been told that Cedet has something like this, but every time I try to install it, I run into some issues that just seem like way too much work (I don't remember what they are, it won't compile or something, or maybe it just wants to do just way too much and I can't figure out how to disable everything except for the parts I want).  </li>

	<li>If you ever code in C, add the following to your Makefile

[code]
check-syntax:
	$(CC) -o nul $(FLAGS) -S $(CHK_SOURCES)
[/code]

(and if you don't use a Makefile, start using one now).  This is assuming you have <code>CC</code> and <code>FLAGS</code> defined at the top (generally to something like <code>cc</code> and <code>-Wall</code>, respectively). Also, add the following to your <code>.emacs</code>

[code]
;; ===== Turn on flymake-mode ====

(add-hook 'c-mode-common-hook 'turn-on-flymake)
(defun turn-on-flymake ()
  &quot;Force flymake-mode on. For use in hooks.&quot;
  (interactive)
  (flymake-mode 1))

(add-hook 'c-mode-common-hook 'flymake-keyboard-shortcuts)
(defun flymake-keyboard-shortcuts ()
  &quot;Add keyboard shortcuts for flymake goto next/prev error.&quot;
  (interactive)
  (local-set-key &quot;\M-n&quot; 'flymake-goto-next-error)
  (local-set-key &quot;\M-p&quot; 'flymake-goto-prev-error))
[/code]

The last part adds the useful keyboard shortcuts <code>M-n</code> and <code>M-p</code> to move between errors.  Now, errors in your C code will show up automatically as you type.  If you use the command line version of emacs like I do, and not the GUI version, you'll also need to install the <a href="http://www.emacswiki.org/emacs/flymake-cursor.el">flymake-cursor</a> module, which makes the errors show up in the mode line, since otherwise it tries to use mouse popups.  You can change the colors using <code>M-x customize-face</code> (search for "flymake"). </li>

	<li>I never got flymake to work with LaTeX.  Does anyone know how to do it? It seems it is hardcoded to use MikTeX, the Windows version of LaTeX. I found some stuff, but none of it worked.  <br /><br />

Actually, what I really would like is not syntax checking (I rarely make syntax mistakes in LaTeX any more), but rather something that automatically builds the PDF constantly as I type.  That way, I can just look over at the PDF as I am writing (I use an external monitor for this. I highly recommend it if you use LaTeX, especially one of those monitors that swivels to portrait mode).  </li>

	<li>If you use Mac OS X, you can use the very excellent <a href="http://pqrs.org/macosx/keyremap4macbook/">KeyRemap4MacBook</a> program to make regular Mac OS X programs act more like Emacs.  Mac OS X already has many Emacs shortcuts built in (like <code>C-a</code>, <code>C-e</code>, etc.), but that only works in Cocoa apps, and it doesn't include any meta key shortcuts.  This lets you use additional shortcuts literally everywhere (don't worry, it automatically doesn't use them in the Terminal), including an emulator for <code>C-space</code> and some <code>C-x</code> commands (like <code>C-x C-s</code> to <code>Command-s</code>).  It doesn't work on context sensitive shortcuts, unfortunately, unless the operating system already supports it with another keyboard shortcut (e.g., it can map <code>M-f</code> to <code>Option-right arrow</code>).  For example, it can't enable moving between paragraphs with <code>C-S-{</code> and <code>C-S-}</code>.  If anyone knows how to do that, let me know. </li>

	<li>For about a month this summer, I had to use a Linux laptop, because my Mac broke and my new Mac took a month to arrive (the downside to ordering a new computer immediately after it is announced by Apple).  At this point, my saving of all my customizations to <a href="http://pqrs.org/macosx/keyremap4macbook/">GitHub</a> really helped a lot.  I created a new branch for the Linux computer (because several things in my customizations were Mac specific), and just symlinked the files I wanted.  A hint I can give to people using Linux is to use Konsole.  The Gnome terminal sucks.  One thing I never figured out is how to make Konsole (or any other Terminal for that matter) to send Control-Shift shortcuts to Emacs (see http://superuser.com/q/439961/39697).   I don't use Linux any more at the moment, but if anyone knows what was going on there, add an answer to that question. </li>

	<li>In <a href="http://asmeurersympy.wordpress.com/2012/01/13/vim-vs-emacs-part-3/">part 3</a> mentioned that <a href="http://www.dr-qubit.org/predictive/predictive-user-manual/html/index.php">predictive mode</a> was cool, but not very useful.  What it does is basically add tab completion for every word in the English language.  Actually, I've found using auto-complete-mode even when editing text (or LaTeX) to be very useful.  Unlike predictive mode, it only guesses words that you've already typed  (it turns out that you tend to type the same words over and over, and doubly so if those words are LaTeX math commands).  Also, predictive mode has a set order of words, which supposedly helps to use it with muscle memory, whereas auto-complete-mode tries to learn what words you are more likely to use based on some basic statistical machine-learning.  Also, auto-complete-mode has a much better visual UI and smarter defaults than predictive mode. The result is that it's actually quite useful and makes typing plain text, as well as LaTeX (actually, pretty much anything, as long as you tend to use the same words repeatedly) much faster.  I recommend enabling auto-complete-mode almost everywhere using hooks, like

[code]
(add-hook 'latex-mode-hook 'auto-complete-mode)
(add-hook 'LaTeX-mode-hook 'auto-complete-mode)
(add-hook 'prog-mode-hook 'auto-complete-mode)
;; etc.
[/code]

</li>


	<li>At the end of the day, I'm pretty happy with Emacs.  I've managed to fix most of the things that make it annoying, and it is orders of magnitude more powerful than any GUI editor or IDE I've ever seen, especially at just basic text editing, which is the most important thing (I can always use another program for other things, like debugging or whatever).  The editor uses the basic shortcuts that I am used to, and is quite efficient to write in.  Extensions like auto-complete-mode make using it much faster, though I could use some more extensions to make it even better (namely, a better isearch and a better imenu). Regarding Vim vs. Emacs, I'd like to quote something I said back in my <a href="http://asmeurersympy.wordpress.com/2011/12/20/vim-vs-emacs-part-1">first blog post</a> about Vim over a year ago: 

<blockquote>Vim is great for text <em>editing</em>, but not so hot for text <em>writing</em> (unless you always write text perfectly, so that you never need to leave insert mode until you are done typing). Just the simple act of deleting a mistyped word (yes, word, that happens a lot when you are decently fast touch typist) takes several keystrokes, when it should in my opinion only take one (two if you count the meta-key).</blockquote>

Needless to say, I find Emacs to be great for both text editing and text writing. </li>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1168</wp:post_id>
  <wp:post_date>2013-01-01 09:51:21</wp:post_date>
  <wp:post_date_gmt>2013-01-01 09:51:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>emacs-one-year-later</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>753</wp:comment_id>
    <wp:comment_author><![CDATA[Panos]]></wp:comment_author>
    <wp:comment_author_email>panos@foo.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>79.107.207.206</wp:comment_author_IP>
    <wp:comment_date>2013-01-18 12:46:47</wp:comment_date>
    <wp:comment_date_gmt>2013-01-18 12:46:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Deleting words in Vim takes just two keystrokes "dw" if you want to delete it and stay in normal mode or "cw" if you want to delete it and enter insert mode immediately. "dw" is for delete word and "cw" is for change word. If you want to operate on say 3 words then you type "d3w" etc.

From reading your post about vim, I am not sure if you have tried vimtutor. It is installed with vim and it explains basic stuff like this. Using a cheatsheet is not the best way to learn vim]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1358513207.2360661029815673828125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1358513207</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>795</wp:comment_id>
    <wp:comment_author><![CDATA[Björn Dahlgren]]></wp:comment_author>
    <wp:comment_author_email>bjodah@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://gravatar.com/bjodah</wp:comment_author_url>
    <wp:comment_author_IP>85.231.128.74</wp:comment_author_IP>
    <wp:comment_date>2013-02-20 23:07:46</wp:comment_date>
    <wp:comment_date_gmt>2013-02-20 23:07:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for putting an effort to write this up!

For indenting blocks of python:
Select the region to be indented and then: C-c &gt;
C-c &lt;  for -4 spaces]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1361508770.33578395843505859375;s:7:"message";s:42:"asmeurer reported this comment as not spam";s:5:"event";s:10:"report-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_user_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_user</wp:meta_key>
      <wp:meta_value>asmeurer</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1361401666</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1361401666.590290069580078125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"bjodah";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>796</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron Meurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>67.22.187.2</wp:comment_author_IP>
    <wp:comment_date>2013-02-20 23:40:21</wp:comment_date>
    <wp:comment_date_gmt>2013-02-20 23:40:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Oh awesome. I just may have to enable this in all modes.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>795</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1361403623</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1361403623.842504024505615234375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>818</wp:comment_id>
    <wp:comment_author><![CDATA[Rich Cheng]]></wp:comment_author>
    <wp:comment_author_email>asmeurersympy@whileyouweregone.co.uk</wp:comment_author_email>
    <wp:comment_author_url>http://whileyouweregone.co.uk/</wp:comment_author_url>
    <wp:comment_author_IP>81.149.252.156</wp:comment_author_IP>
    <wp:comment_date>2013-04-24 15:59:32</wp:comment_date>
    <wp:comment_date_gmt>2013-04-24 15:59:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I think it's more likely that wordpress deleted what he typed because it looked like an HTML tag.

The vim keystroke for deleting words in insert mode is CTRL-W.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>764</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1366819174</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1366819174.9526579380035400390625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>764</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron Meurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>67.22.187.2</wp:comment_author_IP>
    <wp:comment_date>2013-01-23 19:53:04</wp:comment_date>
    <wp:comment_date_gmt>2013-01-23 19:53:04</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You didn't type what it was (unless you really meant .)

I think to change how Emacs deletes stuff, you just have to change what characters are recognized as word boundaries.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>762</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1358970786.910501003265380859375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1358970786</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>762</wp:comment_id>
    <wp:comment_author><![CDATA[ipirlo]]></wp:comment_author>
    <wp:comment_author_email>dhyanableu@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>74.125.178.82</wp:comment_author_IP>
    <wp:comment_date>2013-01-23 12:54:17</wp:comment_date>
    <wp:comment_date_gmt>2013-01-23 12:54:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[To  backward-kill-word in Vim insert mode, use . It acts more intuitive than Emacs's  to me,  which would erase the whole thing:
    c += *
in one shot. The muscle memory is so ingrain that I have to swap the good old keybinding of  and  in Emacs :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1358945659</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1358945659.7404530048370361328125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>824</wp:comment_id>
    <wp:comment_author><![CDATA[ipirlo]]></wp:comment_author>
    <wp:comment_author_email>dhyanableu@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>8.35.201.6</wp:comment_author_IP>
    <wp:comment_date>2013-04-30 00:24:31</wp:comment_date>
    <wp:comment_date_gmt>2013-04-30 00:24:31</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Yes, [(control w)]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>818</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1367281473</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1367281474.0781509876251220703125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>754</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron Meurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>67.22.187.2</wp:comment_author_IP>
    <wp:comment_date>2013-01-18 16:48:47</wp:comment_date>
    <wp:comment_date_gmt>2013-01-18 16:48:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[If you're counting keystrokes, you should add one to all your counts for escape. 

I did use the vim tutorial. Is that the same thing? I didn't remember everything after one run through, and hence the cheat sheet. My actual "method" of learning vim was to use it cold turkey. The cheat sheet allows me to remember more than just the basic editing commands, which I think boosted my learning (it also kept me from going insane).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>753</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1358527729</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1358527729.9742920398712158203125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Tip for debugging SymPy with PuDB</title>
  <link>http://asmeurersympy.wordpress.com/2013/01/28/tip-for-debugging-sympy-with-pudb/</link>
  <pubDate>Mon, 28 Jan 2013 00:43:49 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1204</guid>
  <description/>
  <content:encoded><![CDATA[Usually, when I debug SymPy code with <a href="http://asmeurersympy.wordpress.com/2010/06/04/pudb-a-better-python-debugger/">PuDB</a>, I create a script that calls the code, then I put a 

[code language="py"]
import pudb; pudb.set_trace()
[/code]

in the SymPy library code where I want to start debugging. But this is annoying, first because I have to create the script, and second, because I have to modify the library code, and there's always the risk of accidentally commiting that.  Also, if I want to start debugging somewhere else, I have to edit the files and change it.

Well, I just figured out a better way.  <del datetime="2013-01-30T02:32:19+00:00">First, if you haven't already, add an alias like this in your bash config file (<code>~/.profile</code> or <code>~/.bashrc</code>):<code>alias pudb='python -m pudb.run</code>.</del> <i>As of <a href="https://github.com/inducer/pudb/pull/54">this pull request</a>, this is no longer necessary.  A <code>pudb</code> script is installed automatically with PuDB.</i>

This will let you run <code>pudb script.py</code> to debug <code>script.py</code>.  <del datetime="2013-02-05T04:22:39+00:00">Next, start PuDB. It doesn't matter with what. You can just run <code>touch test.py</code>, and then <code>pudb test.py</code>.</del>  <i>It occured to me that you can just set the breakpoint when starting isympy with PuDB.</i>

Now, press <code>m</code>, and navigate to where in the library code you want to start debugging.  It also helps to use <code>/</code> to search the current file and <code>L</code> to jump to a specific line.  When you get to the line where you want to start debugging, press <code>b</code> to set a breakpoint. You can do this in multiple places if you want.

Now, you just have to start <code>isympy</code> from within PuDB.  Just run <code>pudb bin/isympy</code>, and immediately press <code>c</code> to jump to the interactive prompt.  Now, run whatever code you want to debug.  When it gets to the breakpoint, PuDB will open, and you can start debugging.  If you type <code>c</code> to continue, it will go back to isympy. But the next time you run something that hits the breakpoint, it will open PuDB again. 

This trick works because breakpoints are saved to file (at <code>~/.config/pudb/saved-breakpoints</code>). In fact, if you want, you can just modify that file in the first step.  You can edit your saved breakpoints in the bottom right pane of PuDB. 

When you are done and you type <code>Ctrl-D</code> PuDB will pop-up again, asking if you want to quit.  That's because it was running the whole time, underneath isympy.  Just press <code>q</code>.  Note that you should avoid pressing <code>q</code> while debugging, or else PuDB will quit, and you will be left with just normal isympy (it won't break at your breakpoints any more).  Actually, if you do this, but doing <code>Ctrl-D</code> still opens the PuDB prompt, you can just press "Restart", and it should start working again.  Note that "Restart" will not actually reset isympy:  all your saved variables will still be the same, and any changes to the library code will not be reloaded.  To do that, you have to completely exit and start over again.

Of course, there is nothing SymPy specific about this trick. As long as you have a script that acts as an entry point to an interactive console for your application, you can use it.  If you just use IPython, you can use something like <code>pudb /bin/ipython</code> (replace <code>/bin/ipython</code> with the output of <code>which ipython</code>).  ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1204</wp:post_id>
  <wp:post_date>2013-01-28 00:43:49</wp:post_date>
  <wp:post_date_gmt>2013-01-28 00:43:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>tip-for-debugging-sympy-with-pudb</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>When does x^log(y) = y^log(x)?</title>
  <link>http://asmeurersympy.wordpress.com/2013/03/03/when-does-xlogy-ylogx/</link>
  <pubDate>Sun, 03 Mar 2013 06:49:35 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1218</guid>
  <description/>
  <content:encoded><![CDATA[<em>In this blog post, when I write $latex \log(x)$, I mean the natural logarithm, or log base $latex e$, i.e., $latex \ln(x)$.</em>

A discussion on a&nbsp;<a href="https://github.com/sympy/sympy/pull/1845">pull request</a>&nbsp;got me thinking about this question: what are the solutions to the complex equation $latex x^{\log{(y)}} = y^{\log(x)}$? &nbsp;At the outset, they look like different expressions. &nbsp;But clearly there some solutions. For example, if $latex x = y$, then obviously the two expressions will be the same. &nbsp;We probably should exclude $latex x = y = 0$, though note that even if $latex 0^{\log(0)}$ is well-defined (probably if it is it is either 0 or complex $latex \infty$), it will be the same well-defined value. But for the remainder of this blog post, I'll assume that $latex x$ and $latex y$ are nonzero.

Now, observe that if we apply $latex \log$ to both sides of the equation, we get $latex \log{\left(x^{\log(y)}\right )} = \log {\left (y^{\log(x)}\right )}$. &nbsp;Now, supposing that we can apply the famous logarithm exponent rule, we would get $latex \log(x)\log(y) = \log(y)\log(x)$, which means that if additionally $latex \log$ is one-to-one, we would have that the original expressions must be equal.

The second question, that of <a href="http://en.wikipedia.org/wiki/Injective_function">injectivity</a>, is easier to answer than the first, so I'll address it first. &nbsp;Note that the complex exponential is not one-to-one, because for example $latex e^0 = e^{2\pi i} = 1$. &nbsp;But we still define the complex logarithm as the "inverse" of the complex exponential. &nbsp;What this really means is that the complex logarithm is strictly speaking not a function, because it is not well-defined. Recall that the definition of one-to-one means that $latex f(x) = f(y)$ implies $latex x = y$, and that the definition of well-defined is that $latex x = y$ implies $latex f(x) = f(y)$. &nbsp;It is clear to see here that $latex f$ being one-to-one is the same as $latex f^{-1}$ being well-defined and visa-versa ($latex f^{-1}$ here is the same loose definition of an inverse as saying that the complex logarithm is the inverse of the complex exponential).

So note that the complex logarithm is not well-defined exactly because the complex exponential is not one-to-one. &nbsp;We of course fix this problem by making it well-defined, i.e., it normally is multivalued, but we pick a single value consistently (i.e., we pick a <a href="http://en.wikipedia.org/wiki/Branch_point#Complex_logarithm">branch</a>), so that it is well-defined. &nbsp;For the remainder of this blog post, I will assume the standard choice of branch cut for the complex logarithm, i.e., the branch cut is along the negative axis, and we choose the branch where, for $latex x &gt; 0$, $latex \log(x)$ is real and $latex \log(-x) = \log(x) + i\pi$.

My point here is that we automatically know that the complex logarithm is one-to-one because we know that the complex exponential is well-defined.

So our question boils down to, when does the identity $latex \log{\left (z^a\right)} = a \log(z)$ hold? &nbsp;In SymPy, this identity is only applied by <code>expand_log()</code> or <code>logcombine()</code> when $latex a$ is real and $latex z$ is positive, so let us assume that we know that it holds under those conditions. Note that it also holds for some other values too. &nbsp;For example, by our definition $latex \log{\left (e^{i\pi}\right)} = \log(-1) = \log(1) + i\pi = i\pi = i\pi\log(e)$. &nbsp;For our example, this means that $latex x = e$, $latex y = -1$ is a non-trivial solution (non-trivial meaning $latex x \neq y$). &nbsp; Actually, the way that the complex logarithm being the "inverse" of the complex exponential works is that $latex e^{\log(x)} = x$ for all $latex x$ (on the other hand $latex \log{\left(e^x\right)} \neq x$ in general), so that if $latex x = e$, then $latex x^{\log(y)} = e^{\log(y)} = y$ and $latex y^{\log(x)} = y^{\log(e)} = y^1 = y$. &nbsp;In other words, $latex x = e$ is always a solution, for any $latex y\, (\neq 0)$ (and similarly $latex y = e$ for all $latex x$). &nbsp;In terms of our question of when $latex \log{\left(z^a\right)} = a\log(z)$, this just says that this always true for $latex a = \log(e) = 1$, regardless of $latex z$, which is obvious. &nbsp;We can also notice that this identity always holds for $latex a = 0$, regardless of $latex z$. In terms of our original equation, this means that $latex x = e^0 = 1$ is a solution for all $latex y$ (and as before, $latex y = 1$ for all $latex x$).

Note that $latex z &gt; 0$ and $latex a$ real corresponds to $latex x, y &gt; 0$ and $latex \log(x), \log(y)$ real, respectively, (which are the same condition). &nbsp;So we have so far that the following are solutions to $latex x^{\log(y)} = y^{\log(x)}$:
<ul>
	<li><span style="line-height:13px;">$latex x, y &gt; 0$</span></li>
	<li>$latex x = y$</li>
	<li>$latex x = e$, $latex y$ arbitrary</li>
	<li>$latex y = e$, $latex x$ arbitrary</li>
	<li>$latex x = 1$, $latex y$ arbitrary</li>
	<li>$latex y = 1$, $latex x$ arbitrary</li>
</ul>
Now let's look at some cases where $latex \log{\left (z^a\right)} \neq a\log(z)$. &nbsp;If $latex z &lt; 0$ and $latex a$ is a nonzero even integer, then $latex z^a &gt; 0$ so $latex \log{\left (z^a \right)}) = \log{\left (\left (-z\right )^a \right )} = a\log(-z)$, whereas $latex a\log(z) = a(\log(-z) + i\pi)$, which are different by our assumption that $latex a \neq 0$. &nbsp;If $latex a$ is an odd integer not equal to 1, then $latex z^a &lt; 0$, so&nbsp;$latex \log{\left (z^a \right)} = \log{\left (-z^a \right )} + i\pi$ = $latex&nbsp;\log{\left (\left(- z\right)^{a} \right )} + i\pi$ <em>Wordpress is refusing to render this. It should be</em> log((-z)^a) + iπ = $latex a\log(-z) + i\pi$, whereas $latex a\log(z) = a(\log(-z) + i\pi)$ again, which is not the same because $latex a \neq 1$. This means that if we let $latex x &lt; 0$ and $latex y = e^a$, where $latex a \neq 0, 1$, we get a non-solution (and the same if we swap $latex x$ and $latex y$).  

This is as far as I got tonight. Wordpress is arbitrarily not rendering that LaTeX for no good reason.  That and the very ugly LaTeX images is pissing me off (why wordpress.com hasn&#039;t switched to MathJaX yet is beyond me).  The next time I get some free time, I am going to seriously consider switching my blog to something hosted on GitHub, probably using the IPython notebook.  I welcome any hints people can give me on that, especially concerning migrating pages from this blog.

Here is some work on finding the rest of the solutions: the general definition of $latex \log(x)$ is $latex \log(|x|) + i\arg(x)$, where $latex \arg(x)$ is chosen in $latex (-\pi, \pi]$.  Therefore, if $latex \log{\left(z^a\right )} = a\log(z)$, we must have $latex \arg(z^a) = a\arg(z)$.  I believe a description of all such complex $latex z$ and $latex a$ will give all solutions $latex x = z$, $latex y = e^a$ (and $latex y = z$, $latex x = e^a$) to $latex x^{\log(y)} = y^{\log(x)}$.  I need to verify that, though, and I also need to think about how to describe such $latex z$ and $latex a$. I will (hopefully) continue this post later, either by editing this one or writing a new one (depending on how much more I come up with).  

Any comments to this post are welcome.  I know you can&#039;t preview comments, but if you want to use math, just write it as <code>&#036;latex math&#036;</code> (like <code>&#036;latex \log(x)&#036;</code> for $latex \log(x)$). If you mess something up, I'll edit your comment and fix it.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1218</wp:post_id>
  <wp:post_date>2013-03-03 06:49:35</wp:post_date>
  <wp:post_date_gmt>2013-03-03 06:49:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>when-does-xlogy-ylogx</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>How to make attributes un-inheritable in Python using descriptors</title>
  <link>http://asmeurersympy.wordpress.com/2013/04/06/how-to-make-attributes-un-inheritable-in-python-using-descriptors/</link>
  <pubDate>Sat, 06 Apr 2013 02:49:13 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1282</guid>
  <description/>
  <content:encoded><![CDATA[For https://github.com/sympy/sympy/pull/1969, and previous work at https://github.com/sympy/sympy/pull/1901, we added the ability for the SymPy doctester to run or not run doctests conditionally depending on whether or not required external dependencies are installed. This means that for example we can doctest all the plotting examples without them failing when matplotlib is not installed. 

For functions, this is as easy as decorating the function with <code>@doctest_depends</code>, which adds the attribute <code>_doctest_depends_on</code> to the function with a list of what dependencies the doctest depends on. The doctest will then not run the doctest unless those dependencies are installed.

For classes, this is not so easy. Ideally, one could just define <code>_doctest_depends_on</code> as an attribute of the class. However, the issue is that with classes, we have inheritance. But if class <code>A</code> has a docstring with a doctest that depends on some modules, it doesn't mean that a subclass <code>B</code> of <code>A</code> will have a doctest that does.  

Really, what we need to do is to decorate the docstring itself, not the class. Unfortunately, Python does not allow adding attributes to strings

[code language="py"]
&gt;&gt;&gt; a = &quot;&quot;
&gt;&gt;&gt; a.x = 1
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
AttributeError: 'str' object has no attribute 'x'
[/code]

So what we have to do is to create a attribute that doesn't inherit.  

I had for some time wanted to give <a href="http://docs.python.org/2/howto/descriptor.html">descriptors</a> in Python a try, since they are a cool feature, but also the second most complicated feature in Python (the first is metaclasses). If you don't know what a descriptor is, I recommend reading <a href="http://python-history.blogspot.com/2010/06/inside-story-on-new-style-classes.html?m=1">this blog post</a> by Guido van Rossum, the creator of Python. It's the best explanation of the feature there is.  

Basically, Python lets attributes define what happens when they are accessed (like <code>a.x</code>).  You may already know that objects can define how their attributes are accessed via <code>__getattr__</code>. This is different. With descriptors, the <em>attributes themselves</em> define what happens.  This may sound less useful, but in fact, it's a very core feature of the language. 

If you've ever wondered how <code>property</code>, <code>classmethod</code>, or <code>staticmethod</code> work in Python, the answer is descriptors. Basically, if you have something like

[code language="py"]
class A(object):
    def f(self):
        return 1
    f = property(f)
[/code]

Then <code>A().f</code> magically calls what would normally be <code>A().f()</code>. The way it works is that <code>property</code> defines the <code>__get__</code> method, which returns <code>f(obj)</code>, where <code>obj</code> is the calling object, here <code>A()</code> (remember in Python that the first argument of a method, usually called <code>self</code> is the object that calls the method).  

Descriptors can allow method to define arbitrary behavior when called, set, or deleted.  To make an attribute inaccessible to subclasses, then, you just need to define a descriptor that prevents the attribute from being accessed if the class of the calling object is not the original class.  Here is some code:

[code language="py"]
class nosubclasses(object):
    def __init__(self, f, cls):
        self.f = f
        self.cls = cls
    def __get__(self, obj, type=None):
        if type == self.cls:
            if hasattr(self.f, '__get__'):
                return self.f.__get__(obj, type)
            return self.f
        raise AttributeError
[/code]

it works like this

[code language="py"]
In [2]: class MyClass(object):
   ...:     x = 1
   ...:

In [3]: MyClass.x = nosubclasses(MyClass.x, MyClass)

In [4]: class MySubclass(MyClass):
   ...:     pass
   ...:

In [5]: MyClass.x
Out[5]: 1

In [6]: MyClass().x
Out[6]: 1

In [80]: MySubclass.x
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-80-2b2f456dd101&gt; in &lt;module&gt;()
----&gt; 1 MySubclass.x

&lt;ipython-input-51-7fe1b5063367&gt; in __get__(self, obj, type)
      8                 return self.f.__get__(obj, type)
      9             return self.f
---&gt; 10         raise AttributeError

AttributeError:

In [81]: MySubclass().x
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-81-93764eeb9948&gt; in &lt;module&gt;()
----&gt; 1 MySubclass().x

&lt;ipython-input-51-7fe1b5063367&gt; in __get__(self, obj, type)
      8                 return self.f.__get__(obj, type)
      9             return self.f
---&gt; 10         raise AttributeError

AttributeError:
[/code]

Note that by using the third argument to <code>__get__</code>, this works regardless if the attribute is accessed from the class or the object. I have to call <code>__get__</code> on <code>self.f</code> again if it has it to ensure that the right thing happens if the attribute has other descriptor logic defined (and note that regular methods have descriptor logic defined---that's how they convert the first argument <code>self</code> to implicitly be the calling object).

One could easily make class decorator that automatically adds the attribute to the class in a non-inheritable way:

[code language="py"]
def nosubclass_x(args):
    def _wrapper(cls):
        cls.x = nosubclasses(args, cls)
        return cls
    return _wrapper
[/code]

This automatically adds the property <code>x</code> to the decorated class with the value given in the decorator, and it won't be accessible to subclasses:

[code language="py"]
In [87]: @nosubclass_x(1)
   ....: class MyClass(object):
   ....:     pass
   ....:

In [88]: MyClass().x
Out[88]: 1

In [89]: MySubclass().x
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-89-93764eeb9948&gt; in &lt;module&gt;()
----&gt; 1 MySubclass().x

&lt;ipython-input-51-7fe1b5063367&gt; in __get__(self, obj, type)
      8                 return self.f.__get__(obj, type)
      9             return self.f
---&gt; 10         raise AttributeError

AttributeError:
[/code]

For SymPy, we can't use class decorators because we still support Python 2.5, and they were introduced in Python 2.6. The best work around is to just call <code>Class.attribute = nosubclasses(Class.attribute, Class)</code> after the class definition. Unfortunately, you can't access a class inside its definition like you can with functions, so this has to go at the end. 

<strong>Name Mangling</strong>

After coming up with all this, I remembered that Python already has a pretty standard way to define attributes in such a way that subclasses won't have access to them. All you have to do is use two underscores before the name, like <code>__x</code>, and it will be <a href="http://docs.python.org/2/reference/expressions.html#atom-identifiers">name mangled</a>. This means that the name will be renamed to <code>_classname__x</code> outside the class definition. The name will not be inherited by subclasses.  There are some subtleties with this, particularly for strange class names (names that are too long, or names that begin with an underscore). I <a href="http://stackoverflow.com/q/15845931/161801">asked about this on StackOverflow</a>. The best answer is that there was a function in the standard library, but it was removed in Python 3. My tests reveal that the behavior is different in CPYthon than in PyPy, so getting it right for every possible class is nontrivial. The descriptor thing should work everywhere, though.  On the other hand, <code>getattr(obj, '_' + obj.__class__.__name__ + attributename)</code> will work 99% of the time, and is much easier both to write and to understand than the descriptor. ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1282</wp:post_id>
  <wp:post_date>2013-04-06 02:49:13</wp:post_date>
  <wp:post_date_gmt>2013-04-06 02:49:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>how-to-make-attributes-un-inheritable-in-python-using-descriptors</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>SciPy 2013</title>
  <link>http://asmeurersympy.wordpress.com/2013/07/02/scipy-2013/</link>
  <pubDate>Tue, 02 Jul 2013 01:42:08 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1287</guid>
  <description/>
  <content:encoded><![CDATA[<p>This past week was the 2013 SciPy conference. It was an exciting time, and a lot of interesting things happened.&nbsp;</p><p>First, a background. This summer, I have been doing an internship with <a href="http://continuum.io/">Continuum Analytics</a>. There I have been working mainly on Anaconda and conda. Anaconda is Continuum's free (to everyone) Python distribution, which makes it really easy to get bootstrapped with all the scientific software (including SymPy). Conda is Anaconda's package manager, which, I think, solves many if not all of the main issues with the Python packaging tools like pip, easy_install, PyPI, and virtualenv.&nbsp;</p><p>I may write more about that later, but for now, I want to write about my experiences at the conference. The main point there is that I have already been in Austin for about a month, so getting to the conference this year was pretty easy.</p><p>On the first day of the conference, on Monday morning, Ondrej Certik and I had our tutorial for SymPy. For the past couple of months, I have been rewriting the official SymPy tutorial from scratch. The official tutorial for SymPy was very old, and had many issues. It only went over features that were good at the time of its writing, so while nothing in the tutorial was wrong, it didn't really represent the latest and greatest of the library. Also, it was written just like a list of examples, which is not much more than the API docs. In my new tutorial, I aimed to give a narrative style documentation, which starts from the very beginning of what symbolics are and works its way up to the basic functionality of things like solving and simplifying expressions. My goal was also to lead by example, and in particular, to avoid teaching things that I think either are antipatterns, or lead to antipatterns. In Python, there is one-- and preferably only one --way to do it. In SymPy, by the nature of the library, there are about seven different ways to create a Symbol, for example (see&nbsp;https://github.com/sympy/sympy/wiki/Idioms-and-Antipatterns, the section, "Creating Symbols"). But there is one <em>best</em> way to do it: by using symbols(). So all throughout the tutorial, I just use symbols(), even if I am creating a single Symbol. I avoid messy things like var.&nbsp;</p><p>The final tutorial is at&nbsp;http://docs.sympy.org/tutorial/tutorial/. This was the basis for the tutorial that Ondrej and I gave at SciPy. The site for our tutorial is at&nbsp;http://certik.github.io/scipy-2013-tutorial/html/index.html. There are links to videos, slides, and exercise notebooks there.&nbsp;</p><p>I think our tutorial was a great success. People liked (I think) the introduction from nothing to SymPy. For our exercises, we used the <a href="https://pypi.python.org/pypi/ipython_doctester">IPython Doctester</a>. I think that people really liked this way of doing exercises, but there were some issues getting it to work on everyone's machine.&nbsp;</p><p>In addition to my stuff, Ondrej presented some notebooks of examples of work that he has used in his work at LANL. I think this worked well. There were several physicists in the audience, who understood most of the content, but even for those who weren't (including me!), it really showed that SymPy is a useful tool. In a beginner tutorial, it is easy to get lost in the easy details, and forget that in the end, you can actually use SymPy to compute some powerful things. &nbsp;SymPy has in the past year or two really passed the barrier of toy to tool.&nbsp;</p><p>After our tutorial, I attended the IPython tutorial, and the two-part Scikit-Learn tutorial. The most awesome part of this was just getting to meet people. Fernando Perez, Thomas Kluyver, and Brian Granger of IPython were at the conference. Brain is also a SymPy developer, who has spearheaded the quantum module. From SymPy, in addition to Ondrej (who created SymPy), I met Matthew Rocklin, one of the top contributors, Jason Moore, one of the developers of PyDy, which uses SymPy's mechanics module, and David Li, who works on SymPy Gamma and SymPy Live (more on these people later).&nbsp;</p><p>After the tutorials, Wednesday and Thursday were the talks. There were a lot of good ones. Here are the ones that I remember the most</p><ul><li>Fernando's keynote. If you've ever seen one of Fernando's talks, you know that he is a great speaker.&nbsp;</li><li>Matthew's talk. His talk was about his work on using SymPy's matrix expressions to compile expressions for BLAS/LAPACK. This talk excited many people in the audience. I think this is great, because it shows people some of the real power of things you can only do with symbolics.</li><li>Jason Moore's talk about PyDy and the mechanics module. He ran out of time, but there is a nice example of using SymPy to generate a controller for an inverted triple pendulum, which seems impossible, but then he shows a video of an actual thing that can do it.</li><li>William Schroeder's keynote. The message was that the academic model is broken, and doesn't lead to reproducible research. While they are fixing things, the message is that we are the new publishers. There was also mention at the end that we should stop using noncommercial licenses, and stop using viral licenses like the GPL and LGPL. I was a little surprised to hear such a controversial statement, but it's actually very true, and I agree with him that if people don't stop using the GPL, then we will never achieve openness in science.&nbsp;</li><li>David Li's talk. David Li is a high school student (starting his senior year in the fall), who started with SymPy two years ago with Google Code-In. He has continued working on <a href="http://live.sympy.org/">SymPy Live</a>, and <a href="http://gamma.sympy.org/">SymPy Gamma</a> since. He is the reason that we have <a href="http://asmeurersympy.wordpress.com/2012/08/21/sympy-live-sphinx-extension/">SymPy Live in our docs</a>. His talk was also well received.&nbsp;&nbsp;David is a good speaker, and SymPy Gamma and SymPy Live are pretty cool (for those of you who don't know, SymPy Live is an online shell where you can run a Python session with SymPy in the browser, and SymPy Gamma is the SymPy version of WolframAlpha).</li><li>Brian Granger's talk. His talk is entitled "<strong><a href="http://conference.scipy.org/scipy2013/presentation_detail.php?id=195">Why you should write buggy software with as few features as possible</a>". </strong>I think he had some good messages in there. You have to reduce the scope of your project, or it will get out of hand. As for bugs, getting bug reports is a good thing, because it shows that people are using the software, and what parts of it they are using.&nbsp;</li><li>The lightning talks. Especially Matthew Rocklin's lightning talk. His talk was about splitting things up into very small packages, so that you don't have to get a huge package just for one function. He went a little far with it, and I think his ideas aren't really usable in the current Python packaging ecosystem, but, taken in moderation, I agree with him. At any rate, it was very entertaining (I don't have any video links here because they aren't posted yet, but I encourage you to watch the lightning talks once they are posted).&nbsp;</li><li>I heard the matplotlib talk was good, but I haven't seen it because it was at the same time as Matthew's talk. I plan to watch it when the videos come out. If you saw it, I encourage you to watch Matthew's talk, especially if you've ever used BLAS/LAPACK.</li></ul><p>Topping off the week were the sprints on Friday and Saturday. My goal was to get out a release of SymPy. We didn't quite get that far, but we got close. We are only blocking on a few small things to get out a release candidate, so expect one before the end of the week. We did introduce a lot of people to SymPy at the sprints, though, and got some first time contributions. Definitely I think we made a lot more people aware of SymPy at this conference than we ever have before.&nbsp;</p><p>Another interesting thing at the sprints: before the conference, I was telling David Li that we should switch to Dill for SymPy Live (the way SymPy Live works on the App Engine, it has to pickle the session between runs, because there is a 60 time limit on each execution). Dill is a library that extends Python's pickle so that it can pickle just about anything. At the end of David's talk, the guy who wrote Dill, Mike McKerns&nbsp;raised his hand and asked him about it! At the sprints, David and he worked together to get it working in SymPy Live (and coincidentally, he also uses SymPy in another package, mystic). There were some fixes needed for Dill. He also moved Dill out of a larger project (in the spirit of Matthew's lightning talk), and over to <a href="https://github.com/uqfoundation/dill">GitHub</a>. Now all they need is a logo (Paul Ivanov suggested a variation on "we can pickle that!").&nbsp;</p><p>In all, it was a fun conference. The best part, as always, was meeting people in person, and talking to them. To conclude, I want to mention two other interesting things that happened.</p><p>The first is that Matthew and I talked seriously about how to go about fixing the assumptions in SymPy. I will write to the list about this soon, but the basic idea is to just get in there and hack things together, so that we can get something that works. The work there is started at&nbsp;https://github.com/sympy/sympy/pull/2210, where I am seeing if we can merge the old and new assumptions, so that something assumed in one can be asked in the old one.</p>The second thing is that Ondrej got a new hat: <a href="http://asmeurersympy.files.wordpress.com/2013/07/2013-06-26-08-02-40-hdr.jpg"><img src="http://asmeurersympy.files.wordpress.com/2013/07/2013-06-26-08-02-40-hdr.jpg" alt="Ondrej&#039;s Hat" width="450" height="602" class="alignnone size-full wp-image-1344" /></a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1287</wp:post_id>
  <wp:post_date>2013-07-02 01:42:08</wp:post_date>
  <wp:post_date_gmt>2013-07-02 01:42:08</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scipy-2013</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>852</wp:comment_id>
    <wp:comment_author><![CDATA[pc hack]]></wp:comment_author>
    <wp:comment_author_email>mickey.dillon@freenet.de</wp:comment_author_email>
    <wp:comment_author_url>http://guzgame.com</wp:comment_author_url>
    <wp:comment_author_IP>37.187.49.54</wp:comment_author_IP>
    <wp:comment_date>2013-07-06 11:14:34</wp:comment_date>
    <wp:comment_date_gmt>2013-07-06 11:14:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I do not know whether it's just me or if perhaps everyone else encountering problems with your site. It looks like some of the text within your posts are running off the screen. Can somebody else please provide feedback and let me know if this is happening to them too? This might be a problem with my internet browser because I've had this happen previously.
Thanks]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1373109275</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1373109275.7527010440826416015625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1373128440.754889011383056640625;s:7:"message";s:49:"asmeurer changed the comment status to unapproved";s:5:"event";s:17:"status-unapproved";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Automating the SymPy release process</title>
  <link>http://asmeurersympy.wordpress.com/2013/07/07/automating-the-sympy-release-process/</link>
  <pubDate>Sun, 07 Jul 2013 03:13:57 +0000</pubDate>
  <dc:creator>asmeurer</dc:creator>
  <guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1348</guid>
  <description/>
  <content:encoded><![CDATA[So I have just published <a href="https://github.com/sympy/sympy/releases/sympy-0.7.3.rc1">SymPy 0.7.3.rc1</a>. I'll write a blog post about the release itself when we release 0.7.3 final, but for now, I wanted to write about how we managed to automate our release process.

Our story begins back in October of 2012, when I wrote a long winded <a href="https://groups.google.com/d/msg/sympy/UfNhyFv-oMg/PkwIz32K-lsJ">rant</a> to the mailing list about how long it was taking to get the 0.7.2 release out (it took over a month from the time the release branch was created). 

The rant is fun, and I recommend reading it. Here are some quotes

The intro:

<blockquote>
Now here's a timeline: 0.7.1 was released July 29, 2011, more than a year and two months ago.  0.7.0 was released just over a month before that, on June 28.  0.6.7 was released March 18, 2010, again over a year before 0.7.0.  In almost two year's time, we've had three releases, and are struggling to get out a fourth.  And it's not like there were no changes; quite the opposite in fact.  If you look at SymPy 0.6.6 compared to the current master, it's unbelievable the amount of changes that have gone forward in that time.  We've had 
since then the new polys, at least four completely new submodules (combinatorics, sets, differential geometry, and stats), massive improvements to integration and special functions, a ton of new stuff in the physics module, literally thousands of bug fixes, and the list goes on.  Each of these changes on it's own was enough to warrant a release. 

So in case I didn't make my point, le me state it explicitly: we need to release more often.  We need to release *way* more often. 
</blockquote>

My views on some of the fundamental (non-technical) issues:

<blockquote>
I think that one other thing that has held back many releases is the feeling of "wait, we should put this in the release". The use of a release branch has helped keep master moving along independently, but there still seems to be the feeling with many branches of, "this is a nice feature, it ought to go in the release."  My hope is that by making the release process smoother, we can release more often, and this feeling will go away, because it won't be a big deal if something waits until the next release.  As far as deprecations go, the real issue with them is time, not release numbers.  So if we deprecate a feature today vs. one month from today, it's not a big deal (as opposed to today vs. a year from today), regardless of how many versions are in between. 

I read about what GitHub does for their Windows product regarding releasing often on their blog: https://github.com/blog/1271-how-we-ship-github-for-windows (they actually have this philosophy for all their products).  One thing that they said is, "And by shipping updates so often, there is less anxiety about getting a particular feature ready for a particular release. If your pull request isn’t ready to be merged in time for today’s release, relax. There will be another one soon, so make that code shine!"  I think that is exactly the point here.  Another thing that they noted is that automation is the key to doing this, which is what I am aiming for with the above point. 
</blockquote>

My vision:

<blockquote>
Once we start releasing very often (and believe me, this is way down the road, but I'm trying to be forward looking here), we can do away with release candidates.  A release candidate lives in the wild for a week before the full release.  But if we are capable of releasing literally every week, then having release candidates is pointless.  If a bug slips into a release, we just fix it and it will be in the next release. 
</blockquote>
...
<blockquote>
We should release *at least* once a month.  I think that if the process is automated enough, that this will be very possible (as opposed to the current situation, where the release branch lasts longer than a month).  In times of high activity, we can release more often than that (e.g., after a big pull request is merged, we can release). 
</blockquote>

That was October. Today is July. Basically, our release process was way too long. Half of it was testing stuff, half of it was tedious releasing stuff (like making tarballs and so on), and half of it was updating websites. 

We have moved all our testing to Travis CI. So now every pull request is tested, and we can be pretty much assured that master is always passing the tests.  There is still some work to do here (currently Travis CI doesn't test with external dependencies), but it's mostly a solved problem.

For updating websites, we conceded that we are not going to update anything that we don't own. That means no attempting to make Debian or Sage packages, or updating Wikipedia or Freshmeat. Someone else will do that (and does anyone even use Freshmeat any more?). 

That leaves the releasing itself. It's still a pain, because we have to make a source tarball, Windows installer, html docs, and pdf docs, and do them all for both Python 2 and Python 3. 

So Ondrej suggested moving to fabric/vagrant. At the SciPy 2013 sprints, he started working on a fabfile that automates the whole process. Basically vagrant is a predefined Linux virtual machine that makes it easy to make everything completely reproducible. Fabric is a tool that makes it easy to write commands (in Python) that are run on that machine. 

Building the basic stuff was easy, but I want to automate <em>everything</em>. So far, not everything is done yet, but we're getting close. For example, in addition to building the tarballs, the fabric script checks the contents of the tarball against <code>git ls-files</code> to make sure that nothing is included that shouldn't be or left out accidentally (and, indeed, we caught some missing files that weren't included in the tarball, including the README). 

You can run all this yourself. Checkout the 0.7.3 branch from SymPy, then cd into the release directory, and read the README. Basically, you just install Fabric and Vagrant if you don't have them already, then run

[code]
vagrant up
fab vagrant prepare
fab vagrant release
[/code]

Note that this downloads a 280 MB virtual machine, so it will take some time to run for the first time. When you do this, the releases are in the `release` directory. 

Finally, I uploaded 0.7.3.rc1 to GitHub using the new releases feature. This is what the release looks like on GitHub, from the user point of view

<a href="http://asmeurersympy.files.wordpress.com/2013/07/screenshot-2013-07-06-22-05-31.png"><img src="http://asmeurersympy.files.wordpress.com/2013/07/screenshot-2013-07-06-22-05-31.png" alt="SymPy 0.7.3.rc1" width="450" height="260" class="alignnone size-full wp-image-1352" /></a>

This is what it looks like to me

<a href="http://asmeurersympy.files.wordpress.com/2013/07/screenshot-2013-07-06-22-08-19.png"><img src="http://asmeurersympy.files.wordpress.com/2013/07/screenshot-2013-07-06-22-08-19.png" alt="SymPy 0.7.3.rc1 Edit" width="450" height="470" class="alignnone size-full wp-image-1353" /></a>

GitHub has (obviously) the best interface I've ever seen for this. Of course, even better would be if there were an API, so that I could automate this too.  But since Google's <a href="http://google-opensource.blogspot.com/2013/05/a-change-to-google-code-download-service.html">announcement</a> that they are discontinuing downloads, we can no longer upload to Google Code. Our plan was to just use PyPI, but I am glad that we can have at least one other location, especially since PyPI is so buggy and unreliable (I can't even log in, I get a 502).

So please download this release candidate and test it. We espeically need people to test the Windows installer, since we haven't automated that part yet (actually, we are considering not making them any more, especailly given the existence of people like Christoph Gohlke who <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#sympy">make them</a> for SymPy anyway, but we'll see). The only thing that remains to be done is to finish writing the <a href="https://github.com/sympy/sympy/wiki/release-notes-for-0.7.3">release notes</a>. If you made any contributions to SymPy since the last release, please add them there. Or if you want to help out, you can go through our pull requests and make sure that nothing is missing.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1348</wp:post_id>
  <wp:post_date>2013-07-07 03:13:57</wp:post_date>
  <wp:post_date_gmt>2013-07-07 03:13:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>automating-the-sympy-release-process</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>871</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron Meurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>99.18.229.3</wp:comment_author_IP>
    <wp:comment_date>2013-07-12 03:19:07</wp:comment_date>
    <wp:comment_date_gmt>2013-07-12 03:19:07</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[It can be done in an hour, because other than those things you mentioned, the only other thing that isn’t automated yet is the uploading to websites (GitHub’s releases are nice, but I didn’t see any API for it). I’ll probably go to the trouble of making PyPI automated this weekend when I cut 0.7.3 final. Then, the release process will be

- Fix all blocking issues (this will always be the hardest part)
- Write release notes (also not easy, but this is the one thing that I’ve generally been able to get other people to volunteer for)

Once those are out of the way, we are in a state when we can release (OK, the second thing doesn’t have to happen until the release is done, but if we don’t do a release candidate, as we may not in the future, then it has to be done first). Then, the steps are

1. Create a release branch
2. Change the version in master
3. Push the branch up and make a pull request out of it
4. Change the version in the branch (technically this has to go before 3, because you can’t make a pull request out of an empty branch, but that messes up my little goto logic here)
5. Run fab vagrant release from the release directory
6. Fix any issues that it comes up with. In theory this will be none, because of our continuous testing, but in the current state of things, there will be issues with things like keeping AUTHORS and .mailmap up-to-date.
7. Copy the boilerplate text that it generates to the release notes (stuff like a table of md5 hashes, and a list of authors).
8. Upload everything to GitHub by hand (GitHub is not required, but I do feel a little better about having things at more than *just* PyPI)
9. If it’s a release candidate, wait a week, then goto 4. Fix bugs in the interim. Determine if another release candidate is needed. Otherwise, it’s a final release, so continue to 10.
10. Run the command to upload to PyPI.
11. Update the webpage and the docs (probably these can be at least partially automated)
12. Send a message to the mailing list (again, I think this can at least be copy-paste automated)
13. (optional) update the blog, post to google+ and twitter.

As for updating other sites, like sympy live and sympy gamma, I plan to leave that to other people, or I’ll do it myself if I have the time. The same for sites we don’t own like Wikipedia. I don’t plan to do anything with Google Code anymore.

Aside from bug fixing and the release notes, I anticipate the most annoying things to be:

- Updating .mailmap and AUTHORS. We should probably test this on Travis. There is a new script, ./bin/mailmap_update.py, which currently only tells you what is missing, but in the future may do some work of fixing it for you too. Already this makes it about 1/10 as painful as it was before.
- Updating the website and docs.
- All the social media stuff
- Uploading six files to GitHub by hand, one at a time.

Some of this can be automated, and I will probably look into it at some point or another. Of course, these all pales in comparison to the real elephant in the room, which is writing the release notes. We should think about better ways to handle that.

I have an idea. When you merge pull requests, there is an option to write a custom message. We could encourage people to write stuff in there whenever they merge important pull requests, and then write a tool that just pulls those things out into release notes. There would still need to be some way to check if something was missed, but I think this would be the dead-simplest way to encourage people to write release notes as features are implemented.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>869</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1373599147</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1373599147.9396278858184814453125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>869</wp:comment_id>
    <wp:comment_author><![CDATA[Matthew Rocklin]]></wp:comment_author>
    <wp:comment_author_email>mrocklin@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://matthewrocklin.com</wp:comment_author_url>
    <wp:comment_author_IP>98.206.167.189</wp:comment_author_IP>
    <wp:comment_date>2013-07-11 22:58:34</wp:comment_date>
    <wp:comment_date_gmt>2013-07-11 22:58:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Other than writing release notes and closing pull requests how much time will it take to do the 0.7.4 release candidate?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1373583514</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1373583514.66117191314697265625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"mrocklin";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>870</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron Meurer]]></wp:comment_author>
    <wp:comment_author_email>asmeurer@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://asmeurersympy.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>99.18.229.3</wp:comment_author_IP>
    <wp:comment_date>2013-07-12 03:00:45</wp:comment_date>
    <wp:comment_date_gmt>2013-07-12 03:00:45</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[It can be done in an hour, because other than those things you mentioned, the only other thing that isn't automated yet is the uploading to websites (GitHub's releases are nice, but I didn't see any API for it). I'll probably go to the trouble of making PyPI automated this weekend when I cut 0.7.3 final.   Then, the release process will be

- Fix all blocking issues (this will always be the hardest part)
- Write release notes (also not easy, but this is the one thing that I've generally been able to get other people to volunteer for)

Once those are out of the way, we are in a state when we can release (OK, the second thing doesn't have to happen until the release is done, but if we don't do a release candidate, as we may not in the future, then it has to be done first).  Then, the steps are

1. Create a release branch
2. Change the version in master
3. Push the branch up and make a pull request out of it
4. Change the version in the branch (technically this has to go before 3, because you can't make a pull request out of an empty branch, but that messes up my little goto logic here)
5. Run fab vagrant release from the release directory
6. Fix any issues that it comes up with. In theory this will be none, because of our continuous testing, but in the current state of things, there will be issues with things like keeping AUTHORS and .mailmap up-to-date.
7. Copy the boilerplate text that it generates to the release notes (stuff like a table of md5 hashes, and a list of authors).
8. Upload everything to GitHub by hand (GitHub is not required, but I do feel a little better about having things at more than *just* PyPI)
9. If it's a release candidate, wait a week, then goto 4. Fix bugs in the interim. Determine if another release candidate is needed. Otherwise, it's a final release, so continue to 10.
10. Run the command to upload to PyPI.
11. Update the webpage and the docs (probably these can be at least partially automated)
12. Send a message to the mailing list (again, I think this can at least be copy-paste automated)
13. (optional) update the blog, post to google+ and twitter.

As for updating other sites, like sympy live and sympy gamma, I plan to leave that to other people, or I'll do it myself if I have the time. The same for sites we don't own like Wikipedia. I don't plan to do anything with Google Code anymore. 

Aside from bug fixing and the release notes, I anticipate the most annoying things to be:

- Updating .mailmap and AUTHORS. We should probably test this on Travis. There is a new script, ./bin/mailmap_update.py, which currently only tells you what is missing, but in the future may do some work of fixing it for you too. Already this makes it about 1/10 as painful as it was before.
- Updating the website and docs.
- All the social media stuff
- Uploading six files to GitHub by hand, one at a time. 

Some of this can be automated, and I will probably look into it at some point or another. Of course, these all pales in comparison to the real elephant in the room, which is writing the release notes. We should think about better ways to handle that. 

I have an idea. When you merge pull requests, there is an option to write a custom message. We could encourage people to write stuff in there whenever they merge important pull requests, and then write a tool that just pulls those things out into release notes.  There would still need to be some way to check if something was missed, but I think this would be the dead-simplest way to encourage people to write release notes as features are implemented.]]></wp:comment_content>
    <wp:comment_approved>trash</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>7754439</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1373598046</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1373598046.289414882659912109375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1373599161.717709064483642578125;s:7:"message";s:44:"asmeurer changed the comment status to trash";s:5:"event";s:12:"status-trash";s:4:"user";s:8:"asmeurer";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_wp_trash_meta_status</wp:meta_key>
      <wp:meta_value>1</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_wp_trash_meta_time</wp:meta_key>
      <wp:meta_value>1373599161</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
  </channel>
</rss>
